/* 
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

drop procedure if exists assetProperties;
drop procedure if exists suppressedAssetProperties;
drop procedure if exists threatProperties;
drop procedure if exists suppressedThreatProperties;
drop procedure if exists countermeasureProperties;
drop procedure if exists suppressedCountermeasureProperties;
drop procedure if exists addAttacker;
drop procedure if exists updateAttacker;
drop procedure if exists updateAsset;
drop procedure if exists updateClassAssociation;
drop procedure if exists updateGoalAssociation;
drop procedure if exists addAttackerMotive;
drop procedure if exists addAttackerCapability;
drop procedure if exists add_attacker_role;
drop procedure if exists add_persona_role;
drop procedure if exists deleteAttackerComponents;
drop procedure if exists deleteAssetComponents;
drop procedure if exists deleteThreatComponents;
drop procedure if exists delete_attacker;
drop procedure if exists delete_role;
drop procedure if exists delete_threat;
drop procedure if exists deleteVulnerabilityComponents;
drop procedure if exists delete_vulnerability;
drop procedure if exists addAsset;
drop procedure if exists addClassAssociation;
drop procedure if exists addGoalAssociation;
drop procedure if exists addThreat;
drop procedure if exists updateThreat;
drop procedure if exists addVulnerability;
drop procedure if exists updateVulnerability;
drop procedure if exists addAssetThreat;
drop procedure if exists addAssetVulnerability;
drop procedure if exists addThreatAttacker;
drop procedure if exists addThreatLikelihood;
drop procedure if exists addVulnerabilitySeverity;
drop procedure if exists add_threat_properties;
drop procedure if exists add_asset_properties;
drop procedure if exists add_countermeasure_properties;
drop procedure if exists delete_threat_properties;
drop procedure if exists delete_asset_properties;
drop procedure if exists delete_countermeasure_properties;
drop procedure if exists attacker_environments;
drop procedure if exists risk_environments;
drop procedure if exists response_environments;
drop procedure if exists persona_environments;
drop procedure if exists threat_environments;
drop procedure if exists asset_environments;
drop procedure if exists vulnerability_environments;
drop procedure if exists add_attacker_environment;
drop procedure if exists add_risk_environment;
drop procedure if exists add_response_environment;
drop procedure if exists add_persona_environment;
drop procedure if exists add_threat_environment;
drop procedure if exists add_asset_environment;
drop procedure if exists add_vulnerability_environment;
drop procedure if exists attacker_roles;
drop procedure if exists persona_roles;
drop procedure if exists personaGoals;
drop procedure if exists attacker_capability;
drop procedure if exists attacker_motivation;
drop procedure if exists getAttackers;
drop procedure if exists getAssets;
drop procedure if exists getThreats;
drop procedure if exists getVulnerabilities;
drop procedure if exists getRisks;
drop function if exists threat_likelihood;
drop function if exists vulnerability_severity;
drop procedure if exists threat_asset;
drop procedure if exists threat_attacker;
drop procedure if exists delete_asset;
drop procedure if exists delete_classassociation;
drop procedure if exists delete_goalassociation;
drop procedure if exists vulnerability_asset;
drop procedure if exists riskAnalysisModel;
drop procedure if exists riskModel;
drop procedure if exists goalModel;
drop procedure if exists obstacleModel;
drop procedure if exists responsibilityModel;
drop procedure if exists taskModel;
drop procedure if exists classModel;
drop procedure if exists classTree;
drop procedure if exists concernlessClassTree;
drop procedure if exists concernlessClassModel;
drop procedure if exists attackerNames;
drop procedure if exists likelihoodNames;
drop procedure if exists severityNames;
drop procedure if exists roleNames;
drop procedure if exists riskNames;
drop procedure if exists environmentNames;
drop procedure if exists nonCompositeEnvironmentNames;
drop procedure if exists motivationNames;
drop procedure if exists capabilityNames;
drop procedure if exists goal_category_typeNames;
drop procedure if exists compositeEnvironments;
drop procedure if exists compositeEnvironmentIds;
drop procedure if exists addCompositeEnvironment;
drop procedure if exists addEnvironment;
drop procedure if exists deleteEnvironmentComponents;
drop procedure if exists delete_environment;
drop procedure if exists updateEnvironment;
drop procedure if exists duplicateProperty;
drop procedure if exists duplicateProperties;
drop procedure if exists overridingEnvironment;
drop procedure if exists addCompositeEnvironmentProperties;
drop procedure if exists riskEnvironments;
drop procedure if exists riskRating;
drop procedure if exists addResponse;
drop procedure if exists updateResponse;
drop procedure if exists addResponseCost;
drop procedure if exists addResponseDescription;
drop procedure if exists deleteResponseComponents;
drop procedure if exists delete_response;
drop function if exists responseCost;
drop function if exists responseDescription;
drop function if exists mitigationType;
drop function if exists mitigatePoint;
drop procedure if exists addCountermeasure;
drop procedure if exists updateCountermeasure;
drop procedure if exists countermeasure_environments;
drop procedure if exists add_countermeasure_environment;
drop procedure if exists add_countermeasure_cost;
drop function if exists countermeasureCost;
drop procedure if exists add_countermeasure_role;
drop procedure if exists countermeasure_roles;
drop procedure if exists add_mitigate_point;
drop procedure if exists add_response_mitigate;
drop procedure if exists addCountermeasureCost;
drop procedure if exists deleteCountermeasureComponents;
drop procedure if exists delete_countermeasure;
drop procedure if exists responseNames;
drop procedure if exists addCountermeasureTarget;
drop procedure if exists addCountermeasureTargetResponse;
drop procedure if exists addCountermeasureRole;
drop procedure if exists countermeasureRoles;
drop procedure if exists countermeasureTargets;
drop procedure if exists mitigatingLikelihood;
drop procedure if exists mitigatingSeverity;
drop procedure if exists responseRoles;
drop procedure if exists addResponseRole;
drop procedure if exists personaNames;
drop procedure if exists add_task_environment;
drop procedure if exists add_usecase_environment;
drop procedure if exists add_misusecase_environment;
drop procedure if exists task_environments;
drop procedure if exists usecase_environments;
drop procedure if exists misusecase_environments;
drop procedure if exists addPersonaDirect;
drop procedure if exists addPersonaNarrative;
drop function if exists personaDirect;
drop function if exists personaNarrative;
drop procedure if exists addPersona;
drop procedure if exists updatePersona;
drop procedure if exists deletePersonaComponents;
drop procedure if exists delete_persona;
drop procedure if exists taskPersonas;
drop procedure if exists useCaseRoles;
drop procedure if exists useCaseConditions;
drop procedure if exists useCaseSteps;
drop procedure if exists useCaseStepExceptions;
drop procedure if exists useCaseStepTags;
drop procedure if exists addUseCaseStepException;
drop procedure if exists addUseCaseStep;
drop procedure if exists addUseCaseStepTag;
drop procedure if exists taskAssets;
drop procedure if exists addTaskPersona;
drop procedure if exists addUseCaseRole;
drop procedure if exists addUseCaseConditions;
drop function if exists taskNarrative;
drop function if exists taskConsequences;
drop function if exists taskBenefits;
drop function if exists misuseCaseNarrative;
drop procedure if exists addTaskNarrative;
drop procedure if exists addMisuseCaseNarrative;
drop function if exists misuseCaseRisk;
drop procedure if exists addTask;
drop procedure if exists addUseCase;
drop procedure if exists updateUseCase;
drop procedure if exists addMisuseCase;
drop procedure if exists deleteTaskComponents;
drop procedure if exists deleteMisuseCaseComponents;
drop procedure if exists deleteUseCaseComponents;
drop procedure if exists delete_task;
drop procedure if exists delete_misusecase;
drop procedure if exists delete_usecase;
drop procedure if exists updateTask;
drop procedure if exists updateMisuseCase;
drop procedure if exists taskNames;
drop procedure if exists misusability_caseNames;
drop procedure if exists usecaseNames;
drop procedure if exists misusecaseNames;
drop procedure if exists addMisuseCaseRisk;
drop procedure if exists riskEnvironmentNames;
drop procedure if exists threatVulnerabilityEnvironmentNames;
drop function if exists taskDependencies;
drop procedure if exists addTaskDependencies;
drop procedure if exists delete_risk;
drop procedure if exists requirementNames;
drop function if exists requirementLabelId;
drop procedure if exists countermeasureRequirements;
drop procedure if exists addCountermeasureRequirement;
drop procedure if exists updateCountermeasureRequirement;
drop procedure if exists mitigatedRisks;
drop procedure if exists detection_mechanismNames;
drop procedure if exists delete_requirement;
drop procedure if exists detectionMechanisms;
drop procedure if exists assetNames;
drop procedure if exists classAssociationNames;
drop procedure if exists goalAssociationNames;
drop procedure if exists threatNames;
drop procedure if exists vulnerabilityNames;
drop procedure if exists role_environments;
drop procedure if exists roleCountermeasures;
drop procedure if exists roleResponses;
drop procedure if exists attackerDependents;
drop procedure if exists threatDependents;
drop procedure if exists reportDependents;
drop procedure if exists riskDependents;
drop procedure if exists responseDependents;
drop procedure if exists requirementDependents;
drop procedure if exists countermeasureDependents;
drop procedure if exists assetDependents;
drop procedure if exists domainPropertyDependents;
drop procedure if exists vulnerabilityDependents;
drop function if exists requirementNameId;
drop procedure if exists viewRemovableTraces;
drop procedure if exists requirementLabelComponents;
drop procedure if exists delete_trace;
drop procedure if exists addGoal;
drop procedure if exists updateGoal;
drop procedure if exists updateEnvironmentGoal;
drop procedure if exists delete_goal;
drop procedure if exists goalDependents;
drop procedure if exists goalEnvironmentDependents;
drop procedure if exists goalNames;
drop procedure if exists roleTasks;
drop procedure if exists rolePersonas;
drop procedure if exists countermeasureTaskPersonas;
drop procedure if exists countermeasurePersonas;
drop procedure if exists addCountermeasurePersona;
drop procedure if exists taskDependents;
drop procedure if exists usecaseDependents;
drop function if exists task_usability;
drop function if exists usability_score;
drop function if exists hindrance_score;
drop procedure if exists countermeasureNames;
drop function if exists classAssociationId;
drop function if exists goalAssociationId;
drop procedure if exists deleteGoalComponents;
drop procedure if exists deleteTemplateGoalComponents;
drop procedure if exists addGoalDefinition;
drop procedure if exists addGoalCategory;
drop procedure if exists addGoalPriority;
drop procedure if exists addGoalFitCriterion;
drop procedure if exists addGoalIssue;
drop function if exists goal_label;
drop function if exists goal_definition;
drop function if exists goal_fitcriterion;
drop function if exists goal_issue;
drop function if exists goal_category;
drop function if exists goal_priority;
drop procedure if exists add_goal_environment;
drop procedure if exists goal_environments;
drop procedure if exists goalTargets;
drop procedure if exists targetNames;
drop procedure if exists concernlessClassModelElements;
drop procedure if exists classModelElements;
drop procedure if exists goalModelElements;
drop procedure if exists obstacleModelElements;
drop procedure if exists responsibilityModelElements;
drop procedure if exists taskModelElements;
drop function if exists requirementLabel;
drop procedure if exists addTaskAsset;
drop procedure if exists addRequirementRole;
drop procedure if exists updateRequirementRole;
drop procedure if exists roleDependents;
drop procedure if exists mitigatingCountermeasures;
drop procedure if exists responseCountermeasures;
drop procedure if exists mitigatingMultiEnvCountermeasures;
drop procedure if exists goalCountermeasures;
drop procedure if exists threatAssetProperties;
drop procedure if exists mitigatingValues;
drop procedure if exists riskScore;
drop procedure if exists calculateRiskScore;
drop procedure if exists getRequirements;
drop procedure if exists getRequirement;
drop procedure if exists allowableTraces;
drop procedure if exists traceDimensions;
drop procedure if exists lastId;
drop procedure if exists newId;
drop procedure if exists newId2;
drop procedure if exists addRequirement;
drop procedure if exists updateRequirement;
drop procedure if exists getEnvironments;
drop function if exists requirementName;
drop procedure if exists getPersonas;
drop procedure if exists getTasks;
drop procedure if exists getUseCases;
drop procedure if exists getMisuseCases;
drop procedure if exists riskMisuseCase;
drop procedure if exists traceDimensionList;
drop procedure if exists addRisk;
drop procedure if exists updateRisk;
drop procedure if exists getResponses;
drop procedure if exists riskComponents;
drop function if exists allowableTraceDimension;
drop procedure if exists getRoles;
drop procedure if exists addRole;
drop procedure if exists updateRole;
drop procedure if exists getCountermeasures;
drop procedure if exists getGoals;
drop procedure if exists getEnvironmentGoals;
drop procedure if exists dimensionId;
drop procedure if exists getDimensions;
drop procedure if exists addDomainProperty;
drop procedure if exists updateDomainProperty;
drop procedure if exists getDomainProperties;
drop procedure if exists delete_domainproperty;
drop procedure if exists domainPropertyNames;
drop procedure if exists addObstacle;
drop procedure if exists updateObstacle;
drop procedure if exists deleteObstacleComponents;
drop procedure if exists delete_obstacle;
drop procedure if exists addObstacleDefinition;
drop procedure if exists addObstacleCategory;
drop procedure if exists getObstacles;
drop function if exists obstacle_definition;
drop function if exists obstacle_category;
drop procedure if exists add_obstacle_environment;
drop procedure if exists obstacle_environments;
drop procedure if exists obstacleNames;
drop procedure if exists obstacleDependents;
drop procedure if exists riskGoalTargets;
drop procedure if exists assetAssociations;
drop procedure if exists updateProjectSettings;
drop procedure if exists addDictionaryEntry;
drop procedure if exists deleteDictionary;
drop procedure if exists getProjectSettings;
drop procedure if exists getDictionary;
drop procedure if exists addContributorEntry;
drop procedure if exists getContributors;
drop procedure if exists deleteContributors;
drop procedure if exists addRevision;
drop procedure if exists getRevisions;
drop procedure if exists deleteRevisions;
drop procedure if exists getRequirementVersions;
drop function if exists existingResponseGoal;
drop procedure if exists goalRefinements;
drop procedure if exists subGoalRefinements;
drop procedure if exists asset_valueNames;
drop procedure if exists countermeasure_valueNames;
drop procedure if exists threat_valueNames;
drop procedure if exists risk_classNames;
drop procedure if exists getCustomisableValues;
drop procedure if exists delete_capability;
drop procedure if exists delete_motivation;
drop procedure if exists delete_asset_type;
drop procedure if exists delete_threat_type;
drop procedure if exists delete_vulnerability_type;
drop procedure if exists addValueType;
drop procedure if exists updateValueType;
drop procedure if exists asset_typeNames;
drop procedure if exists requirement_typeNames;
drop procedure if exists persona_typeNames;
drop procedure if exists threat_typeNames;
drop procedure if exists vulnerability_typeNames;
drop function if exists requirementLabelById;
drop procedure if exists threatTypes;
drop procedure if exists vulnerabilityTypes;
drop procedure if exists priority_typeNames;
drop procedure if exists getRiskElements;
drop procedure if exists addAssetDependents;
drop procedure if exists addGoalDependents;
drop procedure if exists addObstacleDependents;
drop procedure if exists role_typeNames;
drop procedure if exists obstacle_category_typeNames;
drop procedure if exists getVulnerabilityDirectory;
drop procedure if exists getThreatDirectory;
drop procedure if exists reassociateAsset;
drop procedure if exists add_reaction_detection_mechanism;
drop procedure if exists add_obstacle_concern;
drop procedure if exists obstacleConcerns;
drop procedure if exists addGoalConcernAssociation;
drop procedure if exists goalConcernAssociations;
drop procedure if exists addTaskConcernAssociation;
drop procedure if exists taskConcernAssociations;
drop procedure if exists add_goal_concern;
drop procedure if exists add_template_goal_concern;
drop procedure if exists add_template_goal_responsibility;
drop procedure if exists goalConcerns;
drop procedure if exists addDependency;
drop procedure if exists updateDependency;
drop procedure if exists delete_dependency;
drop procedure if exists getDependencies;
drop procedure if exists dependencyTable;
drop procedure if exists getColouredGoals;
drop function if exists goalColour;
drop procedure if exists goalTree;
drop procedure if exists subGoalTree;
drop procedure if exists obstacleTree;
drop procedure if exists subObstacleTree;
drop procedure if exists subTaskModel;
drop procedure if exists subMisuseCaseModel;
drop procedure if exists subResponsibilityModelElements;
drop procedure if exists subResponsibilityModel;
drop function if exists propertyName;
drop function if exists valueName;
drop procedure if exists associationDependencyCheck;
drop procedure if exists associationTargetDependencyCheck;
drop procedure if exists criticalAssetThreatCheck;
drop procedure if exists criticalAssetVulnerabilityCheck;
drop procedure if exists addTemplateAsset;
drop procedure if exists updateTemplateAsset;
drop procedure if exists delete_template_asset;
drop procedure if exists getTemplateAssets;
drop procedure if exists addSecurityPattern;
drop procedure if exists updateSecurityPattern;
drop procedure if exists delete_securitypattern;
drop procedure if exists delete_component;
drop procedure if exists template_assetNames;
drop procedure if exists deleteSecurityPatternComponents;
drop procedure if exists deleteComponentComponents;
drop procedure if exists deleteComponentViewComponents;
drop procedure if exists addSecurityPatternRequirement;
drop procedure if exists getSecurityPatternRequirements;
drop procedure if exists addSecurityPatternStructure;
drop procedure if exists getSecurityPatternStructure;
drop procedure if exists getSecurityPatterns;
drop procedure if exists securityPatternAssets;
drop procedure if exists situatePatternAsset;
drop procedure if exists newId1;
drop function if exists isCountermeasureAssetGenerated;
drop function if exists isCountermeasurePatternGenerated;
drop procedure if exists securitypatternNames;
drop procedure if exists exposedCountermeasure;
drop procedure if exists updateCountermeasureEffectiveness;
drop procedure if exists countermeasureEffectiveness;
drop procedure if exists countermeasurePatterns;
drop procedure if exists securityPatternDependents;
drop procedure if exists deleteSituatedPattern;
drop procedure if exists exploitingRiskElementCountermeasures;
drop procedure if exists candidateCountermeasurePatterns;
drop procedure if exists associateCountermeasureToPattern;
drop procedure if exists nameExists;
drop procedure if exists addExternalDocument;
drop procedure if exists updateExternalDocument;
drop procedure if exists getExternalDocuments;
drop procedure if exists getPersonaExternalDocuments;
drop procedure if exists delete_external_document;
drop procedure if exists addDocumentReference;
drop procedure if exists addConceptReference;
drop procedure if exists updateDocumentReference;
drop procedure if exists updateConceptReference;
drop procedure if exists getDocumentReferences;
drop procedure if exists getDocumentReferencesByExternalDocument;
drop procedure if exists getPersonaDocumentReferences;
drop procedure if exists getExternalDocumentReferences;
drop procedure if exists getConceptReferences;
drop procedure if exists getPersonaConceptReferences;
drop procedure if exists delete_document_reference;
drop procedure if exists addPersonaCharacteristic;
drop procedure if exists addTaskCharacteristic;
drop procedure if exists updatePersonaCharacteristic;
drop procedure if exists updateTaskCharacteristic;
drop procedure if exists addPersonaCharacteristicReference;
drop procedure if exists addTaskCharacteristicReference;
drop procedure if exists getPersonaCharacteristics;
drop procedure if exists getTaskCharacteristics;
drop procedure if exists getPersonaCharacteristicReferences;
drop procedure if exists delete_persona_characteristic;
drop procedure if exists delete_task_characteristic;
drop procedure if exists external_documentNames;
drop procedure if exists document_referenceNames;
drop procedure if exists behavioural_variableNames;
drop procedure if exists personaBehaviouralCharacteristics;
drop procedure if exists taskSpecificCharacteristics;
drop procedure if exists trace_dimensionNames;
drop procedure if exists concept_referenceNames;
drop procedure if exists delete_concept_reference;
drop procedure if exists characteristicReferences;
drop procedure if exists taskCharacteristicReferences;
drop procedure if exists deletePersonaCharacteristicComponents;
drop procedure if exists deleteTaskCharacteristicComponents;
drop procedure if exists asset_referenceNames;
drop procedure if exists attacker_referenceNames;
drop procedure if exists countermeasure_referenceNames;
drop procedure if exists domainproperty_referenceNames;
drop procedure if exists environment_referenceNames;
drop procedure if exists goal_referenceNames;
drop procedure if exists misusecase_referenceNames;
drop procedure if exists obstacle_referenceNames;
drop procedure if exists persona_referenceNames;
drop procedure if exists requirement_referenceNames;
drop procedure if exists response_referenceNames;
drop procedure if exists risk_referenceNames;
drop procedure if exists role_referenceNames;
drop procedure if exists task_referenceNames;
drop procedure if exists threat_referenceNames;
drop procedure if exists vulnerability_referenceNames;
drop procedure if exists referenceDescription;
drop procedure if exists documentReferenceNames;
drop procedure if exists referenceUse;
drop procedure if exists characteristicBacking;
drop procedure if exists taskCharacteristicBacking;
drop procedure if exists assumptionPersonaModel;
drop procedure if exists assumptionPersonaModel_all;
drop procedure if exists assumptionPersonaModel_c;
drop procedure if exists assumptionPersonaModel_b;
drop procedure if exists assumptionPersonaModel_bc;
drop procedure if exists assumptionPersonaModel_p;
drop procedure if exists assumptionPersonaModel_pc;
drop procedure if exists assumptionPersonaModel_pb;
drop procedure if exists assumptionPersonaModel_pbc;
drop procedure if exists assumptionTaskModel;
drop procedure if exists assumptionTaskModel_all;
drop procedure if exists assumptionTaskModel_c;
drop procedure if exists assumptionTaskModel_t;
drop procedure if exists assumptionTaskModel_tc;
drop procedure if exists persona_characteristicNames;
drop procedure if exists task_characteristicNames;
drop procedure if exists getGrounds;
drop procedure if exists getWarrant;
drop procedure if exists getRebuttal;
drop procedure if exists getTaskGrounds;
drop procedure if exists getTaskWarrant;
drop procedure if exists getTaskRebuttal;
drop procedure if exists addThreatDirectoryEntry;
drop procedure if exists addVulnerabilityDirectoryEntry;
drop procedure if exists delete_threat_directory;
drop procedure if exists delete_vulnerability_directory;
drop function if exists lastRequirementLabel;
drop procedure if exists cleanGoalEnvironment;
drop procedure if exists duplicateGoalEnvironment;
drop procedure if exists riskModel;
drop function if exists is_risk;
drop procedure if exists assumptionPersonaModel_textual;
drop procedure if exists riskAnalysisToXml;
drop function if exists s2a;
drop procedure if exists goalsToXml;
drop function if exists b2a;
drop function if exists durationLabel;
drop function if exists frequencyLabel;
drop procedure if exists usabilityToXml;
drop procedure if exists personaToXml;
drop procedure if exists associationsToXml;
drop procedure if exists projectToXml;
drop procedure if exists goalsPrettyPrint;
drop function if exists ppReqLabel;
drop function if exists ppUcRefs;
drop procedure if exists goalLabels;
drop procedure if exists subGoalLabels;
drop procedure if exists grepUseCases;
drop procedure if exists grepTasks;
drop procedure if exists grepGoals;
drop procedure if exists grepObstacles;
drop procedure if exists grepEnvironments;
drop procedure if exists grepDomainProperties;
drop procedure if exists grepRoles;
drop procedure if exists grepPersonas;
drop procedure if exists grepPersonaCharacteristics;
drop procedure if exists grepTaskCharacteristics;
drop procedure if exists grepReferences;
drop procedure if exists grepAssets;
drop procedure if exists grepVulnerabilities;
drop procedure if exists grepAttackers;
drop procedure if exists grepThreats;
drop procedure if exists grepRisks;
drop procedure if exists grepResponses;
drop procedure if exists grepProjectSettings;
drop procedure if exists grepCountermeasures;
drop procedure if exists grepDirectories;
drop procedure if exists grepCodes;
drop procedure if exists grepMemos;
drop procedure if exists grepInternalDocuments;
drop procedure if exists grepRequirements;
drop procedure if exists grepTags;
drop procedure if exists grepModel;
drop procedure if exists dimensionNameByShortCode;
drop procedure if exists misuseCaseRiskComponents;
drop procedure if exists modelStats;
drop procedure if exists assetStats;
drop procedure if exists attackerStats;
drop procedure if exists countermeasureStats;
drop procedure if exists domainPropertyStats;
drop procedure if exists goalStats;
drop procedure if exists obstacleStats;
drop procedure if exists personaStats;
drop procedure if exists requirementStats;
drop procedure if exists responseStats;
drop procedure if exists riskStats;
drop procedure if exists roleStats;
drop procedure if exists taskStats;
drop procedure if exists usecaseStats;
drop procedure if exists threatStats;
drop procedure if exists vulnerabilityStats;
drop procedure if exists personaCharacteristicStats;
drop procedure if exists personaReferenceStats;
drop function if exists defaultEnvironment;
drop procedure if exists environmentTensions;
drop function if exists tensionValue;
drop procedure if exists addValueTension;
drop procedure if exists pcToGrl;
drop function if exists cnToGn;
drop procedure if exists reference_synopsisNames;
drop procedure if exists characteristic_synopsisNames;
drop procedure if exists getReferenceSynopsis;
drop procedure if exists getReferenceContribution;
drop procedure if exists delete_reference_synopsis;
drop procedure if exists delete_document_reference_synopsis;
drop procedure if exists delete_requirement_reference_synopsis;
drop procedure if exists addReferenceSynopsis;
drop procedure if exists updateReferenceSynopsis;
drop procedure if exists addCharacteristicSynopsis;
drop procedure if exists updateCharacteristicSynopsis;
drop procedure if exists referenceCharacteristic;
drop procedure if exists getCharacteristicSynopsis;
drop function if exists hasCharacteristicSynopsis;
drop function if exists hasReferenceSynopsis;
drop procedure if exists addReferenceContribution;
drop procedure if exists updateReferenceContribution;
drop procedure if exists getUseCaseContributions;
drop procedure if exists addUseCaseContribution;
drop procedure if exists updateUseCaseContribution;
drop procedure if exists purgeRequirementsHistory;
drop procedure if exists subGoalNames;
drop procedure if exists goalEnvironments;
drop procedure if exists obstacleEnvironments;
drop procedure if exists subObstacleNames;
drop procedure if exists getEnvironmentObstacles;
drop procedure if exists updateEnvironmentObstacle;
drop procedure if exists relabelGoals;
drop procedure if exists relabelSubGoals;
drop procedure if exists relabelObstacles;
drop procedure if exists relabelSubObstacles;
drop procedure if exists labelGoal;
drop procedure if exists labelObstacle;
drop procedure if exists topLevelObstacles;
drop function if exists obstacle_label;
drop procedure if exists usecasesToRedmine;
drop procedure if exists redmineGoals;
drop procedure if exists redmineSubGoals;
drop procedure if exists dependentLabels;
drop procedure if exists redmineScenarios;
drop procedure if exists redmineArchitecture;
drop procedure if exists redmineAttackPatterns;
drop procedure if exists tvTypesToXml;
drop procedure if exists domainValuesToXml;
drop procedure if exists conceptMapModel;
drop procedure if exists parameterisedConceptMapModel;
drop function if exists traceabilityScore;
drop procedure if exists requirementScenarios;
drop procedure if exists requirementUseCases;
drop procedure if exists requirementBacklog;
drop function if exists groundedTrace;
drop function if exists preTraceabilityScore;
drop procedure if exists circularDependencyCheck;
drop procedure if exists requirementDependencyCheck;
drop procedure if exists addTag;
drop procedure if exists deleteTags;
drop procedure if exists delete_tag;
drop procedure if exists getTags;
drop procedure if exists addComponent;
drop procedure if exists updateComponent;
drop procedure if exists addComponentInterface;
drop procedure if exists addConnector;
drop procedure if exists interfaceNames;
drop procedure if exists deleteInterfaces;
drop procedure if exists addInterface;
drop procedure if exists getInterfaces;
drop procedure if exists add_template_asset_properties;
drop procedure if exists delete_template_asset_properties;
drop procedure if exists template_assetProperties;
drop procedure if exists addComponentStructure;
drop procedure if exists getComponentStructure;
drop procedure if exists addComponentRequirement;
drop procedure if exists getComponentRequirements;
drop procedure if exists getComponentView;
drop procedure if exists componentInterfaces;
drop procedure if exists componentViewWeaknesses;
drop procedure if exists getComponents;
drop procedure if exists getAllComponents;
drop procedure if exists getConnectors;
drop procedure if exists addComponentView;
drop procedure if exists updateComponentView;
drop procedure if exists addComponentToView;
drop procedure if exists delete_component_view;
drop procedure if exists componentViewInterfaces;
drop procedure if exists componentViewConnectors;
drop procedure if exists component_viewNames;
drop procedure if exists deleteSituatedComponentView;
drop procedure if exists componentNames;
drop procedure if exists connectorNames;
drop function if exists mitigated_likelihood;
drop function if exists mitigated_severity;
drop procedure if exists componentViewRequirements;
drop procedure if exists componentViewGoals;
drop procedure if exists componentAssets;
drop procedure if exists componentGoalAssets;
drop procedure if exists situateComponentAsset;
drop procedure if exists existing_object;
drop procedure if exists existing_characteristic;
drop procedure if exists addComponentTarget;
drop procedure if exists assetComponents;
drop procedure if exists addTemplateRequirement;
drop procedure if exists updateTemplateRequirement;
drop procedure if exists addTemplateGoal;
drop procedure if exists updateTemplateGoal;
drop procedure if exists delete_template_requirement;
drop procedure if exists delete_template_goal;
drop procedure if exists getTemplateRequirements;
drop procedure if exists getTemplateGoals;
drop procedure if exists template_requirementNames;
drop procedure if exists template_goalNames;
drop procedure if exists situateComponentViewRequirements;
drop procedure if exists situateComponentViewRequirement;
drop procedure if exists situateComponentViewGoals;
drop procedure if exists situateComponentViewGoal;
drop function if exists interfaceId;
drop procedure if exists access_rightNames;
drop procedure if exists protocolNames;
drop procedure if exists privilegeNames;
drop procedure if exists surface_typeNames;
drop procedure if exists attackSurfaceMetric;
drop procedure if exists derRatio_entryExitPoints;
drop procedure if exists derRatio_channels;
drop procedure if exists derRatio_untrustedSurface;
drop procedure if exists personasImpact;
drop procedure if exists personaImpact;
drop procedure if exists personaImpactRationale;
drop procedure if exists taskUseCases;
drop procedure if exists usecaseComponents;
drop procedure if exists componentClassModel;
drop procedure if exists addInternalDocument;
drop procedure if exists updateInternalDocument;
drop procedure if exists getInternalDocuments;
drop procedure if exists deleteInternalDocumentComponents;
drop procedure if exists delete_internal_document;
drop procedure if exists addCode;
drop procedure if exists addMemo;
drop procedure if exists updateCode;
drop procedure if exists updateMemo;
drop procedure if exists getCodes;
drop procedure if exists getMemos;
drop procedure if exists delete_code;
drop procedure if exists delete_memo;
drop procedure if exists documentCodes;
drop procedure if exists documentMemos;
drop procedure if exists artifactCodes;
drop procedure if exists artifactEnvironmentCodes;
drop procedure if exists addDocumentCode;
drop procedure if exists addDocumentMemo;
drop procedure if exists codeNames;
drop procedure if exists memoNames;
drop procedure if exists addArtifactCode;
drop procedure if exists addArtifactEnvironmentCode;
drop procedure if exists addArtifactCodeNetwork;
drop procedure if exists artifactCodeNetwork;
drop procedure if exists deleteArtifactCodeNetwork;
drop procedure if exists getImpliedProcesses;
drop procedure if exists addImpliedProcess;
drop procedure if exists updateImpliedProcess;
drop procedure if exists deleteImpliedProcessComponents;
drop procedure if exists delete_persona_implied_process;
drop procedure if exists impliedProcessNetwork;
drop procedure if exists addImpliedProcessNetworkRelationship;
drop procedure if exists usecaseStepSynopses;
drop procedure if exists addStepSynopsis;
drop procedure if exists directoryEntry;
drop procedure if exists addComponentGoal;
drop procedure if exists getComponentGoals;
drop procedure if exists templateGoalConcerns;
drop procedure if exists templateGoalResponsibilities;
drop procedure if exists addComponentGoalAssociation;
drop procedure if exists situateComponentViewGoalAssociations;
drop procedure if exists situateComponentViewGoalAssociation;
drop procedure if exists componentGoalAssociations;
drop procedure if exists componentAttackSurfaceMetric;
drop procedure if exists componentGoalModel;
drop procedure if exists importTemplateAsset;
drop procedure if exists importTemplateAssetIntoEnvironment;
drop procedure if exists importTemplateAssetIntoComponent;
drop procedure if exists obstacleProbability;
drop procedure if exists obstacle_probability;
drop procedure if exists candidateGoalObstacles;
drop procedure if exists addPersonaMotive;
drop procedure if exists addPersonaCapability;
drop procedure if exists riskObstacleTree;
drop procedure if exists obstacleParents;
drop procedure if exists redmineArchitectureSummary;
drop procedure if exists redmineAttackPatternsSummary;
drop procedure if exists walkObstacleBranch;
drop procedure if exists processesToXml;
drop procedure if exists mergeCodes;
drop procedure if exists impliedProcess;
drop procedure if exists persona_implied_processNames;
drop procedure if exists addImpliedProcessChannel;
drop procedure if exists impliedProcessChannels;
drop procedure if exists getQuotations;
drop procedure if exists updateDocumentCode;
drop procedure if exists deleteDocumentCode;
drop procedure if exists artifactText;
drop function if exists personaCodeNetworkId;
drop procedure if exists impliedCharacteristic;
drop procedure if exists impliedCharacteristicElements;
drop procedure if exists initialiseImpliedCharacteristic;
drop procedure if exists addImpliedCharacteristic;
drop procedure if exists updateImpliedCharacteristic;
drop procedure if exists updateImpliedCharacteristicElement;
drop procedure if exists addImpliedCharacteristicElement;
drop function if exists codeCount;
drop function if exists internalDocumentCount;
drop procedure if exists useCaseTags;
drop procedure if exists addIntention;
drop procedure if exists addContribution;
drop function if exists impliedCharacteristicIntention;
drop function if exists impliedCharacteristicElementIntention;
drop procedure if exists updateImpliedCharacteristicIntention;
drop procedure if exists updateImpliedCharacteristicElementIntention;
drop procedure if exists deniedGoals;
drop function if exists requirementId;

delimiter //

create procedure assetProperties(in assetId int,in environmentId int)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare workingCRationale varchar(4000);
  declare workingIRationale varchar(4000);
  declare workingAvRationale varchar(4000);
  declare workingAcRationale varchar(4000);
  declare workingAnRationale varchar(4000);
  declare workingPanRationale varchar(4000);
  declare workingUnlRationale varchar(4000);
  declare workingUnoRationale varchar(4000);
  declare done int default 0;
  declare currentEnvironmentId int;
  declare propertiesCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;

    open propertiesCursor;
    properties_loop: loop
      fetch propertiesCursor into currentEnvironmentId;
      if done = 1
      then
        leave properties_loop;
      end if;
      select property_value_id,property_rationale into cProperty,cRationale from asset_property where asset_id = assetId and property_id = 0 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into iProperty,iRationale from asset_property where asset_id = assetId and property_id = 1 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into avProperty,avRationale from asset_property where asset_id = assetId and property_id = 2 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into acProperty,acRationale from asset_property where asset_id = assetId and property_id = 3 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into anProperty,anRationale from asset_property where asset_id = assetId and property_id = 4 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into panProperty,panRationale from asset_property where asset_id = assetId and property_id = 5 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unlProperty,unlRationale from asset_property where asset_id = assetId and property_id = 6 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unoProperty,unoRationale from asset_property where asset_id = assetId and property_id = 7 and environment_id = currentEnvironmentId;

      if duplicatePolicy = 'Maximise'
      then
        if cProperty > workingCProperty then 
          set workingCProperty = cProperty; 
          set workingCRationale = cRationale; 
        end if;
        if iProperty > workingIProperty then 
          set workingIProperty = iProperty; 
          set workingIRationale = iRationale; 
        end if;
        if avProperty > workingAvProperty then 
          set workingAvProperty = avProperty; 
          set workingAvRationale = avRationale; 
        end if;
        if acProperty > workingAcProperty then 
          set workingAcProperty = acProperty; 
          set workingAcRationale = acRationale; 
        end if;
        if anProperty > workingAnProperty then 
          set workingAnProperty = anProperty; 
          set workingAnRationale = anRationale; 
        end if;
        if panProperty > workingPanProperty then 
          set workingPanProperty = panProperty; 
          set workingPanRationale = panRationale; 
        end if;
        if unlProperty > workingUnlProperty then 
          set workingUnlProperty = unlProperty; 
          set workingUnlRationale = unlRationale; 
        end if;
        if unoProperty > workingUnoProperty then 
          set workingUnoProperty = unoProperty; 
          set workingUnoRationale = unoRationale; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingCProperty = cProperty;
          set workingIProperty = iProperty;
          set workingAvProperty = avProperty;
          set workingAcProperty = acProperty;
          set workingAnProperty = anProperty;
          set workingPanProperty = panProperty;
          set workingUnlProperty = unlProperty;
          set workingUnoProperty = unoProperty;
          set workingCRationale = cRationale; 
          set workingIRationale = iRationale; 
          set workingAvRationale = avRationale; 
          set workingAcRationale = acRationale; 
          set workingAnRationale = anRationale; 
          set workingPanRationale = panRationale; 
          set workingUnlRationale = unlRationale; 
          set workingUnoRationale = unoRationale; 
        end if;
      end if;
    end loop properties_loop;
    close propertiesCursor;
    select workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty,workingCRationale,workingIRationale,workingAvRationale,workingAcRationale,workingAnRationale,workingPanRationale,workingUnlRationale,workingUnoRationale;
  else
    select property_value_id,property_rationale into cProperty,cRationale from asset_property where asset_id = assetId and property_id = 0 and environment_id = environmentId;
    select property_value_id,property_rationale into iProperty,iRationale from asset_property where asset_id = assetId and property_id = 1 and environment_id = environmentId;
    select property_value_id,property_rationale into avProperty,avRationale from asset_property where asset_id = assetId and property_id = 2 and environment_id = environmentId;
    select property_value_id,property_rationale into acProperty,acRationale from asset_property where asset_id = assetId and property_id = 3 and environment_id = environmentId;
    select property_value_id,property_rationale into anProperty,anRationale from asset_property where asset_id = assetId and property_id = 4 and environment_id = environmentId;
    select property_value_id,property_rationale into panProperty,panRationale from asset_property where asset_id = assetId and property_id = 5 and environment_id = environmentId;
    select property_value_id,property_rationale into unlProperty,unlRationale from asset_property where asset_id = assetId and property_id = 6 and environment_id = environmentId;
    select property_value_id,property_rationale into unoProperty,unoRationale from asset_property where asset_id = assetId and property_id = 7 and environment_id = environmentId;
    select ifnull(cProperty,0),ifnull(iProperty,0),ifnull(avProperty,0),ifnull(acProperty,0),ifnull(anProperty,0),ifnull(panProperty,0),ifnull(unlProperty,0),ifnull(unoProperty,0),cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale;
  end if;
end;
//


create procedure suppressedAssetProperties(in assetId int,in environmentId int)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare workingCRationale varchar(4000);
  declare workingIRationale varchar(4000);
  declare workingAvRationale varchar(4000);
  declare workingAcRationale varchar(4000);
  declare workingAnRationale varchar(4000);
  declare workingPanRationale varchar(4000);
  declare workingUnlRationale varchar(4000);
  declare workingUnoRationale varchar(4000);
  declare done int default 0;
  declare currentEnvironmentId int;
  declare propertiesCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  drop table if exists temp_assetproperties;
  create temporary table temp_assetproperties (cProperty int,iProperty int,avProperty int, acProperty int, anProperty int, panProperty int, unlProperty int, unoProperty int, c_rat varchar(4000), i_rat varchar(4000), av_rat varchar(4000), ac_rat varchar(4000), an_rat varchar(4000), pan_rat varchar(4000), unl_rat varchar(4000), uno_rat varchar(4000));

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;

    open propertiesCursor;
    properties_loop: loop
      fetch propertiesCursor into currentEnvironmentId;
      if done = 1
      then
        leave properties_loop;
      end if;
      select property_value_id,property_rationale into cProperty,cRationale from asset_property where asset_id = assetId and property_id = 0 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into iProperty,iRationale from asset_property where asset_id = assetId and property_id = 1 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into avProperty,avRationale from asset_property where asset_id = assetId and property_id = 2 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into acProperty,acRationale from asset_property where asset_id = assetId and property_id = 3 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into anProperty,anRationale from asset_property where asset_id = assetId and property_id = 4 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into panProperty,panRationale from asset_property where asset_id = assetId and property_id = 5 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unlProperty,unlRationale from asset_property where asset_id = assetId and property_id = 6 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unoProperty,unoRationale from asset_property where asset_id = assetId and property_id = 7 and environment_id = currentEnvironmentId;
      if duplicatePolicy = 'Maximise'
      then
        if cProperty > workingCProperty then 
          set workingCProperty = cProperty; 
          set workingCRationale = cRationale; 
        end if;
        if iProperty > workingIProperty then 
          set workingIProperty = iProperty; 
          set workingIRationale = iRationale; 
        end if;
        if avProperty > workingAvProperty then 
          set workingAvProperty = avProperty; 
          set workingAvRationale = avRationale; 
        end if;
        if acProperty > workingAcProperty then 
          set workingAcProperty = acProperty; 
          set workingAcRationale = acRationale; 
        end if;
        if anProperty > workingAnProperty then 
          set workingAnProperty = anProperty; 
          set workingAnRationale = anRationale; 
        end if;
        if panProperty > workingPanProperty then 
          set workingPanProperty = panProperty; 
          set workingPanRationale = panRationale; 
        end if;
        if unlProperty > workingUnlProperty then 
          set workingUnlProperty = unlProperty; 
          set workingUnlRationale = unlRationale; 
        end if;
        if unoProperty > workingUnoProperty then 
          set workingUnoProperty = unoProperty; 
          set workingUnoRationale = unoRationale; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingCProperty = cProperty;
          set workingIProperty = iProperty;
          set workingAvProperty = avProperty;
          set workingAcProperty = acProperty;
          set workingAnProperty = anProperty;
          set workingPanProperty = panProperty;
          set workingUnlProperty = unlProperty;
          set workingUnoProperty = unoProperty;
          set workingCRationale = cRationale; 
          set workingIRationale = iRationale; 
          set workingAvRationale = avRationale; 
          set workingAcRationale = acRationale; 
          set workingAnRationale = anRationale; 
          set workingPanRationale = panRationale; 
          set workingUnlRationale = unlRationale; 
          set workingUnoRationale = unoRationale; 
        end if;
      end if;
    end loop properties_loop;
    close propertiesCursor;
    insert into temp_assetproperties values (workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty,workingCRationale,workingIRationale,workingAvRationale,workingAcRationale,workingAnRationale,workingPanRationale,workingUnlRationale,workingUnoRationale);
  else
    select property_value_id,property_rationale into cProperty,cRationale from asset_property where asset_id = assetId and property_id = 0 and environment_id = environmentId;
    select property_value_id,property_rationale into iProperty,iRationale from asset_property where asset_id = assetId and property_id = 1 and environment_id = environmentId;
    select property_value_id,property_rationale into avProperty,avRationale from asset_property where asset_id = assetId and property_id = 2 and environment_id = environmentId;
    select property_value_id,property_rationale into acProperty,acRationale from asset_property where asset_id = assetId and property_id = 3 and environment_id = environmentId;
    select property_value_id,property_rationale into anProperty,anRationale from asset_property where asset_id = assetId and property_id = 4 and environment_id = environmentId;
    select property_value_id,property_rationale into panProperty,panRationale from asset_property where asset_id = assetId and property_id = 5 and environment_id = environmentId;
    select property_value_id,property_rationale into unlProperty,unlRationale from asset_property where asset_id = assetId and property_id = 6 and environment_id = environmentId;
    select property_value_id,property_rationale into unoProperty,unoRationale from asset_property where asset_id = assetId and property_id = 7 and environment_id = environmentId;
    insert into temp_assetproperties values (cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty,cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale);
  end if;
end;
//



create procedure threatProperties(in threatId int,in environmentId int)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare workingCRationale varchar(4000);
  declare workingIRationale varchar(4000);
  declare workingAvRationale varchar(4000);
  declare workingAcRationale varchar(4000);
  declare workingAnRationale varchar(4000);
  declare workingPanRationale varchar(4000);
  declare workingUnlRationale varchar(4000);
  declare workingUnoRationale varchar(4000);
  declare done int default 0;
  declare currentEnvironmentId int;
  declare propertiesCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;

    open propertiesCursor;
    properties_loop: loop
      fetch propertiesCursor into currentEnvironmentId;
      if done = 1
      then
        leave properties_loop;
      end if;
      select property_value_id,property_rationale into cProperty,cRationale from threat_property where threat_id = threatId and property_id = 0 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into iProperty,iRationale from threat_property where threat_id = threatId and property_id = 1 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into avProperty,avRationale from threat_property where threat_id = threatId and property_id = 2 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into acProperty,acRationale from threat_property where threat_id = threatId and property_id = 3 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into anProperty,anRationale from threat_property where threat_id = threatId and property_id = 4 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into panProperty,panRationale from threat_property where threat_id = threatId and property_id = 5 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unlProperty,unlRationale from threat_property where threat_id = threatId and property_id = 6 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unoProperty,unoRationale from threat_property where threat_id = threatId and property_id = 7 and environment_id = currentEnvironmentId;

      if duplicatePolicy = 'Maximise'
      then
        if cProperty > workingCProperty then 
          set workingCProperty = cProperty; 
          set workingCRationale = cRationale; 
        end if;
        if iProperty > workingIProperty then 
          set workingIProperty = iProperty; 
          set workingIRationale = iRationale; 
        end if;
        if avProperty > workingAvProperty then 
          set workingAvProperty = avProperty; 
          set workingAvRationale = avRationale; 
        end if;
        if acProperty > workingAcProperty then 
          set workingAcProperty = acProperty; 
          set workingAcRationale = acRationale; 
        end if;
        if anProperty > workingAnProperty then 
          set workingAnProperty = anProperty; 
          set workingAnRationale = anRationale; 
        end if;
        if panProperty > workingPanProperty then 
          set workingPanProperty = panProperty; 
          set workingPanRationale = panRationale; 
        end if;
        if unlProperty > workingUnlProperty then 
          set workingUnlProperty = unlProperty; 
          set workingUnlRationale = unlRationale; 
        end if;
        if unoProperty > workingUnoProperty then 
          set workingUnoProperty = unoProperty; 
          set workingUnoRationale = unoRationale; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingCProperty = cProperty;
          set workingIProperty = iProperty;
          set workingAvProperty = avProperty;
          set workingAcProperty = acProperty;
          set workingAnProperty = anProperty;
          set workingPanProperty = panProperty;
          set workingUnlProperty = unlProperty;
          set workingUnoProperty = unoProperty;
          set workingCRationale = cRationale; 
          set workingIRationale = iRationale; 
          set workingAvRationale = avRationale; 
          set workingAcRationale = acRationale; 
          set workingAnRationale = anRationale; 
          set workingPanRationale = panRationale; 
          set workingUnlRationale = unlRationale; 
          set workingUnoRationale = unoRationale; 
        end if;
      end if;
    end loop properties_loop;
    close propertiesCursor;
    select workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty,workingCRationale,workingIRationale,workingAvRationale,workingAcRationale,workingAnRationale,workingPanRationale,workingUnlRationale,workingUnoRationale;
  else
    select property_value_id,property_rationale into cProperty,cRationale from threat_property where threat_id = threatId and property_id = 0 and environment_id = environmentId;
    select property_value_id,property_rationale into iProperty,iRationale from threat_property where threat_id = threatId and property_id = 1 and environment_id = environmentId;
    select property_value_id,property_rationale into avProperty,avRationale from threat_property where threat_id = threatId and property_id = 2 and environment_id = environmentId;
    select property_value_id,property_rationale into acProperty,acRationale from threat_property where threat_id = threatId and property_id = 3 and environment_id = environmentId;
    select property_value_id,property_rationale into anProperty,anRationale from threat_property where threat_id = threatId and property_id = 4 and environment_id = environmentId;
    select property_value_id,property_rationale into panProperty,panRationale from threat_property where threat_id = threatId and property_id = 5 and environment_id = environmentId;
    select property_value_id,property_rationale into unlProperty,unlRationale from threat_property where threat_id = threatId and property_id = 6 and environment_id = environmentId;
    select property_value_id,property_rationale into unoProperty,unoRationale from threat_property where threat_id = threatId and property_id = 7 and environment_id = environmentId;
    select ifnull(cProperty,0),ifnull(iProperty,0),ifnull(avProperty,0),ifnull(acProperty,0),ifnull(anProperty,0),ifnull(panProperty,0),ifnull(unlProperty,0),ifnull(unoProperty,0),ifnull(cRationale,'None'),ifnull(iRationale,'None'),ifnull(avRationale,'None'),ifnull(acRationale,'None'),ifnull(anRationale,'None'),ifnull(panRationale,'None'),ifnull(unlRationale,'None'),ifnull(unoRationale,'None');
  end if;
end;
//


create procedure suppressedThreatProperties(in threatId int,in environmentId int)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare workingCRationale varchar(4000);
  declare workingIRationale varchar(4000);
  declare workingAvRationale varchar(4000);
  declare workingAcRationale varchar(4000);
  declare workingAnRationale varchar(4000);
  declare workingPanRationale varchar(4000);
  declare workingUnlRationale varchar(4000);
  declare workingUnoRationale varchar(4000);
  declare done int default 0;
  declare currentEnvironmentId int;
  declare propertiesCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  drop table if exists temp_threatproperties;
  create temporary table temp_threatproperties (cProperty int,iProperty int,avProperty int, acProperty int, anProperty int, panProperty int, unlProperty int, unoProperty int, c_rat varchar(4000), i_rat varchar(4000), av_rat varchar(4000), ac_rat varchar(4000), an_rat varchar(4000), pan_rat varchar(4000), unl_rat varchar(4000), uno_rat varchar(4000));

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    open propertiesCursor;
    properties_loop: loop
      fetch propertiesCursor into currentEnvironmentId;
      if done = 1
      then
        leave properties_loop;
      end if; 
      select property_value_id,property_rationale into cProperty,cRationale from threat_property where threat_id = threatId and property_id = 0 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into iProperty,iRationale from threat_property where threat_id = threatId and property_id = 1 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into avProperty,avRationale from threat_property where threat_id = threatId and property_id = 2 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into acProperty,acRationale from threat_property where threat_id = threatId and property_id = 3 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into anProperty,anRationale from threat_property where threat_id = threatId and property_id = 4 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into panProperty,panRationale from threat_property where threat_id = threatId and property_id = 5 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unlProperty,panRationale from threat_property where threat_id = threatId and property_id = 6 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unoProperty,unoRationale from threat_property where threat_id = threatId and property_id = 7 and environment_id = currentEnvironmentId;

      if duplicatePolicy = 'Maximise'
      then
        if cProperty > workingCProperty then 
          set workingCProperty = cProperty; 
          set workingCRationale = cRationale; 
        end if;
        if iProperty > workingIProperty then 
          set workingIProperty = iProperty; 
          set workingIRationale = iRationale; 
        end if;
        if avProperty > workingAvProperty then 
          set workingAvProperty = avProperty; 
          set workingAvRationale = avRationale; 
        end if;
        if acProperty > workingAcProperty then 
          set workingAcProperty = acProperty; 
          set workingAcRationale = acRationale; 
        end if;
        if anProperty > workingAnProperty then 
          set workingAnProperty = anProperty; 
          set workingAnRationale = anRationale; 
        end if;
        if panProperty > workingPanProperty then 
          set workingPanProperty = panProperty; 
          set workingPanRationale = panRationale; 
        end if;
        if unlProperty > workingUnlProperty then 
          set workingUnlProperty = unlProperty; 
          set workingUnlRationale = unlRationale; 
        end if;
        if unoProperty > workingUnoProperty then 
          set workingUnoProperty = unoProperty; 
          set workingUnoRationale = unoRationale; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingCProperty = cProperty;
          set workingIProperty = iProperty;
          set workingAvProperty = avProperty;
          set workingAcProperty = acProperty;
          set workingAnProperty = anProperty;
          set workingPanProperty = panProperty;
          set workingUnlProperty = unlProperty;
          set workingUnoProperty = unoProperty;
          set workingCRationale = cRationale; 
          set workingIRationale = iRationale; 
          set workingAvRationale = avRationale; 
          set workingAcRationale = acRationale; 
          set workingAnRationale = anRationale; 
          set workingPanRationale = panRationale; 
          set workingUnlRationale = unlRationale; 
          set workingUnoRationale = unoRationale; 
        end if;
      end if;
      set done = 0;
    end loop properties_loop;
    close propertiesCursor;
    insert into temp_threatproperties values(workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty,workingCRationale,workingIRationale,workingAvRationale,workingAcRationale,workingAnRationale,workingPanRationale,workingUnlRationale,workingUnoRationale);
  else
    select property_value_id,property_rationale into cProperty,cRationale from threat_property where threat_id = threatId and property_id = 0 and environment_id = environmentId;
    select property_value_id,property_rationale into iProperty,iRationale from threat_property where threat_id = threatId and property_id = 1 and environment_id = environmentId;
    select property_value_id,property_rationale into avProperty,avRationale from threat_property where threat_id = threatId and property_id = 2 and environment_id = environmentId;
    select property_value_id,property_rationale into acProperty,acRationale from threat_property where threat_id = threatId and property_id = 3 and environment_id = environmentId;
    select property_value_id,property_rationale into anProperty,anRationale from threat_property where threat_id = threatId and property_id = 4 and environment_id = environmentId;
    select property_value_id,property_rationale into panProperty,panRationale from threat_property where threat_id = threatId and property_id = 5 and environment_id = environmentId;
    select property_value_id,property_rationale into unlProperty,unlRationale from threat_property where threat_id = threatId and property_id = 6 and environment_id = environmentId;
    select property_value_id,property_rationale into unoProperty,unoRationale from threat_property where threat_id = threatId and property_id = 7 and environment_id = environmentId;
    insert into temp_threatproperties values(cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty,cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale);
  end if;
end;
//

create procedure countermeasureProperties(in cmId int,in environmentId int)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare workingCRationale varchar(4000);
  declare workingIRationale varchar(4000);
  declare workingAvRationale varchar(4000);
  declare workingAcRationale varchar(4000);
  declare workingAnRationale varchar(4000);
  declare workingPanRationale varchar(4000);
  declare workingUnlRationale varchar(4000);
  declare workingUnoRationale varchar(4000);
  declare done int default 0;
  declare currentEnvironmentId int;
  declare propertiesCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;

    open propertiesCursor;
    properties_loop: loop
      fetch propertiesCursor into currentEnvironmentId;
      if done = 1
      then
        leave properties_loop;
      end if;
      select property_value_id,property_rationale into cProperty,cRationale from countermeasure_property where countermeasure_id = cmId and property_id = 0 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into iProperty,iRationale from countermeasure_property where countermeasure_id = cmId and property_id = 1 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into avProperty,avRationale from countermeasure_property where countermeasure_id = cmId and property_id = 2 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into acProperty,acRationale from countermeasure_property where countermeasure_id = cmId and property_id = 3 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into anProperty,anRationale from countermeasure_property where countermeasure_id = cmId and property_id = 4 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into panProperty,panRationale from countermeasure_property where countermeasure_id = cmId and property_id = 5 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unlProperty,unlRationale from countermeasure_property where countermeasure_id = cmId and property_id = 6 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unoProperty,unoRationale from countermeasure_property where countermeasure_id = cmId and property_id = 7 and environment_id = currentEnvironmentId;
      if duplicatePolicy = 'Maximise'
      then
        if cProperty > workingCProperty then 
          set workingCProperty = cProperty; 
          set workingCRationale = cRationale; 
        end if;
        if iProperty > workingIProperty then 
          set workingIProperty = iProperty; 
          set workingIRationale = iRationale; 
        end if;
        if avProperty > workingAvProperty then 
          set workingAvProperty = avProperty; 
          set workingAvRationale = avRationale; 
        end if;
        if acProperty > workingAcProperty then 
          set workingAcProperty = acProperty; 
          set workingAcRationale = acRationale; 
        end if;
        if anProperty > workingAnProperty then 
          set workingAnProperty = anProperty; 
          set workingAnRationale = anRationale; 
        end if;
        if panProperty > workingPanProperty then 
          set workingPanProperty = panProperty; 
          set workingPanRationale = panRationale; 
        end if;
        if unlProperty > workingUnlProperty then 
          set workingUnlProperty = unlProperty; 
          set workingUnlRationale = unlRationale; 
        end if;
        if unoProperty > workingUnoProperty then 
          set workingUnoProperty = unoProperty; 
          set workingUnoRationale = unoRationale; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingCProperty = cProperty;
          set workingIProperty = iProperty;
          set workingAvProperty = avProperty;
          set workingAcProperty = acProperty;
          set workingAnProperty = anProperty;
          set workingPanProperty = panProperty;
          set workingUnlProperty = unlProperty;
          set workingUnoProperty = unoProperty;
          set workingCRationale = cRationale; 
          set workingIRationale = iRationale; 
          set workingAvRationale = avRationale; 
          set workingAcRationale = acRationale; 
          set workingAnRationale = anRationale; 
          set workingPanRationale = panRationale; 
          set workingUnlRationale = unlRationale; 
          set workingUnoRationale = unoRationale; 
        end if;
      end if;
      set done = 0;
    end loop properties_loop;
    close propertiesCursor;
    select workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty,workingCRationale,workingIRationale,workingAvRationale,workingAcRationale,workingAnRationale,workingPanRationale,workingUnlRationale,workingUnoRationale;
  else
    select property_value_id,property_rationale into cProperty,cRationale from countermeasure_property where countermeasure_id = cmId and property_id = 0 and environment_id = environmentId;
    select property_value_id,property_rationale into iProperty,iRationale from countermeasure_property where countermeasure_id = cmId and property_id = 1 and environment_id = environmentId;
    select property_value_id,property_rationale into avProperty,avRationale from countermeasure_property where countermeasure_id = cmId and property_id = 2 and environment_id = environmentId;
    select property_value_id,property_rationale into acProperty,acRationale from countermeasure_property where countermeasure_id = cmId and property_id = 3 and environment_id = environmentId;
    select property_value_id,property_rationale into anProperty,anRationale from countermeasure_property where countermeasure_id = cmId and property_id = 4 and environment_id = environmentId;
    select property_value_id,property_rationale into panProperty,panRationale from countermeasure_property where countermeasure_id = cmId and property_id = 5 and environment_id = environmentId;
    select property_value_id,property_rationale into unlProperty,unlRationale from countermeasure_property where countermeasure_id = cmId and property_id = 6 and environment_id = environmentId;
    select property_value_id,property_rationale into unoProperty,unoRationale from countermeasure_property where countermeasure_id = cmId and property_id = 7 and environment_id = environmentId;
    select ifnull(cProperty,0),ifnull(iProperty,0),ifnull(avProperty,0),ifnull(acProperty,0),ifnull(anProperty,0),ifnull(panProperty,0),ifnull(unlProperty,0),ifnull(unoProperty,0),ifnull(cRationale,'None'),ifnull(iRationale,'None'),ifnull(avRationale,'None'),ifnull(acRationale,'None'),ifnull(anRationale,'None'),ifnull(panRationale,'None'),ifnull(unlRationale,'None'),ifnull(unoRationale,'None');
  end if;
end;
//


create procedure suppressedCountermeasureProperties(in cmId int,in environmentId int)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare workingCRationale varchar(4000);
  declare workingIRationale varchar(4000);
  declare workingAvRationale varchar(4000);
  declare workingAcRationale varchar(4000);
  declare workingAnRationale varchar(4000);
  declare workingPanRationale varchar(4000);
  declare workingUnlRationale varchar(4000);
  declare workingUnoRationale varchar(4000);
  declare done int default 0;
  declare currentEnvironmentId int;
  declare propertiesCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  drop table if exists temp_countermeasureproperties;
  create temporary table temp_countermeasureproperties (c_property int,i_property int,av_property int, ac_property int, an_property int, pan_property int, unl_property int, uno_property int, c_rat varchar(4000), i_rat varchar(4000), av_rat varchar(4000), ac_rat varchar(4000), an_rat varchar(4000), pan_rat varchar(4000), unl_rat varchar(4000), uno_rat varchar(4000));

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;

    open propertiesCursor;
    properties_loop: loop
      fetch propertiesCursor into currentEnvironmentId;
      if done = 1
      then
        leave properties_loop;
      end if;
      select property_value_id,property_rationale into cProperty,cRationale from countermeasure_property where countermeasure_id = cmId and property_id = 0 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into iProperty,iRationale from countermeasure_property where countermeasure_id = cmId and property_id = 1 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into avProperty,avRationale from countermeasure_property where countermeasure_id = cmId and property_id = 2 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into acProperty,acRationale from countermeasure_property where countermeasure_id = cmId and property_id = 3 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into anProperty,anRationale from countermeasure_property where countermeasure_id = cmId and property_id = 4 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into panProperty,panRationale from countermeasure_property where countermeasure_id = cmId and property_id = 5 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unlProperty,unlRationale from countermeasure_property where countermeasure_id = cmId and property_id = 6 and environment_id = currentEnvironmentId;
      select property_value_id,property_rationale into unoProperty,unoRationale from countermeasure_property where countermeasure_id = cmId and property_id = 7 and environment_id = currentEnvironmentId;
      if duplicatePolicy = 'Maximise'
      then
        if cProperty > workingCProperty then 
          set workingCProperty = cProperty; 
          set workingCRationale = cRationale; 
        end if;
        if iProperty > workingIProperty then 
          set workingIProperty = iProperty; 
          set workingIRationale = iRationale; 
        end if;
        if avProperty > workingAvProperty then 
          set workingAvProperty = avProperty; 
          set workingAvRationale = avRationale; 
        end if;
        if acProperty > workingAcProperty then 
          set workingAcProperty = acProperty; 
          set workingAcRationale = acRationale; 
        end if;
        if anProperty > workingAnProperty then 
          set workingAnProperty = anProperty; 
          set workingAnRationale = anRationale; 
        end if;
        if panProperty > workingPanProperty then 
          set workingPanProperty = panProperty; 
          set workingPanRationale = panRationale; 
        end if;
        if unlProperty > workingUnlProperty then 
          set workingUnlProperty = unlProperty; 
          set workingUnlRationale = unlRationale; 
        end if;
        if unoProperty > workingUnoProperty then 
          set workingUnoProperty = unoProperty; 
          set workingUnoRationale = unoRationale; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingCProperty = cProperty;
          set workingIProperty = iProperty;
          set workingAvProperty = avProperty;
          set workingAcProperty = acProperty;
          set workingAnProperty = anProperty;
          set workingPanProperty = panProperty;
          set workingUnlProperty = unlProperty;
          set workingUnoProperty = unoProperty;
          set workingCRationale = cRationale; 
          set workingIRationale = iRationale; 
          set workingAvRationale = avRationale; 
          set workingAcRationale = acRationale; 
          set workingAnRationale = anRationale; 
          set workingPanRationale = panRationale; 
          set workingUnlRationale = unlRationale; 
          set workingUnoRationale = unoRationale; 
        end if;
      end if;
      set done = 0;
    end loop properties_loop;
    close propertiesCursor;
    insert into temp_countermeasureproperties values(workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty,workingCRationale,workingIRationale,workingAvRationale,workingAcRationale,workingAnRationale,workingPanRationale,workingUnlRationale,workingUnoRationale);
  else
    select property_value_id,property_rationale into cProperty,cRationale from countermeasure_property where countermeasure_id = cmId and property_id = 0 and environment_id = environmentId;
    select property_value_id,property_rationale into iProperty,iRationale from countermeasure_property where countermeasure_id = cmId and property_id = 1 and environment_id = environmentId;
    select property_value_id,property_rationale into avProperty,avRationale from countermeasure_property where countermeasure_id = cmId and property_id = 2 and environment_id = environmentId;
    select property_value_id,property_rationale into acProperty,acRationale from countermeasure_property where countermeasure_id = cmId and property_id = 3 and environment_id = environmentId;
    select property_value_id,property_rationale into anProperty,anRationale from countermeasure_property where countermeasure_id = cmId and property_id = 4 and environment_id = environmentId;
    select property_value_id,property_rationale into panProperty,panRationale from countermeasure_property where countermeasure_id = cmId and property_id = 5 and environment_id = environmentId;
    select property_value_id,property_rationale into unlProperty,unlRationale from countermeasure_property where countermeasure_id = cmId and property_id = 6 and environment_id = environmentId;
    select property_value_id,property_rationale into unoProperty,unoRationale from countermeasure_property where countermeasure_id = cmId and property_id = 7 and environment_id = environmentId;
    insert into temp_countermeasureproperties values(cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty,cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale);
  end if;
end;
//





create procedure addAttacker(in attackerId int,in attackerName text, in attackerDesc text, in imageLoc text)
begin
  insert into attacker(id,name,description,image) values (attackerId,attackerName,attackerDesc,imageLoc);
end
//

create procedure updateAttacker(in attackerId int,in attackerName text, in attackerDesc text, in imageLoc text)
begin
  update attacker set name = attackerName, description = attackerDesc, image = imageLoc where id = attackerId;
end
//

create procedure deleteAttackerComponents(in attackerId int)
begin
  delete from environment_attacker where attacker_id = attackerId;
  delete from attacker_role where attacker_id = attackerId;
  delete from attacker_motivation where attacker_id = attackerId;
  delete from attacker_capability where attacker_id = attackerId;
end
//

create procedure delete_attacker(in attackerId int)
begin
  call deleteAttackerComponents(attackerId);
  delete from threat_attacker where attacker_id = attackerId;
  delete from attacker_tag where attacker_id = attackerId;
  delete from attacker_reference where attacker_id = attackerId;
  delete from attacker where id = attackerId;
end
//

create procedure delete_role(in roleId int)
begin
  declare targetId int;
  declare sourceId int;
  delete from countermeasure_role where role_id = roleId;
  delete from persona_role where role_id = roleId;
  delete from attacker_role where role_id = roleId;
  delete from requirementrole_goalassociation where subgoal_id = roleId;
  delete from responserole_goalassociation where subgoal_id = roleId;
  delete from goalrole_goalassociation where subgoal_id = roleId;
  delete from obstaclerole_goalassociation where subgoal_id = roleId;

  delete from rolegoalrole_dependency where depender_id = roleId;
  delete from rolegoalrole_dependency where dependee_id = roleId;
  delete from roletaskrole_dependency where depender_id = roleId;
  delete from roletaskrole_dependency where dependee_id = roleId;
  delete from roleassetrole_dependency where depender_id = roleId;
  delete from roleassetrole_dependency where dependee_id = roleId;
  delete from role_reference where role_id = roleId;
  delete from role where id = roleId;
end
//


create procedure addAttackerMotive(in attackerId int,in environmentName text, in motiveName text)
begin
  declare motiveId int;
  declare environmentId int;
  select id into motiveId from motivation where name = motiveName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into attacker_motivation(attacker_id,motivation_id,environment_id) values (attackerId,motiveId,environmentId);
end
//

create procedure add_attacker_role(in attackerId int,in environmentName text, in roleName text)
begin
  declare roleId int;
  declare environmentId int;
  select id into roleId from role where name = roleName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into attacker_role(attacker_id,role_id,environment_id) values (attackerId,roleId,environmentId);
end
//

create procedure add_persona_role(in personaId int,in environmentName text, in roleName text)
begin
  declare roleId int;
  declare environmentId int;
  select id into roleId from role where name = roleName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into persona_role(persona_id,role_id,environment_id) values (personaId,roleId,environmentId);
end
//

create procedure addAttackerCapability(in attackerId int,in environmentName text, in capabilityName text,in capabilityValue text)
begin
  declare capabilityId int;
  declare capabilityValueId int;
  declare environmentId int;
  select id into capabilityId from capability where name = capabilityName limit 1;
  select id into capabilityValueId from capability_value where name = capabilityValue limit 1;
  select id into environmentId from environment where name = environmentName;
  insert into attacker_capability(attacker_id,capability_id,capability_value_id,environment_id) values (attackerId,capabilityId,capabilityValueId,environmentId);
end
//


create procedure deleteThreatComponents(in threatId int)
begin
    delete from environment_threat where threat_id = threatId;
    delete from threat_likelihood where threat_id = threatId;
    delete from threat_property where threat_id = threatId;
    delete from threat_attacker where threat_id = threatId;
    delete from asset_threat where threat_id = threatId;
    delete from threat_asset_countermeasure_effect where threat_id = threatId;
end
//

create procedure delete_threat(in threatId int)
begin
  call deleteThreatComponents(threatId);
  delete from component_threat_target where threat_id = threatId;
  delete from countermeasure_threat_target where threat_id = threatId;
  delete from threat_tag where threat_id = threatId;
  delete from threat_reference where threat_id = threatId;
  delete from threat where id = threatId;
end
//

create procedure addThreat(in threatId int,in threatName text, in threatType text, in threatMethod text)
begin
  declare threatTypeId int;
  select id into threatTypeId from threat_type where name = threatType;
  insert into threat(id,name,threat_type_id,method) values (threatId,threatName,threatTypeId,threatMethod);
end
//

create procedure addResponse(in responseId int,in responseName text, in responseTypeName text, in riskName text)
begin
  declare riskId int;
  declare responseTypeId int;
  select id into responseTypeId from goal_category_type where name = responseTypeName;
  select id into riskId from risk where name = riskName limit 1;
  insert into response(id,name,goal_category_type_id,risk_id) values (responseId,responseName,responseTypeId,riskId);
end
//

create procedure addResponseCost(in responseId int,in costName text, in environmentName text)
begin
  declare costId int;
  declare environmentId int;
  select id into costId from cost where name = costName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into response_cost(response_id,environment_id,cost_id) values (responseId,environmentId,costId);
end
//

create procedure addResponseDescription(in responseId int,in descriptionText text, in environmentName text)
begin
  declare costId int;
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into response_description(response_id,environment_id,description) values (responseId,environmentId,descriptionText);
end
//

create procedure updateResponse(in responseId int,in responseName text, in responseTypeName text, in riskName text)
begin
  declare riskId int;
  declare responseTypeId int;
  select id into responseTypeId from goal_category_type where name = responseTypeName limit 1;
  select id into riskId from risk where name = riskName limit 1;
  update response set name = responseName, goal_category_type_id = responseTypeId, risk_id = riskId where id = responseId;
end
//

create procedure addAssetThreat(in threatId int,in environmentName text, in assetName text)
begin
  declare assetId int;
  declare environmentId int;
  select id into assetId from asset where name = assetName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into asset_threat(asset_id,threat_id,environment_id) values (assetId,threatId,environmentId);
end
//

create procedure addAssetVulnerability(in vulId int,in environmentName text, in assetName text)
begin
  declare assetId int;
  declare environmentId int;
  select id into assetId from asset where name = assetName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into asset_vulnerability(asset_id,vulnerability_id,environment_id) values (assetId,vulId,environmentId);
end
//

create procedure addThreatAttacker(in threatId int,in environmentName text, in attackerName text)
begin
  declare attackerId int;
  declare environmentId int;
  select id into attackerId from attacker where name = attackerName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into threat_attacker(threat_id,attacker_id,environment_id) values (threatId,attackerId,environmentId);
end
//

create procedure addThreatLikelihood(in threatId int,in environmentName text, in likelihoodName text)
begin
  declare likelihoodId int;
  declare environmentId int;
  select id into likelihoodId from likelihood where name = likelihoodName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into threat_likelihood(threat_id,environment_id,likelihood_id) values (threatId,environmentId,likelihoodId);
end
//

create procedure addVulnerabilitySeverity(in vulId int,in environmentName text, in severityName text)
begin
  declare severityId int;
  declare environmentId int;
  select id into severityId from severity where name = severityName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into vulnerability_severity(vulnerability_id,environment_id,severity_id) values (vulId,environmentId,severityId);
end
//

create procedure add_threat_properties(in threatId int, in environmentName text, in cProperty int, in iProperty int, in avProperty int, in acProperty int, in anProperty int, in panProperty int, in unlProperty int, in unoProperty int, in cRationale text, in iRationale text, in avRationale text, in acRationale text, in anRationale text, in panRationale text, in unlRationale text, in unoRationale text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName;
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,0,cProperty,cRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,1,iProperty,iRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,2,avProperty,avRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,3,acProperty,acRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,4,anProperty,anRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,5,panProperty,panRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,6,unlProperty,unlRationale);
  insert into threat_property(environment_id,threat_id,property_id,property_value_id,property_rationale) values(environmentId,threatId,7,unoProperty,unoRationale);
end
//

create procedure delete_threat_properties(in threatId int, in environmentId int)
begin
  delete from threat_property where threat_id = threatId and environment_id = environmentId;
end
//

create procedure add_asset_properties(in assetId int, in environmentName text, in cProperty int, in iProperty int, in avProperty int, in acProperty int, in anProperty int, in panProperty int, in unlProperty int, in unoProperty int, in cRationale text, in iRationale text, in avRationale text, in acRationale text, in anRationale text, in panRationale text, in unlRationale text, in unoRationale text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,0,cProperty,cRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,1,iProperty,iRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,2,avProperty,avRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,3,acProperty,acRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,4,anProperty,anRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,5,panProperty,panRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,6,unlProperty,unlRationale);
  insert into asset_property(environment_id,asset_id,property_id,property_value_id,property_rationale) values(environmentId,assetId,7,unoProperty,unoRationale);
end
//

create procedure delete_asset_properties(in assetId int, in environmentId int)
begin
  delete from asset_property where asset_id = assetId and environment_id = environmentId;
end
//

create procedure add_countermeasure_properties(in cmId int, in environmentName text, in cProperty int, in iProperty int, in avProperty int, in acProperty int, in anProperty int, in panProperty int, in unlProperty int, in unoProperty int, in cRationale text, in iRationale text, in avRationale text, in acRationale text, in anRationale text, in panRationale text, in unlRationale text, in unoRationale text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,0,cProperty,cRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,1,iProperty,iRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,2,avProperty,avRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,3,acProperty,acRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,4,anProperty,anRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,5,panProperty,panRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,6,unlProperty,unlRationale);
  insert into countermeasure_property(environment_id,countermeasure_id,property_id,property_value_id,property_rationale) values(environmentId,cmId,7,unoProperty,unoRationale);
end
//

create procedure delete_countermeasure_properties(in cmId int, in environmentId int)
begin
  delete from countermeasure_property where countermeasure_id = cmId and environment_id = environmentId;
end
//

create procedure attacker_environments(in attackerId int)
begin
  select ca.environment_id,c.name from environment_attacker ca,environment c where ca.attacker_id = attackerId and ca.environment_id = c.id;
end
//

create procedure risk_environments(in riskId int)
begin
  declare riskId int;
  select id into riskId from risk where name = riskName limit 1;
  select tc.id,tc.name from environment tc, environment_threat ct, risk r where r.id = riskId and r.threat_id = ct.threat_id and ct.environment_id = tc.id 
  union 
  select vc.id,vc.name from environment vc, environment_vulnerability cv, risk r where r.id = riskId and r.vulnerability_id = cv.vulnerability_id and cv.environment_id = vc.id;
end
//

create procedure response_environments(in responseId int)
begin
  select cr.environment_id,c.name from environment_response cr,environment c where cr.response_id = responseId and cr.environment_id = c.id;
end
//

create procedure persona_environments(in personaId int)
begin
  select cs.environment_id,c.name from environment_persona cs,environment c where cs.persona_id = personaId and cs.environment_id = c.id;
end
//

create procedure threat_environments(in threatId int)
begin
  select ct.environment_id,c.name from environment_threat ct,environment c where ct.threat_id = threatId and ct.environment_id = c.id;
end
//

create procedure asset_environments(in assetId int)
begin
  select ea.environment_id,e.name from environment_asset ea,environment e where ea.asset_id = assetId and ea.environment_id = e.id;
end
//

create procedure vulnerability_environments(in vulId int)
begin
  select cv.environment_id,c.name from environment_vulnerability cv,environment c where cv.vulnerability_id = vulId and cv.environment_id = c.id;
end
//

create procedure add_attacker_environment(in attackerId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_attacker(attacker_id,environment_id) values(attackerId,environmentId);
end
//

create procedure add_risk_environment(in riskId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_risk(risk_id,environment_id) values(riskId,environmentId);
end
//

create procedure add_response_environment(in responseId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_response(response_id,environment_id) values(responseId,environmentId);
end
//

create procedure add_persona_environment(in personaId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_persona(persona_id,environment_id) values(personaId,environmentId);
end
//

create procedure add_threat_environment(in threatId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_threat(threat_id,environment_id) values(threatId,environmentId);
end
//

create procedure add_asset_environment(in assetId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_asset(asset_id,environment_id) values(assetId,environmentId);
end
//

create procedure add_vulnerability_environment(in vulId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_vulnerability(vulnerability_id,environment_id) values(vulId,environmentId);
end
//

create procedure attacker_roles(in attackerId int,in environmentId int)
begin
  select r.name from attacker_role ar, role r where ar.attacker_id = attackerId and ar.environment_id = environmentId and ar.role_id = r.id;
end
//

create procedure persona_roles(in personaId int,in environmentId int)
begin
  select r.name from persona_role sr, role r where sr.persona_id = personaId and sr.environment_id = environmentId and sr.role_id = r.id;
end
//

create procedure attacker_capability(in attackerId int,in environmentId int)
begin
  select c.name,cv.name from attacker_capability ac, capability c, capability_value cv where ac.attacker_id = attackerId and ac.environment_id = environmentId and ac.capability_id = c.id and ac.capability_value_id = cv.id;
end
//

create procedure attacker_motivation(in attackerId int,in environmentId int)
begin
  select m.name from attacker_motivation am, motivation m where am.attacker_id = attackerId and am.environment_id = environmentId and am.motivation_id = m.id;
end
//

create procedure getAttackers(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,description,image from attacker;
  else
    select id,name,description,image from attacker where id = constraintId;
  end if;
end
//

create procedure getAssets(in constraintId int)
begin
  if constraintId = -1
  then
    select a.id,a.name,a.short_code,a.description,a.significance,at.name,a.is_critical,a.critical_rationale from asset a,asset_type at where a.asset_type_id = at.id;
  else
    select a.id,a.name,a.short_code,a.description,a.significance,at.name,a.is_critical,a.critical_rationale from asset a,asset_type at where a.id = constraintId and a.asset_type_id = at.id;
  end if;
end
//

create procedure getThreats(in constraintId int)
begin
  if constraintId = -1
  then
    select t.id, t.name, tt.name, t.method from threat t, threat_type tt where t.threat_type_id = tt.id;
  else
    select t.id, t.name, tt.name, t.method from threat t, threat_type tt where t.id = constraintId and t.threat_type_id = tt.id;
  end if;
end
//

create procedure getVulnerabilities(in constraintId int)
begin
  if constraintId = -1
  then
    select v.id, v.name,v.description,vt.name from vulnerability v,vulnerability_type vt where v.vulnerability_type_id = vt.id;
  else
    select v.id, v.name,v.description,vt.name from vulnerability v,vulnerability_type vt where v.id = constraintId and v.vulnerability_type_id = vt.id;
  end if;
end
//

create procedure getRisks(in constraintId int)
begin
  if constraintId = -1
  then
    select r.id, r.name,t.name,v.name from risk r, threat t, vulnerability v where r.threat_id = t.id and r.vulnerability_id = v.id;
  else
    select r.id, r.name,t.name,v.name from risk r, threat t, vulnerability v where r.id = constraintId and r.threat_id = t.id and r.vulnerability_id = v.id;
  end if;
end
//

create function threat_likelihood(threatId int,environmentId int) 
returns varchar(200)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare workingLikelihoodId int;
  declare currentEnvironmentId int;
  declare currentLikelihoodId int;
  declare likelihoodName varchar(200);
  declare done int default 0;
  declare lhoodCursor cursor for select environment_id,likelihood_id from threat_likelihood where threat_id = threatId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingLikelihoodId = 0;

    open lhoodCursor;
    lhood_loop: loop
      fetch lhoodCursor into currentEnvironmentId, currentLikelihoodId;
      if done = 1
      then
        leave lhood_loop;
      end if;
      select mitigated_likelihood(threatId,currentEnvironmentId) into currentLikelihoodId;
       
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingLikelihoodId = currentLikelihoodId;
        end if;
      else
        if currentLikelihoodId > workingLikelihoodId
        then
          set workingLikelihoodId = currentLikelihoodId;
        end if;
      end if;
    end loop lhood_loop;
    close lhoodCursor;
    select name into likelihoodName from likelihood where id = workingLikelihoodId;
  else
    select mitigated_likelihood(threatId,environmentId) into currentLikelihoodId;
    select l.name into likelihoodName from likelihood l where l.id = currentLikelihoodId;
  end if;
  return likelihoodName;
end
//

create function vulnerability_severity(vulId int,environmentId int)
returns varchar(200)
deterministic
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(200);
  declare overridingEnvironmentId int;
  declare workingSeverityId int;
  declare currentEnvironmentId int;
  declare currentSeverityId int;
  declare severityName varchar(200);
  declare done int default 0;
  declare sevCursor cursor for select environment_id,severity_id from vulnerability_severity where vulnerability_id = vulId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingSeverityId = 0;
    open sevCursor;
    sev_loop: loop
      fetch sevCursor into currentEnvironmentId, currentSeverityId;
      if done = 1
      then
        leave sev_loop;
      end if;
      select mitigated_severity(vulId,currentEnvironmentId) into currentSeverityId;

      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingSeverityId = currentSeverityId;
        end if;
      else
        if currentSeverityId > workingSeverityId
        then
          set workingSeverityId = currentSeverityId;
        end if;
      end if;
    end loop sev_loop;
    close sevCursor;
    select name into severityName from severity where id = workingSeverityId;
  else
    select mitigated_severity(vulId,environmentId) into currentSeverityId;
    select s.name into severityName from severity s where s.id = currentSeverityId;
  end if;
  return (severityName);
end
//

create procedure threat_asset(in threatId int,in environmentId int)
begin
  declare compositeCount int;
  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select distinct a.name from asset a, asset_threat at where at.threat_id = threatId and at.asset_id = a.id and at.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  else
    select a.name from asset a, asset_threat at where at.threat_id = threatId and at.asset_id = a.id and at.environment_id = environmentId;
  end if;
end
//

create procedure threat_attacker(in threatId int,in environmentId int)
begin
  declare compositeCount int;
  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select distinct a.name from threat_attacker ta, attacker a where ta.threat_id = threatId and ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.attacker_id = a.id;
  else
    select a.name from threat_attacker ta, attacker a where ta.threat_id = threatId and ta.environment_id = environmentId and ta.attacker_id = a.id;
  end if;
end
//


create procedure vulnerability_asset(in vulId int,in environmentId int)
begin
  declare compositeCount int;
  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select distinct a.name from asset a, asset_vulnerability av where av.vulnerability_id = vulId and av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.asset_id = a.id;
  else 
    select a.name from asset a, asset_vulnerability av where av.vulnerability_id = vulId and av.environment_id = environmentId and av.asset_id = a.id;
  end if;
end
//

create procedure addAsset(in assetId int,in assetName text, in shortCode text, in assetDesc text, in assetSignificance text,in assetType text,in cFlag int,in cRationale text)
begin
  declare assetTypeId int;
  select id into assetTypeId from asset_type where name = assetType;
  insert into asset(id,name,short_code,description,significance,asset_type_id,is_critical,critical_rationale) values (assetId,assetName,shortCode,assetDesc,assetSignificance,assetTypeId,cFlag,cRationale);
end
//

create procedure addVulnerability(in vulId int,in vulName text, in vulDesc text, in vulType text)
begin
  declare vulTypeId int;
  select id into vulTypeId from vulnerability_type where name = vulType;
  insert into vulnerability(id,name,description,vulnerability_type_id) values (vulId,vulName,vulDesc,vulTypeId);
end
//

create procedure updateVulnerability(in vulId int,in vulName text, in vulDesc text,in vulType text)
begin
  declare vulTypeId int;
  select id into vulTypeId from vulnerability_type where name = vulType;
  update vulnerability set name = vulName,description = vulDesc,vulnerability_type_id = vulTypeId where id = vulId;
end
//

create procedure updateAsset(in assetId int,in assetName text, in shortCode text, in assetDesc text, in assetSig text,in assetType text,in cFlag int,in cRationale text)
begin
  declare assetTypeId int;
  select id into assetTypeId from asset_type where name = assetType;
  update asset set name = assetName, short_code = shortCode, description = assetDesc, significance = assetSig,asset_type_id = assetTypeId,is_critical = cFlag,critical_rationale = cRationale where id = assetId;
end
//

create procedure updateThreat(in threatId int,in threatName text, in threatType text, in threatMethod text)
begin
  declare threatTypeId int;
  select id into threatTypeId from threat_type where name = threatType;
  update threat set name = threatName, threat_type_id = threatTypeId, method = threatMethod where id = threatId;
end
//

create procedure deleteAssetComponents(in assetId int)
begin
  delete from environment_asset where asset_id = assetId;
  delete from asset_property where asset_id = assetId;
  delete from asset_interface where asset_id = assetId;
  delete from classassociation where head_id = assetId;
end
//

create procedure delete_asset(in assetId int)
begin
  call deleteAssetComponents(assetId);
  delete from component_threat_target where asset_id = assetId;
  delete from component_vulnerability_target where asset_id = assetId;
  delete from asset_threat where asset_id = assetId;
  delete from classassociation where head_id = assetId;
  delete from classassociation where tail_id = assetId;
  delete from asset_vulnerability where asset_id = assetId;
  delete from task_asset where asset_id = assetId;
  delete from countermeasure_asset where asset_id = assetId;
  delete from asset_requirement where asset_id = assetId;
  delete from domainproperty_asset where asset_id = assetId;
  delete from obstacle_concern where asset_id = assetId;
  delete from goal_concern where asset_id = assetId;
  delete from roleassetrole_dependency where dependency_id = assetId;
  delete from securitypattern_asset_template_asset where asset_id = assetId;
  delete from component_asset_template_asset where asset_id = assetId;
  delete from vulnerability_asset_countermeasure_effect where asset_id = assetId;
  delete from threat_asset_countermeasure_effect where asset_id = assetId;
  delete from asset_tag where asset_id = assetId;
  delete from asset_reference where asset_id = assetId;
  delete from asset where id = assetId;
end
//

create procedure deleteVulnerabilityComponents(in vulId int)
begin
  delete from environment_vulnerability where vulnerability_id = vulId;
  delete from vulnerability_severity where vulnerability_id = vulId;
  delete from asset_vulnerability where vulnerability_id = vulId;
  delete from vulnerability_asset_countermeasure_effect where vulnerability_id = vulId;
end
//

create procedure delete_vulnerability(in vulId int)
begin
  call deleteVulnerabilityComponents(vulId);
  delete from countermeasure_vulnerability_target where vulnerability_id = vulId;
  delete from component_vulnerability_target where vulnerability_id = vulId;
  delete from requirement_vulnerability where vulnerability_id = vulId;
  delete from obstaclevulnerability_goalassociation where subgoal_id = vulId;
  delete from vulnerability_tag where vulnerability_id = vulId;
  delete from vulnerability_reference where vulnerability_id = vulId;
  delete from vulnerability where id = vulId;
end
//

create procedure attackerNames(in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select a.name from attacker a, environment_attacker ca where ca.environment_id = environmentId and ca.attacker_id = a.id order by 1;
end
//



create procedure likelihoodNames(in environmentName text)
begin
  select name from likelihood;
end
//

create procedure severityNames(in environmentName text)
begin
  select name from severity;
end
//

create procedure riskNames(in environmentName text)
begin
  select name from risk order by 1;
end
//

create procedure environmentNames(in environmentName text)
begin
  select name from environment order by 1;
end
//

create procedure nonCompositeEnvironmentNames()
begin
  select e.name from environment e where e.id not in (select composite_environment_id from composite_environment) order by 1;
end
//

create procedure motivationNames(in environmentName text)
begin
  select name from motivation order by 1;
end
//

create procedure capabilityNames(in environmentName text)
begin
  select name from capability order by 1;
end
//

create procedure goal_category_typeNames(in environmentName text)
begin
  select name from goal_category_type order by 1;
end
//

create procedure compositeEnvironments(in environmentId int)
begin
  select c.name from composite_environment cc, environment c where cc.composite_environment_id = environmentId and cc.environment_id = c.id;
end
//

create procedure compositeEnvironmentIds(in environmentId int)
begin
  select c.id from composite_environment cc, environment c where cc.composite_environment_id = environmentId and cc.environment_id = c.id;
end
//

create procedure addCompositeEnvironment(in compositeId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into composite_environment(composite_environment_id,environment_id) values(compositeId,environmentId);
end
//

create procedure addEnvironment(in environmentId int, in environmentName text, in environmentShortCode text, in environmentDescription text)
begin
  insert into environment(id,name,short_code,description) values(environmentId,environmentName,environmentShortCode,environmentDescription);
  insert into asset_value(id,name,description,environment_id) values(0,'None','To be defined',environmentId);
  insert INTO asset_value(id,name,description,environment_id) values(1,'Low','To be defined',environmentId);
  insert INTO asset_value(id,name,description,environment_id) values(2,'Medium','To be defined',environmentId);
  insert INTO asset_value(id,name,description,environment_id) values(3,'High','To be defined',environmentId);
end
//
create procedure updateEnvironment(in environmentId int, in environmentName text, in environmentShortCode text, in environmentDescription text)
begin
  update environment set name = environmentName, short_code = environmentShortCode, description = environmentDescription where id = environmentId;
end
//

create procedure deleteEnvironmentComponents(in environmentId int)
begin
  delete from composite_environment_property where composite_environment_id = environmentId;
  delete from composite_environment_override where composite_environment_id = environmentId;
  delete from composite_environment where composite_environment_id = environmentId;
  delete from value_tension where environment_id = environmentId;
end
//

create procedure delete_environment(in environmentId int)
begin
  call deleteEnvironmentComponents(environmentId);
  delete from environment_asset where environment_id = environmentId;
  delete from environment_vulnerability where environment_id = environmentId;
  delete from environment_response where environment_id = environmentId;
  delete from composite_environment_override where overriding_environment_id = environmentId;
  delete from composite_environment where environment_id = environmentId;
  delete from environment_reference where environment_id = environmentId;
  delete from asset_value where environment_id = environmentId;
  delete from environment where id = environmentId;
end
//

create procedure duplicateProperty(in environmentId int)
begin
  select dp.name from composite_environment_property ccp, duplicate_property dp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id;
end
//

create procedure overridingEnvironment(in environmentId int)
begin
  select c.name from composite_environment_override cco, environment c where cco.composite_environment_id = environmentId and cco.overriding_environment_id = c.id;
end
//

create procedure addCompositeEnvironmentProperties(in environmentId int, in duplicatePropertyName text, in overridingEnvironmentName text)
begin
  declare duplicatePropertyId int;
  declare overridingEnvironmentId int;
  select id into duplicatePropertyId from duplicate_property where name = duplicatePropertyName limit 1;
  insert into composite_environment_property(composite_environment_id,duplicate_property_id) values (environmentId,duplicatePropertyId);
  if duplicatePropertyName = 'Override'
  then
    select id into overridingEnvironmentId from environment where name = overridingEnvironmentName limit 1;
    insert into composite_environment_override(composite_environment_id,overriding_environment_id) values(environmentId,overridingEnvironmentId);
  end if;
end
//

create procedure riskEnvironments(in threatName text, in vulName text)
begin
  select c.name from threat t,environment_threat ct, environment c where t.name = threatName and t.id = ct.threat_id and ct.environment_id = c.id and c.name in
  (select c.name from vulnerability v,environment_vulnerability cv, environment c where v.name = vulName and v.id = cv.vulnerability_id and cv.environment_id = c.id);
end
//

create procedure riskRating(in threatName text, in vulName text, in environmentName text)
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare currentRating int;
  declare workingRating int default 1;
  declare done int default 0;
  declare currentEnvironmentId int;
  declare environmentId int;
  declare environmentCursor cursor for select environment_id from composite_environment where composite_environment_id = environmentId;  
  declare continue handler for not found set done = 1;

  select id into environmentId from environment where name = environmentName;
  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;

    open environmentCursor;
    environment_loop: loop
      fetch environmentCursor into currentEnvironmentId;
      if done = 1
      then
        leave environment_loop;
      end if;
      select rc.id into currentRating from threat t, threat_likelihood tl, vulnerability v, vulnerability_severity vs, score s, risk_class rc, environment tc, environment vc where t.name = threatName and v.name = vulName and tl.threat_id = t.id and tl.environment_id = tc.id and tc.id = currentEnvironmentId and tl.likelihood_id = s.likelihood_id and vs.vulnerability_id = v.id and vs.environment_id = vc.id and vc.id = currentEnvironmentId and vs.severity_id = s.severity_id and s.class_id = rc.id;

      if duplicatePolicy = 'Maximise'
      then
        if currentRating > workingRating then 
          set workingRating = currentRating; 
        end if;
      else
        if currentEnvironmentId = overridingEnvironmentId 
        then
          set workingRating = currentRating; 
        end if;
      end if;
    end loop environment_loop;
    close environmentCursor;
    select name from risk_class where id = workingRating;
  else
    select rc.name from threat t, threat_likelihood tl, vulnerability v, vulnerability_severity vs, score s, risk_class rc, environment tc, environment vc where t.name = threatName and v.name = vulName and tl.threat_id = t.id and tl.environment_id = tc.id and tc.name = environmentName and tl.likelihood_id = s.likelihood_id and vs.vulnerability_id = v.id and vs.environment_id = vc.id and vc.name = environmentName and vs.severity_id = s.severity_id and s.class_id = rc.id;
  end if;
end
//

create procedure deleteResponseComponents(in responseId int)
begin
  delete from environment_response where response_id = responseId;
  delete from response_cost where response_id = responseId;
  delete from response_description where response_id = responseId;
  delete from responserole_goalassociation where goal_id = responseId;
  delete from response_mitigate where response_id = responseId;
  delete from mitigate_point where response_id = responseId;
  delete from reaction_detection_mechanism where response_id = responseId;
end
//

create procedure delete_response(in responseId int)
begin
  call deleteResponseComponents(responseId);
  delete from response_goal where response_id = responseId;
  delete from response_tag where response_id = responseId;
  delete from response where id = responseId;
end
//

create function responseCost(responseId int,environmentId int)
returns varchar(50)
deterministic
begin
  declare costName varchar(50);
  select c.name into costName from response_cost rc,cost c where rc.response_id = responseId and rc.environment_id = environmentId and rc.cost_id = c.id;
  return costName;
end
//

create function responseDescription(responseId int,environmentId int)
returns varchar(255)
deterministic
begin
  declare descriptionText varchar(255);
  select description into descriptionText from response_description where response_id = responseId and environment_id = environmentId;
  return descriptionText;
end
//

create function mitigationType(responseId int,environmentId int)
returns varchar(50)
deterministic
begin
  declare mitType varchar(50);
  select mt.name into mitType from response_mitigate rm,mitigate_type mt where rm.response_id = responseId and rm.environment_id = environmentId and rm.mitigate_type_id = mt.id;
  return mitType;
end
//

create function mitigatePoint(responseId int,environmentId int)
returns varchar(50)
deterministic
begin
  declare mitPoint varchar(50);
  select mpt.name into mitPoint from mitigate_point mp, mitigate_point_type mpt where mp.response_id = responseId and mp.environment_id = environmentId and mp.mitigate_point_type_id = mpt.id;
  return mitPoint;
end
//

create procedure addCountermeasure(in cmId int,in cmName text, in cmDescription text, in cmType text)
begin
  declare cmTypeId int;
  select id into cmTypeId from asset_type where name = cmType;
  insert into countermeasure(id,name,description,countermeasure_type_id) values (cmId,cmName,cmDescription,cmTypeId);
end
//

create procedure updateCountermeasure(in cmId int,in cmName text, in cmDescription text, in cmType text)
begin
  declare cmTypeId int;
  select id into cmTypeId from asset_type where name = cmType;
  update countermeasure set name = cmName,description = cmDescription,countermeasure_type_id = cmTypeId where id = cmId;
end
//

create procedure countermeasure_environments(in cmId int)
begin
  select cc.environment_id,c.name from environment_countermeasure cc,environment c where cc.countermeasure_id = cmId and cc.environment_id = c.id;
end
//

create procedure add_countermeasure_environment(in cmId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_countermeasure(countermeasure_id,environment_id) values(cmId,environmentId);
end
//

create procedure add_countermeasure_cost(in cmId int, in environmentName text,in costName text)
begin
  declare environmentId int;
  declare costId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into costId from cost where name = costName limit 1;
  insert into countermeasure_cost(countermeasure_id,environment_id,cost_id) values(cmId,environmentId,costId);
end
//

create function countermeasureCost(cmId int,environmentId int)
returns varchar(50)
deterministic
begin
  declare cmCost varchar(50);
  select c.name into cmCost from countermeasure_cost cc, cost c where cc.countermeasure_id = cmId and cc.environment_id = environmentId and cc.cost_id = c.id;
  return cmCost;
end
//

create procedure add_countermeasure_role(in cmId int,in environmentName text, in roleName text)
begin
  declare roleId int;
  declare environmentId int;
  select id into roleId from role where name = roleName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into countermeasure_role(countermeasure_id,environment_id,role_id) values (cmId,environmentId,roleId);
end
//

create procedure countermeasure_roles(in cmId int,in environmentId int)
begin
  select r.name from countermeasure_role cr, role r where cr.countermeasure_id = cmId and cr.environment_id = environmentId and cr.role_id = r.id;
end
//

create procedure add_mitigate_point(in responseId int,in environmentName text, in pointName text)
begin
  declare pointId int;
  declare environmentId int;
  select id into pointId from mitigate_point_type where name = pointName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into mitigate_point(response_id,environment_id,mitigate_point_type_id) values (responseId,environmentId,pointId);
end
//

create procedure add_response_mitigate(in responseId int,in environmentName text, in typeName text)
begin
  declare typeId int;
  declare environmentId int;
  select id into typeId from mitigate_type where name = typeName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into response_mitigate(response_id,environment_id,mitigate_type_id) values (responseId,environmentId,typeId);
end
//

create procedure addCountermeasureCost(in cmId int,in costName text, in environmentName text)
begin
  declare costId int;
  declare environmentId int;
  select id into costId from cost where name = costName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into countermeasure_cost(countermeasure_id,environment_id,cost_id) values (cmId,environmentId,costId);
end
//

create procedure deleteCountermeasureComponents(in cmId int)
begin

  delete from requirementrole_goalassociation
  where goal_id in 
    (select requirement_id from requirement_countermeasure where countermeasure_id = cmId)
  and subgoal_id in
    (select role_id from countermeasure_role where countermeasure_id = cmId);
  delete from environment_countermeasure where countermeasure_id = cmId;
  delete from requirement_countermeasure where countermeasure_id = cmId;
  delete from countermeasure_cost where countermeasure_id = cmId;
  delete from countermeasure_property where countermeasure_id = cmId;
  delete from countermeasure_threat_target where countermeasure_id = cmId;
  delete from countermeasure_vulnerability_target where countermeasure_id = cmId;
  delete from countermeasure_role where countermeasure_id = cmId;
  delete from countermeasure_task_persona where countermeasure_id = cmId;
end
//

create procedure delete_countermeasure(in cmId int)
begin
  call deleteCountermeasureComponents(cmId);
  delete from countermeasure_asset where countermeasure_id = cmId;
  delete from countermeasure_securitypattern where countermeasure_id = cmId;
  delete from countermeasuretask_goalassociation where goal_id = cmId;
  delete from countermeasure_reference where countermeasure_id = cmId;
  delete from requirement_countermeasure where countermeasure_id = cmId;
  delete from countermeasure_tag where countermeasure_id = cmId;
  delete from countermeasure where id = cmId;
end
//

create procedure responseNames(in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select r.name from response r, environment_response cr, goal_category_type rt where cr.environment_id = environmentId and cr.response_id = r.id and r.goal_category_type_id = rt.id and rt.name = 'Mitigate' order by 1;
end
//

create procedure addCountermeasureTarget(in cmId int,in targetName text, in effectivenessName text, in effRationale text, in environmentName text)
begin
  declare environmentId int;
  declare targetId int;
  declare effectivenessId int;
  declare threatCount int;
  select id into effectivenessId from target_effectiveness where name = effectivenessName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into threatCount from threat where name = targetName;
  if threatCount > 0
  then
    select id into targetId from threat where name = targetName;
    insert into countermeasure_threat_target(countermeasure_id,environment_id,threat_id,effectiveness_id,effectiveness_rationale) values (cmId,environmentId,targetId,effectivenessId,effRationale);
  else
    select id into targetId from vulnerability where name = targetName;
    insert into countermeasure_vulnerability_target(countermeasure_id,environment_id,vulnerability_id,effectiveness_id,effectiveness_rationale) values (cmId,environmentId,targetId,effectivenessId,effRationale);
  end if;
end
//

create procedure addCountermeasureTargetResponse(in cmId int,in targetName text, in responseName text, in environmentName text)
begin
  declare environmentId int;
  declare responseId int;
  declare threatCount int;
  declare targetId int;

  select id into environmentId from environment where name = environmentName limit 1;
  select id into responseId from response where name = responseName limit 1;

  select count(*) into threatCount from threat where name = targetName;
  if threatCount > 0
  then
    select id into targetId from threat where name = targetName;
    insert into countermeasure_threat_response_target(countermeasure_id,environment_id,threat_id,response_id) values (cmId,environmentId,targetId,responseId);
  else
    select id into targetId from vulnerability where name = targetName;
    insert into countermeasure_vulnerability_response_target(countermeasure_id,environment_id,vulnerability_id,response_id) values (cmId,environmentId,targetId,responseId); 
  end if;
end
//


create procedure addCountermeasureRole(in cmId int,in roleName text, in environmentName text)
begin
  declare roleId int;
  declare environmentId int;
  select id into roleId from role where name = roleName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into countermeasure_role(countermeasure_id,environment_id,role_id) values (cmId,environmentId,roleId);
end
//

create procedure countermeasureRoles(in cmId int,in environmentId int)
begin
  select r.name from countermeasure_role cr, role r where cr.countermeasure_id = cmId and cr.environment_id = environmentId and cr.role_id = r.id;
end
//

create procedure countermeasureTargets(in cmId int,in environmentId int)
begin
/* add r.name before te.name and ve.name if any probs */
  select t.name,te.name,ctt.effectiveness_rationale from countermeasure_threat_target ctt, countermeasure_threat_response_target ctrt, threat t, target_effectiveness te,response r where ctt.countermeasure_id = cmId and ctt.environment_id = environmentId and ctt.threat_id = t.id and ctt.countermeasure_id = ctrt.countermeasure_id and ctt.environment_id = ctrt.environment_id and ctt.threat_id = ctrt.threat_id and ctrt.response_id = r.id and ctt.effectiveness_id = te.id
  union
  select v.name,ve.name,cvt.effectiveness_rationale from countermeasure_vulnerability_target cvt, countermeasure_vulnerability_response_target cvrt, vulnerability v, target_effectiveness ve,response r where cvt.countermeasure_id = cmId and cvt.environment_id = environmentId and cvt.vulnerability_id = v.id and cvt.countermeasure_id = cvrt.countermeasure_id and cvt.environment_id = cvrt.environment_id and cvt.vulnerability_id = cvrt.vulnerability_id and cvrt.response_id = r.id and cvt.effectiveness_id = ve.id;
end
//

create procedure mitigatingLikelihood(in cmId int,in responseId int, in environmentId int,out workingLikelihoodId int, inout mlComments text) 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare currentEnvironmentId int;
  declare currentLikelihoodId int;
  declare done int default 0;
  declare lhoodCursor cursor for select environment_id, ifnull(sum(ctt.effectiveness_id),0) from countermeasure_threat_target ctt, countermeasure_threat_response_target ctrt where ctt.countermeasure_id = cmId and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.countermeasure_id = ctrt.countermeasure_id and ctt.environment_id = ctrt.environment_id and ctt.threat_id = ctrt.threat_id group by ctt.environment_id;
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingLikelihoodId = 0;
    open lhoodCursor;
    lhood_loop: loop
      fetch lhoodCursor into currentEnvironmentId, currentLikelihoodId;
      if done = 1
      then
        leave lhood_loop;
      end if;
      call countermeasureEffectiveness('threat',currentEnvironmentId,cmId,currentLikelihoodId,mlComments);
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingLikelihoodId = currentLikelihoodId;
        end if;
      else
       if currentLikelihoodId > workingLikelihoodId
       then
          set workingLikelihoodId = currentLikelihoodId;
        end if;
      end if;
      end loop lhood_loop;
      close lhoodCursor;
  else
    select ifnull(sum(ctt.effectiveness_id),0) into workingLikelihoodId from countermeasure_threat_target ctt, countermeasure_threat_response_target ctrt where ctt.countermeasure_id = cmId and ctt.environment_id = environmentId and ctt.countermeasure_id = ctrt.countermeasure_id and ctt.environment_id = ctrt.environment_id and ctt.threat_id = ctrt.threat_id;
    call countermeasureEffectiveness('threat',environmentId,cmId,workingLikelihoodId,mlComments);
  end if;
end
//

create procedure mitigatingSeverity(in cmId int,in responseId int, in environmentId int, out workingSeverityId int, inout msComments text) 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare exploitingVulName varchar(50);
  declare exploitingThrName varchar(50);
  declare overridingEffectivenessId int;
  declare overridingEnvironmentId int;
  declare currentEnvironmentId int;
  declare currentSeverityId int;
  declare done int default 0;
  declare sevCursor cursor for select cvt.environment_id, ifnull(sum(cvt.effectiveness_id),0) from countermeasure_vulnerability_target cvt, countermeasure_vulnerability_response_target cvrt where cvt.countermeasure_id = cmId and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.countermeasure_id = cvrt.countermeasure_id and cvt.environment_id = cvrt.environment_id and cvt.vulnerability_id = cvrt.vulnerability_id group by cvt.environment_id;
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingSeverityId = 0;

    open sevCursor;
    sev_loop: loop
      fetch sevCursor into currentEnvironmentId, currentSeverityId;
      if done = 1
      then
        leave sev_loop;
      end if;
      call countermeasureEffectiveness('vulnerability',currentEnvironmentId,cmId,currentSeverityId,msComments);
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingSeverityId = currentSeverityId;
        end if;
      else
        if currentSeverityId > workingSeverityId
        then
          set workingSeverityId = currentSeverityId;
        end if;
      end if;
    end loop sev_loop;
    close sevCursor;
  else
    select ifnull(sum(cvt.effectiveness_id),0) into workingSeverityId from countermeasure_vulnerability_target cvt, countermeasure_vulnerability_response_target cvrt where cvt.countermeasure_id = cmId and cvt.environment_id = environmentId and cvt.countermeasure_id = cvrt.countermeasure_id and cvt.environment_id = cvrt.environment_id and cvt.vulnerability_id = cvrt.vulnerability_id and cvrt.response_id = responseId;
    call countermeasureEffectiveness('vulnerability',environmentId,cmId,workingSeverityId,msComments);
  end if;
end
//

create procedure responseRoles(in responseId int,in environmentId int)
begin
  select r.name,c.name from responserole_goalassociation rr, role r, cost c where rr.goal_id = responseId and rr.environment_id = environmentId and rr.subgoal_id = r.id and rr.cost_id = c.id;
end
//

create procedure addResponseRole(in responseId int,in roleName text, in costName text, in environmentName text, in respDesc text)
begin
  declare roleId int;
  declare costId int;
  declare environmentId int;
  select id into roleId from role where name = roleName limit 1;
  select id into costId from cost where name = costName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into responserole_goalassociation(goal_id,environment_id,subgoal_id,cost_id,ref_type_id,alternative_id,rationale) values (responseId,environmentId,roleId,costId,3,0,respDesc);
end
//

create procedure personaNames(in environmentName text)
begin
  declare environmentId int;

  if environmentName != ''
  then
    select id into environmentId from environment where name = environmentName limit 1;
    select s.name from persona s, environment_persona cs where cs.environment_id = environmentId and cs.persona_id = s.id order by 1;
  else
    select name from persona order by 1;
  end if;
end
//

create procedure add_task_environment(in scId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_task(task_id,environment_id) values(scId,environmentId);
end
//

create procedure add_usecase_environment(in scId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_usecase(usecase_id,environment_id) values(scId,environmentId);
end
//

create procedure add_misusecase_environment(in mcId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_misusecase(misusecase_id,environment_id) values(mcId,environmentId);
end
//

create procedure task_environments(in scId int)
begin
  select cs.environment_id,c.name from environment_task cs,environment c where cs.task_id = scId and cs.environment_id = c.id;
end
//

create procedure usecase_environments(in scId int)
begin
  select cs.environment_id,c.name from environment_usecase cs,environment c where cs.usecase_id = scId and cs.environment_id = c.id;
end
//

create procedure misusecase_environments(in mcId int)
begin
  select cs.environment_id,c.name from environment_misusecase cs,environment c where cs.misusecase_id = mcId and cs.environment_id = c.id;
end
//

create procedure addPersonaDirect(in stId int,in directFlagName text, in environmentName text)
begin
  declare directId bool;
  declare environmentId int;
  if directFlagName = 'True'
  then
    set directId = 1;
  else
    set directId = 0;
  end if;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into persona_direct(persona_id,environment_id,direct_flag) values (stId,environmentId,directId);
end
//

create procedure addPersonaNarrative(in stId int,in descriptionText text, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into persona_narrative(persona_id,environment_id,narrative) values (stId,environmentId,descriptionText);
end
//

create function personaDirect(stId int,environmentId int)
returns bool
deterministic
begin
  declare directFlag bool;
  select direct_flag into directFlag from persona_direct where persona_id = stId and environment_id = environmentId;
  return directFlag;
end
//

create function personaNarrative(stId int,environmentId int)
returns varchar(4000)
deterministic
begin
  declare descriptionText varchar(4000);
  select narrative into descriptionText from persona_narrative where persona_id = stId and environment_id = environmentId;
  return descriptionText;
end
//

create procedure addPersona(in pId int,in pName text, in pAct text, in pAtt text, in pApt text, in pMot text, in pSki text, in pIntr text, in pCont text, in pImage blob,in assumptionId int, in pType text)
begin
  declare pTypeId int;
  select id into pTypeId from persona_type where name = pType;
  insert into persona(id,name,activities,attitudes,aptitudes,motivations,skills,intrinsic,contextual,image,assumption_id,persona_type_id) values (pId,pName,pAct,pAtt,pApt,pMot,pSki,pIntr,pCont,pImage,assumptionId,pTypeId);
end
//

create procedure updatePersona(in pId int,in pName text, in pAct text, in pAtt text, in pApt text, in pMot text, in pSki text, in pIntr text, in pCont text, in pImage blob,in assumptionId int, in pType text)
begin
  declare pTypeId int;
  select id into pTypeId from persona_type where name = pType;
  update persona set name = pName, activities = pAct, attitudes = pAtt, aptitudes = pApt, motivations = pMot, skills = pSki, intrinsic = pIntr, contextual = pCont, image = pImage,assumption_id = assumptionId, persona_type_id = pTypeId where id = pId;
end
//

create procedure deletePersonaComponents(in pId int)
begin
  delete from environment_persona where persona_id = pId;
  delete from persona_role where persona_id = pId;
  delete from persona_direct where persona_id = pId;
  delete from persona_code where persona_id = pId;
  delete from persona_environment_code where persona_id = pId;
  delete from persona_narrative where persona_id = pId;
end
//

create procedure delete_persona(in pId int)
begin
  declare pcId int;
  declare done int default 0;
  declare pcCursor cursor for select distinct id from persona_characteristic where persona_id = pId;
  declare continue handler for not found set done = 1;

  call deletePersonaComponents(pId);
  set done = 0;
  open pcCursor;
  pc_loop: loop
    fetch pcCursor into pcId;
    if done = 1
    then
      leave pc_loop;
    end if;
    call delete_persona_characteristic(pcId);
  end loop pc_loop;
  close pcCursor;

  
  delete from task_persona where persona_id = pId;
  delete from persona_reference where persona_id = pId;
  delete from persona_tag where persona_id = pId;
  delete from persona where id = pId;
end
//

create procedure taskPersonas(in taskId int, in environmentId int)
begin
  select p.name,duv.name,fv.name,dev.name,gv.name from persona p, task_persona tp, security_property_value duv, security_property_value fv, security_property_value dev, security_property_value gv where tp.task_id = taskId and tp.environment_id = environmentId and tp.persona_id = p.id and tp.duration_id = duv.id and tp.frequency_id = fv.id and tp.demands_id = dev.id and tp.goalsupport_id = gv.id;
end
//

create procedure useCaseRoles(in ucId int)
begin
  select r.name from usecase_role ur, role r where ur.usecase_id = ucId and ur.role_id = r.id;
end
//

create procedure useCaseConditions(in ucId int, in envId int)
begin
  select preconditions,postconditions from usecase_conditions where usecase_id = ucId and environment_id = envId;
end
//

create procedure useCaseSteps(in ucId int, in envId int)
begin

  select us.step_no,us.description,ifnull(uss.synopsis,''),ifnull(uss.actor,''),ifnull(uss.actor_type,'') 
  from usecase_step us 
  left join usecase_step_synopsis_actor uss on (us.usecase_id = uss.usecase_id and us.environment_id = uss.environment_id and us.step_no = uss.step_no) 
  where us.usecase_id = ucId and us.environment_id = envId;
end
//

create procedure addUseCaseStep(in ucId int, in envName text, in stepNo int, in stepDesc text, in stepSyn text, in stepActor text, in stepActorType text)
begin
  declare envId int;
  declare ucName varchar(200);

  select id into envId from environment where name = envName;
  insert into usecase_step(usecase_id,environment_id,step_no,description) values (ucId,envId,stepNo,stepDesc);

  select name into ucName from usecase where id = ucId;
  if stepSyn != ''
  then
    call addStepSynopsis(ucName,envName,stepNo,stepSyn,stepActor,stepActorType);
  end if;
end
//

create procedure useCaseStepExceptions(in ucId int, in envId int, in stepNo int)
begin
  select usge.name, 'goal' dimension, g.name value, oct.name category, usge.description from usecase_step_goal_exception usge, goal g, obstacle_category_type oct where usge.usecase_id = ucId and usge.environment_id = envId and usge.step_no = stepNo and usge.goal_id = g.id and usge.category_type_id = oct.id
  union
  select usge.name, 'requirement' dimension, concat(a.short_code,'-',r.label) value, oct.name category, usge.description from usecase_step_requirement_exception usge, requirement r, asset_requirement ar, asset a, obstacle_category_type oct where usge.usecase_id = ucId and usge.environment_id = envId and usge.step_no = stepNo and usge.goal_id = r.id and r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and usge.category_type_id = oct.id
  union
  select usge.name, 'requirement' dimension, concat(e.short_code,'-',r.label) value, oct.name category, usge.description from usecase_step_requirement_exception usge, requirement r, environment_requirement er, environment e, obstacle_category_type oct where usge.usecase_id = ucId and usge.environment_id = envId and usge.step_no = stepNo and usge.goal_id = r.id and r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and usge.category_type_id = oct.id;
end
//


create procedure addUseCaseStepException(in ucId int, in envName text, in stepNo int, in exName text, in dimType text, in dimName text, in catName text, in excDesc text)
begin
  declare envId int;
  declare goalId int;
  declare catTypeId int;
  declare reqLabel int;
  declare shortCode varchar(50);

  select id into envId from environment where name = envName;
  select id into catTypeId from obstacle_category_type where name = catName;

  if dimType = 'goal'
  then
    select id into goalId from goal where name = dimName;
    insert into usecase_step_goal_exception(usecase_id,environment_id,step_no,name,goal_id,category_type_id,description) values (ucId,envId,stepNo,exName,goalId,catTypeId,excDesc);
  else
    call requirementLabelComponents(dimName,shortCode,reqLabel);
    select o.id into goalId from requirement o, asset_requirement ar, asset a where o.label = reqLabel and o.id = ar.requirement_id and ar.asset_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    if goalId is null
    then
      select o.id into goalId from requirement o, environment_requirement er, environment e where o.label = reqLabel and o.id = er.requirement_id and er.environment_id = e.id and e.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    end if;
    insert into usecase_step_requirement_exception(usecase_id,environment_id,step_no,name,goal_id,category_type_id,description) values (ucId,envId,stepNo,exName,goalId,catTypeId,excDesc);
  end if;
end
//

create procedure addUseCaseRole(in ucId int, in roleName text)
begin
  declare roleId int;
  select id into roleId from role where name = roleName;

  insert into usecase_role(usecase_id,role_id) values (ucId,roleId);
end
//

create procedure addUseCaseConditions(in ucId int, in envName text, in preCond text, in postCond text)
begin
  declare envId int;
  select id into envId from environment where name = envName;
  insert into usecase_conditions(usecase_id,environment_id,preconditions,postconditions) values (ucId,envId,preCond,postCond);
end
//

create procedure addTaskPersona(in taskId int,in personaName text, in durationName text, in frequencyName text, in demandsName text, in goalsupportName text, in environmentName text)
begin
  declare environmentId int;
  declare personaId int;
  declare durationId int;
  declare frequencyId int;
  declare demandsId int;
  declare goalsupportId int;
  select id into personaId from persona where name = personaName limit 1;
  select id into durationId from security_property_value where name = durationName limit 1;
  select id into frequencyId from security_property_value where name = frequencyName limit 1;
  select id into demandsId from security_property_value where name = demandsName limit 1;
  select id into goalsupportId from security_property_value where name = goalsupportName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into task_persona(task_id,environment_id,persona_id,duration_id,frequency_id,demands_id,goalsupport_id) values (taskId,environmentId,personaId,durationId,frequencyId,demandsId,goalsupportId);
end
//

create function taskNarrative(taskId int,environmentId int)
returns varchar(5000)
deterministic
begin
  declare narrativeText varchar(5000);
  select narrative into narrativeText from task_narrative where task_id = taskId and environment_id = environmentId;
  return narrativeText;
end
//

create function taskConsequences(taskId int,environmentId int)
returns varchar(4000)
deterministic
begin
  declare cText varchar(4000);
  select consequences into cText from task_narrative where task_id = taskId and environment_id = environmentId;
  return cText;
end
//

create function taskBenefits(taskId int,environmentId int)
returns varchar(4000)
deterministic
begin
  declare bText varchar(4000);
  select benefits into bText from task_narrative where task_id = taskId and environment_id = environmentId;
  return bText;
end
//

create function misuseCaseNarrative(mcId int,environmentId int)
returns varchar(5000)
deterministic
begin
  declare narrativeText varchar(5000);
  select narrative into narrativeText from misusecase_narrative where misusecase_id = mcId and environment_id = environmentId;
  return narrativeText;
end
//

create procedure addTaskNarrative(in taskId int,in narrativeText text, in cText text, in bText text, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into task_narrative(task_id,environment_id,narrative,consequences,benefits) values (taskId,environmentId,narrativeText,cText,bText);
end
//

create procedure addMisuseCaseNarrative(in mcId int,in narrativeText text, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into misusecase_narrative(misusecase_id,environment_id,narrative) values (mcId,environmentId,narrativeText);
end
//

create function misuseCaseRisk(mcId int)
returns varchar(500)
deterministic
begin
  declare riskName varchar(500);
  select r.name into riskName from risk r, misusecase_risk sr where sr.misusecase_id = mcId and sr.risk_id = r.id;
  return riskName;
end
//

create procedure addTask(in taskId int,in taskName text, in taskShortCode text, in taskObjt text, in assumptionId int,in taskAuthor text)
begin
  insert into task(id,name,short_code,objective,assumption_id,author) values (taskId,taskName,taskShortCode,taskObjt,assumptionId,taskAuthor);
end
//

create procedure addUseCase(in ucId int,in ucName text, in ucAuth text, in ucShortCode text, in ucDesc text)
begin
  insert into usecase(id,name,author,short_code,description) values (ucId,ucName,ucAuth,ucShortCode,ucDesc);
end
//

create procedure updateUseCase(in ucId int,in ucName text, in ucAuth text, in ucShortCode text, in ucDesc text)
begin
  update usecase set name = ucName, short_code = ucShortCode, description = ucDesc, author = ucAuth where id = ucId;
end
//

create procedure addMisuseCase(in mcId int,in mcName text)
begin
  insert into misusecase(id,name) values (mcId,mcName);
end
//

create procedure deleteTaskComponents(in scId int)
begin
  delete from environment_task where task_id = scId;
  delete from task_persona where task_id = scId;
  delete from task_asset where task_id = scId;
  delete from task_code where task_id = scId;
  delete from task_environment_code where task_id = scId;
  delete from task_narrative where task_id = scId;
  delete from task_dependencies where task_id = scId;
  delete from task_concernassociation where task_id = scId;
end
//

create procedure deleteMisuseCaseComponents(in mcId int)
begin
  delete from environment_misusecase where misusecase_id = mcId;
  delete from misusecase_risk where misusecase_id = mcId;
  delete from misusecase_narrative where misusecase_id = mcId;
end
//

create procedure delete_task(in tId int)
begin
  declare tcId int;
  declare done int default 0;
  declare tcCursor cursor for select distinct id from task_characteristic where task_id = tId;
  declare continue handler for not found set done = 1;

  set done = 0;
  open tcCursor;
  tc_loop: loop
    fetch tcCursor into tcId;
    if done = 1
    then
      leave tc_loop;
    end if;
    call delete_task_characteristic(tcId);
  end loop tc_loop;
  close tcCursor;

  call deleteTaskComponents(tId);
  delete from requirement_task where task_id = tId;
  delete from task_asset where task_id = tId;
  delete from task_vulnerability where task_id = tId;
  delete from countermeasuretask_goalassociation where subgoal_id= tId;
  delete from countermeasure_task_persona where task_id = tId;
  delete from goaltask_goalassociation where subgoal_id = tId;
  delete from obstacletask_goalassociation where subgoal_id = tId;
  delete from roletaskrole_dependency where dependency_id = tId;
  delete from task_reference where task_id = tId;
  delete from task_tag where task_id = tId;
  delete from task where id = tId;
end
//

create procedure delete_misusecase(in scId int)
begin
  call deleteMisuseCaseComponents(scId);
  delete from misusecase where id = scId;
end
//

create procedure deleteUseCaseComponents(in ucId int)
begin
  delete from environment_usecase where usecase_id = ucId;
  delete from usecase_role where usecase_id = ucId;
  delete from usecase_conditions where usecase_id = ucId;
  delete from usecase_step where usecase_id = ucId;
  delete from usecase_step_goal_exception where usecase_id = ucId;
  delete from usecase_step_requirement_exception where usecase_id = ucId;
  delete from usecase_step_synopsis where usecase_id = ucId;
  delete from usecase_step_tag where usecase_id = ucId;
end
//

create procedure delete_usecase(in ucId int)
begin
  call deleteUseCaseComponents(ucId);
  delete from goalusecase_goalassociation where subgoal_id = ucId;
  delete from requirement_usecase where usecase_id = ucId;
  delete from obstacleusecase_goalassociation where subgoal_id = ucId;
  delete from usecase_reference where usecase_id = ucId;
  delete from component_usecase where usecase_id = ucId;
  delete from usecase_tag where usecase_id = ucId;
  delete from usecase where id = ucId;
end
//

create procedure updateTask(in taskId int,in taskName text, in taskShortCode text, in taskObjt text, in assumptionId int,in taskAuthor text)
begin
  update task set name = taskName, short_code=taskShortCode, objective = taskObjt, assumption_id = assumptionId,author = taskAuthor where id = taskId;
end
//

create procedure updateMisuseCase(in mcId int,in mcName text)
begin
  update misusecase set name = mcName where id = mcId;
end
//

create procedure taskNames(in environmentName text)
begin
  declare environmentId int;
  declare idCount int;
  if environmentName = ''
  then
    select name from task ;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select count(id) into idCount from task s, environment_task cs where cs.environment_id = environmentId and cs.task_id = s.id order by 1;
    if idCount > 0
    then
      select s.name from task s, environment_task cs where cs.environment_id = environmentId and cs.task_id = s.id order by 1;
    else
      select distinct s.name from task s, environment_task cs where cs.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cs.task_id = s.id order by 1;
    end if;
  end if;
end
//

create procedure usecaseNames(in environmentName text)
begin
  declare environmentId int;
  declare idCount int;
  if environmentName = ''
  then
    select name from usecase order by 1;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select count(id) into idCount from usecase s, environment_usecase cs where cs.environment_id = environmentId and cs.usecase_id = s.id order by 1;
    if idCount > 0
    then
      select s.name from usecase s, environment_usecase cs where cs.environment_id = environmentId and cs.usecase_id = s.id order by 1;
    else
      select distinct s.name from usecase s, environment_usecase cs where cs.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cs.usecase_id = s.id order by 1;
    end if;
  end if;
end
//


create procedure misusecaseNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from misusecase ;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select m.name from misusecase m, environment_misusecase cm where cm.environment_id = environmentId and cm.misusecase_id = m.id order by 1;
  end if;
end
//

create procedure addMisuseCaseRisk(in mcId int,in riskText text)
begin
  declare riskId int;
  select id into riskId from risk where name = riskText limit 1;
  insert into misusecase_risk(misusecase_id,risk_id) values (mcId,riskId);
end
//

create procedure riskEnvironmentNames(in riskName text)
begin
  declare riskId int;
  select id into riskId from risk where name = riskName limit 1;
  select tc.name from environment tc, environment_threat ct, risk r where r.id = riskId and r.threat_id = ct.threat_id and ct.environment_id = tc.id and ct.environment_id in 
    (select cv.environment_id from environment vc, environment_vulnerability cv, risk r where r.id = riskId and r.vulnerability_id = cv.vulnerability_id and cv.environment_id = vc.id);
end
//

create procedure threatVulnerabilityEnvironmentNames(in threatName text,in vulName text)
begin
  declare threatId int;
  declare vulId int;
  select id into threatId from threat where name = threatName limit 1;
  select id into vulId from vulnerability where name = vulName limit 1;

  select tc.name from environment tc, environment_threat ct where ct.threat_id = threatId and ct.environment_id = tc.id and ct.environment_id in 
    (select cv.environment_id from environment vc, environment_vulnerability cv where cv.vulnerability_id = vulId and cv.environment_id = vc.id);
end
//

create function taskDependencies(taskId int,environmentId int)
returns varchar(4000)
deterministic
begin
  declare depsText varchar(4000);
  select dependencies into depsText from task_dependencies where task_id = taskId and environment_id = environmentId;
  return depsText;
end
//

create procedure addTaskDependencies(in taskId int,in depsText text, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into task_dependencies(task_id,environment_id,dependencies) values (taskId,environmentId,depsText);
end
//

create procedure goalNames(in environmentName text)
begin
  declare environmentId int;
  declare idCount int;
  if environmentName = ''
  then
    select name from goal;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select count(id) into idCount from goal g, environment_goal eg where eg.environment_id = environmentId and eg.goal_id = g.id;
    if idCount > 0
    then 
      select g.name from goal g, environment_goal eg where eg.environment_id = environmentId and eg.goal_id = g.id order by 1;
    else
      select distinct g.name from goal g, environment_goal eg where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.goal_id = g.id order by 1;
    end if;
  end if;
end
//

create procedure requirementNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select r.name from requirement r where r.version = (select max(i.version) from requirement i where i.id = r.id) order by 1;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select r.name from requirement r,asset a, asset_requirement ar, environment_asset ea where ea.environment_id = environmentId and ea.asset_id = ar.asset_id and r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id)
    union
    select r.name from requirement r,environment e, environment_requirement er where e.id = environmentId and r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id)
    order by 1;
  end if;
end
//

create procedure roleNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from role;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select name from role order by 1;
  end if;
end
//

create procedure classModelElements(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'asset',a.name from asset a,environment_asset ea where ea.environment_id = environmentId and ea.asset_id = a.id
    union
    select 'persona', p.name from persona p, asset a, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id
    union
    select 'goalconcern',concat('Concerns goal ',g.name) from goal_concern gc, goal g, environment_asset ea where ea.environment_id = environmentId and ea.environment_id = gc.environment_id and ea.asset_id = gc.asset_id and gc.goal_id = g.id and gc.asset_id = ea.asset_id
    union
    select 'obstacleconcern',concat('Concerns obstacle ',o.name) from obstacle_concern oc, obstacle o, environment_asset ea where ea.environment_id = environmentId and ea.environment_id = oc.environment_id and oc.obstacle_id = o.id and oc.asset_id = ea.asset_id
    union
    select 'taskconcern',concat('Concerns task ',t.name) from task_asset tc, task t, environment_asset ea where ea.environment_id = environmentId and ea.environment_id = tc.environment_id and tc.task_id = t.id and tc.asset_id = ea.asset_id;
  else
    select 'asset',a.name from asset a,environment_asset ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.asset_id = a.id
    union
    select 'persona',p.name from persona p, asset a, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id
    union
    select 'goalconcern',concat('Concerns goal ',g.name) from goal_concern gc, goal g, environment_asset ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = gc.environment_id and ea.asset_id = gc.asset_id and gc.goal_id = g.id and gc.asset_id = ea.asset_id
    union
    select 'obstacleconcern',concat('Concerns obstacle ',o.name) from obstacle_concern oc, obstacle o, environment_asset ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = oc.environment_id and oc.obstacle_id = o.id and oc.asset_id = ea.asset_id
    union
    select 'taskconcern',concat('Concerns task ',t.name) from task_asset tc, task t, environment_asset ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = tc.environment_id and tc.task_id = t.id and tc.asset_id = ea.asset_id;
  end if;
end
//

create procedure concernlessClassModelElements(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'asset',a.name from asset a,environment_asset ea where ea.environment_id = environmentId and ea.asset_id = a.id
    union
    select 'persona', p.name from persona p, asset a, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id;
  else
    select 'asset',a.name from asset a,environment_asset ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.asset_id = a.id
    union
    select 'persona',p.name from persona p, asset a, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id;
  end if;
end
//


create procedure goalModelElements(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'goal',g.name from goal g, environment_goal eg where eg.environment_id = environmentId and eg.goal_id = g.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, asset_requirement ar, environment_asset ea, asset a, goalrequirement_goalassociation ga where ea.environment_id = environmentId and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and ea.asset_id = a.id and ga.subgoal_id = r.id and ga.environment_id = ea.environment_id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement r, environment_requirement er, environment e, goalrequirement_goalassociation ga where er.environment_id = environmentId and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id and ga.subgoal_id = r.id and ga.environment_id = er.environment_id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, asset_requirement ar, environment_asset ea, asset a, requirement_usecase ru, environment_usecase eu where ea.environment_id = environmentId and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and ea.asset_id = a.id and ru.requirement_id = r.id and ru.usecase_id = eu.usecase_id and eu.environment_id = ea.environment_id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement r, environment_requirement er, environment e, requirement_usecase ru, environment_usecase eu where er.environment_id = environmentId and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id and ru.requirement_id = r.id and ru.usecase_id = eu.usecase_id and eu.environment_id = er.environment_id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, asset_requirement ar, environment_asset ea, asset a, requirement_task rt, environment_task et where ea.environment_id = environmentId and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and ea.asset_id = a.id and rt.requirement_id = r.id and rt.task_id = et.task_id and et.environment_id = ea.environment_id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement r, environment_requirement er, environment e, requirement_task rt, environment_task et where er.environment_id = environmentId and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id and rt.requirement_id = r.id and rt.task_id = et.task_id and et.environment_id = er.environment_id
    union
    select 'usecase',u.name from usecase u, requirement_usecase ru, asset_requirement ar, environment_asset ea, environment_usecase eu  where eu.environment_id = environmentId and eu.usecase_id = ru.usecase_id and ru.usecase_id = u.id and ru.requirement_id = ar.requirement_id and ar.asset_id = ea.asset_id and ea.environment_id = eu.environment_id
    union
    select 'usecase',u.name from usecase u, requirement_usecase ru, environment_requirement er, environment e, environment_usecase eu  where eu.environment_id = environmentId and eu.usecase_id = ru.usecase_id and ru.usecase_id = u.id and ru.requirement_id = er.requirement_id and er.environment_id = e.id and er.environment_id = eu.environment_id
    union
    select 'task',t.name from task t, requirement_task rt, asset_requirement ar, environment_asset ea, environment_task et  where et.environment_id = environmentId and et.task_id = rt.task_id and rt.task_id = t.id and rt.requirement_id = ar.requirement_id and ar.asset_id = ea.asset_id and ea.environment_id = et.environment_id
    union
    select 'task',t.name from task t, requirement_task rt, environment_requirement er, environment e, environment_task et  where et.environment_id = environmentId and et.task_id = rt.task_id and rt.task_id = t.id and rt.requirement_id = er.requirement_id and er.environment_id = e.id and er.environment_id = et.environment_id
    union
    select 'role',r.name from role r, goalrole_goalassociation gr where gr.environment_id = environmentId and gr.subgoal_id = r.id
    union
    select 'role',r.name from role r, obstaclerole_goalassociation gr where gr.environment_id = environmentId and gr.subgoal_id = r.id
    union
    select 'role',r.name from responserole_goalassociation rr, role r where rr.environment_id = environmentId and rr.subgoal_id = r.id
    union
    select 'role',r.name from goalrequirement_goalassociation gr, requirement_role rr, role r where gr.environment_id = environmentId and gr.subgoal_id = rr.requirement_id and rr.role_id = r.id
    union
    select 'response',r.name from responserole_goalassociation rr, response r where rr.environment_id = environmentId and rr.goal_id = r.id
    union
    select 'countermeasure',c.name from requirement_countermeasure rc, countermeasure c where rc.environment_id = environmentId and rc.countermeasure_id = c.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirement_countermeasure rc, requirement r, asset_requirement rmr, asset rm where rc.environment_id = environmentId and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id 
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirement_countermeasure rc, requirement r, environment_requirement rmr, environment rm where rc.environment_id = environmentId and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id 
    union
    select 'task', t.name from environment e, countermeasure_task_persona ctp, task t, countermeasure c where ctp.environment_id = e.id and ctp.task_id = t.id and ctp.countermeasure_id = c.id and ctp.environment_id = environmentId and (ctp.duration_id > 0 or ctp.frequency_id > 0 or ctp.demands_id > 0 or ctp.goalsupport_id > 0)
    union
    select 'task',t.name from countermeasuretask_goalassociation ct, task t where ct.environment_id = environmentId and ct.subgoal_id = t.id
    union
    select 'task',t.name from requirement_task rt, goalrequirement_goalassociation gr, task t where gr.environment_id = environmentId and gr.subgoal_id = rt.requirement_id and rt.task_id = t.id
    union
    select 'task',t.name from goaltask_goalassociation gt, task t where gt.environment_id = environmentId and gt.subgoal_id = t.id
    union
    select 'task',t.name from obstacletask_goalassociation gt, task t where gt.environment_id = environmentId and gt.subgoal_id = t.id
    union
    select 'usecase',t.name from goalusecase_goalassociation gt, usecase t where gt.environment_id = environmentId and gt.subgoal_id = t.id
    union
    select 'usecase',t.name from obstacleusecase_goalassociation gt, usecase t where gt.environment_id = environmentId and gt.subgoal_id = t.id
    union
    select 'usecase',u.name from usecase u, requirement_usecase ru, goalrequirement_goalassociation ga, environment_usecase eu where ga.subgoal_id = ru.requirement_id and ga.environment_id = environmentId and ru.usecase_id = u.id and ru.usecase_id = eu.usecase_id and eu.environment_id = ga.environment_id
    union
    select 'task',t.name from environment_task et, requirement_task rt, asset_requirement ar, asset a, requirement r, task t where et.environment_id = environmentId and et.task_id = rt.task_id and rt.task_id = t.id and rt.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'domainproperty',dp.name from goaldomainproperty_goalassociation gd, domainproperty dp where gd.environment_id = environmentId and gd.subgoal_id = dp.id
    union
    select 'obstacle',o.name from goalobstacle_goalassociation go, obstacle o where go.environment_id = environmentId and go.subgoal_id = o.id
    union
    select 'obstacle',o.name from obstacletask_goalassociation ot, obstacle o where ot.environment_id = environmentId and ot.goal_id = o.id
    union
    select 'obstacle',o.name from obstacleusecase_goalassociation ot, obstacle o where ot.environment_id = environmentId and ot.goal_id = o.id
    union
    select 'obstacle',o.name from domainpropertyobstacle_goalassociation dpo, obstacle o where dpo.environment_id = environmentId and dpo.subgoal_id = o.id
    union
    select 'goal',g.name from goal g, obstaclegoal_goalassociation og where og.environment_id = environmentId and og.subgoal_id = g.id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclethreat_goalassociation ot where eg.environment_id = environmentId and eg.environment_id = ot.environment_id and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.threat_id = ot.subgoal_id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclevulnerability_goalassociation ov where eg.environment_id = environmentId and eg.environment_id = ov.environment_id and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.vulnerability_id = ov.subgoal_id
    union
    select 'goal',g.name from goalobstacle_goalassociation go, goal g, environment_goal eg where go.environment_id = environmentId and go.goal_id = g.id and go.environment_id = eg.environment_id and go.goal_id = eg.goal_id
    union
    select 'obstacle',o.name from obstacle o, environment_obstacle eo where eo.environment_id = environmentId and eo.obstacle_id = o.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirementobstacle_goalassociation ro, requirement r, asset_requirement rmr, asset rm, environment_obstacle eo where ro.environment_id = environmentId and ro.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id and ro.subgoal_id = eo.obstacle_id and eo.environment_id = ro.environment_id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from obstaclerequirement_goalassociation obr, requirement r, asset_requirement rmr, asset rm, environment_obstacle eo where obr.environment_id = environmentId and obr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id and obr.goal_id = eo.obstacle_id  and eo.environment_id = obr.environment_id
    union
    select 'obstacle',o.name from obstacle o, obstacledomainproperty_goalassociation od where od.environment_id = environmentId and od.goal_id = o.id
    union
    select 'domainproperty',dp.name from domainproperty dp, obstacledomainproperty_goalassociation od where od.environment_id = environmentId and od.subgoal_id = dp.id;
/*    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement_role rr, requirement r,asset_requirement ar, asset a where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement_role rr, requirement r,environment_requirement er, environment e where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id; */
  else
    select 'goal',g.name from goal g, environment_goal eg where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.goal_id = g.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, asset_requirement ar, environment_asset ea, asset a where ea.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and ea.asset_id = a.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, environment_requirement ar, environment a where ar.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.environment_id = a.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, asset_requirement ar, environment_asset ea, asset a, requirement_usecase ru, environment_usecase eu where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and ea.asset_id = a.id and ru.requirement_id = r.id and ru.usecase_id = eu.usecase_id and eu.environment_id = ea.environment_id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement r, environment_requirement er, environment e, requirement_usecase ru, environment_usecase eu where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id and ru.requirement_id = r.id and ru.usecase_id = eu.usecase_id and eu.environment_id = er.environment_id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement r, asset_requirement ar, environment_asset ea, asset a, requirement_task rt, environment_task et where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and ea.asset_id = a.id and rt.requirement_id = r.id and rt.task_id = et.task_id and et.environment_id = ea.environment_id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement r, environment_requirement er, environment e, requirement_task rt, environment_task et where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id and rt.requirement_id = r.id and rt.task_id = et.task_id and et.environment_id = er.environment_id
    union
    select 'usecase',u.name from usecase u, requirement_usecase ru, asset_requirement ar, environment_asset ea, environment_usecase eu  where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.usecase_id = ru.usecase_id and ru.usecase_id = u.id and ru.requirement_id = ar.requirement_id and ar.asset_id = ea.asset_id and ea.environment_id = eu.environment_id
    union
    select 'usecase',u.name from usecase u, requirement_usecase ru, environment_requirement er, environment e, environment_usecase eu  where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.usecase_id = ru.usecase_id and ru.usecase_id = u.id and ru.requirement_id = er.requirement_id and er.environment_id = e.id and er.environment_id = eu.environment_id
    union
    select 'task',t.name from task t, requirement_task rt, asset_requirement ar, environment_asset ea, environment_task et  where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = rt.task_id and rt.task_id = t.id and rt.requirement_id = ar.requirement_id and ar.asset_id = ea.asset_id and ea.environment_id = et.environment_id
    union
    select 'task',t.name from task t, requirement_task rt, environment_requirement er, environment e, environment_task et  where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = rt.task_id and rt.task_id = t.id and rt.requirement_id = er.requirement_id and er.environment_id = e.id and er.environment_id = et.environment_id
    union
    select 'role',r.name from role r, goalrole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = r.id
    union
    select 'role',r.name from role r, obstaclerole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = r.id
    union
    select 'role',r.name from responserole_goalassociation rr, role r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.subgoal_id = r.id
    union
    select 'role',r.name from goalrequirement_goalassociation gr, requirement_role rr, role r where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = rr.requirement_id and rr.role_id = r.id
    union
    select 'response',r.name from responserole_goalassociation rr, response r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.goal_id = r.id
    union
    select 'countermeasure',c.name from requirement_countermeasure rc, countermeasure c where rc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rc.countermeasure_id = c.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirement_countermeasure rc, requirement r, asset_requirement rmr, asset rm where rc.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirement_countermeasure rc, requirement r, asset_requirement rmr, asset rm where rc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'task', t.name from environment e, countermeasure_task_persona ctp, task t, countermeasure c where ctp.environment_id = e.id and ctp.task_id = t.id and ctp.countermeasure_id = c.id and ctp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and (ctp.duration_id > 0 or ctp.frequency_id > 0 or ctp.demands_id > 0 or ctp.goalsupport_id > 0)
    union
    select 'task',t.name from countermeasuretask_goalassociation ct, task t where ct.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ct.subgoal_id = t.id
    union
    select 'task',t.name from environment_task et, requirement_task rt, asset_requirement ar, asset a, requirement r, task t where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = rt.task_id and rt.task_id = t.id and rt.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'task',t.name from goaltask_goalassociation gt, task t where gt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gt.subgoal_id = t.id
    union
    select 'task',t.name from obstacletask_goalassociation gt, task t where gt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gt.subgoal_id = t.id
    union
    select 'usecase',t.name from obstacleusecase_goalassociation gt, usecase t where gt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gt.subgoal_id = t.id
    union
    select 'usecase',t.name from goalusecase_goalassociation gt, usecase t where gt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gt.subgoal_id = t.id
    union
    select 'usecase',u.name from usecase u, requirement_usecase ru, goalrequirement_goalassociation ga, environment_usecase eu where ga.subgoal_id = ru.requirement_id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ru.usecase_id = u.id and ru.usecase_id = eu.usecase_id and eu.environment_id = ga.environment_id
    union
    select 'domainproperty',dp.name from goaldomainproperty_goalassociation gd, domainproperty dp where gd.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gd.subgoal_id = dp.id
    union
    select 'obstacle',o.name from goalobstacle_goalassociation go, obstacle o where go.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and go.subgoal_id = o.id
    union
    select 'obstacle',o.name from domainpropertyobstacle_goalassociation dpo, obstacle o where dpo.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and dpo.subgoal_id = o.id
    union
    select 'obstacle',o.name from obstacletask_goalassociation ot, obstacle o where ot.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ot.goal_id = o.id
    union
    select 'obstacle',o.name from obstacleusecase_goalassociation ot, obstacle o where ot.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ot.goal_id = o.id
    union
    select 'goal',g.name from goal g, obstaclegoal_goalassociation og where og.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and og.subgoal_id = g.id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclethreat_goalassociation ot where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = ot.environment_id and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.threat_id = ot.subgoal_id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclevulnerability_goalassociation ov where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = ov.environment_id and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.vulnerability_id = ov.subgoal_id
    union
    select 'goal',g.name from goalobstacle_goalassociation go, goal g, environment_goal eg where go.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and go.goal_id = g.id and go.environment_id = eg.environment_id and go.goal_id = eg.goal_id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirementobstacle_goalassociation ro, requirement r, asset_requirement rmr, asset rm where ro.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ro.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from obstaclerequirement_goalassociation obr, requirement r, asset_requirement rmr, asset rm where obr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and obr.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'obstacle',o.name from obstacle o, environment_obstacle eo where eo.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eo.obstacle_id = o.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement_role rr, requirement r,asset_requirement ar, asset a where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement_role rr, requirement r,environment_requirement er, environment e where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id
    union
    select 'obstacle',o.name from obstacle o, obstacledomainproperty_goalassociation od where od.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and od.goal_id = g.id
    union
    select 'domainproperty',dp.name from domainproperty dp, obstacledomainproperty_goalassociation od where od.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and od.subgoal_id = dp.id;
  end if;
end
//

create procedure responsibilityModelElements(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'goal',g.name from goal g, goalrole_goalassociation gr where gr.environment_id = environmentId and gr.goal_id = g.id
    union
    select 'obstacle',g.name from obstacle g, obstaclerole_goalassociation gr where gr.environment_id = environmentId and gr.goal_id = g.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirementrole_goalassociation rr, requirement r,asset_requirement ar, asset a where rr.environment_id = environmentId and rr.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement_role rr, requirement r,asset_requirement ar, asset a where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement_role rr, requirement r,environment_requirement er, environment e where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id
    union
    select 'role',r.name from role r, requirement_role rr where rr.role_id = r.id
    union
    select 'role',r.name from role r, goalrole_goalassociation gr where gr.environment_id = environmentId and gr.subgoal_id = r.id
    union
    select 'role',r.name from role r, obstaclerole_goalassociation gr where gr.environment_id = environmentId and gr.subgoal_id = r.id
    union
    select 'role',r.name from requirementrole_goalassociation rr, role r where rr.environment_id = environmentId and rr.subgoal_id = r.id
    union
    select 'role',r.name from responserole_goalassociation rr, role r where rr.environment_id = environmentId and rr.subgoal_id = r.id
    union
    select 'role',r.name from task_persona tp, persona_role pr, role r where tp.environment_id = environmentId and tp.environment_id = pr.environment_id and pr.role_id = r.id
    union
    select 'response',r.name from responserole_goalassociation rr, response r where rr.environment_id = environmentId and rr.goal_id = r.id
    union
    select 'task',t.name from task_persona tp, task t where tp.environment_id = environmentId and tp.task_id = t.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id = environmentId and rgr.depender_id = r.id
    union
    select 'goal',g.name from goal g,rolegoalrole_dependency rgr where rgr.environment_id = environmentId and rgr.dependency_id = g.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id = environmentId and rgr.dependee_id = r.id
    union
    select 'role',r.name from role r,roletaskrole_dependency rtr where rtr.environment_id = environmentId and rtr.depender_id = r.id
    union
    select 'task',t.name from task t,roletaskrole_dependency rtr where rtr.environment_id = environmentId and rtr.dependency_id = t.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rtr where rtr.environment_id = environmentId and rtr.dependee_id = r.id
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id = environmentId and rar.depender_id = r.id
    union
    select 'asset',a.name from asset a,roleassetrole_dependency rar where rar.environment_id = environmentId and rar.dependency_id = a.id
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id = environmentId and rar.dependee_id = r.id; 
  else
    select 'goal',g.name from goal g, goalrole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.goal_id = g.id
    union
    select 'obstacle',g.name from obstacle g, obstaclerole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.goal_id = g.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirementrole_goalassociation rr, requirement r,asset_requirement ar, asset a where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'role',r.name from role r, goalrole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = r.id
    union
    select 'role',r.name from role r, obstaclerole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = r.id
    union
    select 'role',r.name from requirementrole_goalassociation rr, role r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.subgoal_id = r.id
    union
    select 'role',r.name from task_persona tp, persona_role pr, role r where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = pr.environment_id and pr.role_id = r.id
    union
    select 'role',r.name from responserole_goalassociation rr, role r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.subgoal_id = r.id
    union
    select 'response',r.name from responserole_goalassociation rr, response r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.goal_id = r.id
    union
    select 'task',t.name from task_persona tp, task t where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = t.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rgr.depender_id = r.id
    union
    select 'goal',g.name from goal g,rolegoalrole_dependency rgr where rgr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rgr.dependency_id = g.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rgr.dependee_id = r.id
    union
    select 'role',r.name from role r,roletaskrole_dependency rtr where rtr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rtr.depender_id = r.id
    union
    select 'task',t.name from task t,roletaskrole_dependency rtr where rtr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rtr.dependency_id = t.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rtr where rtr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rtr.dependee_id = r.id
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rar.depender_id = r.id
    union
    select 'asset',a.name from asset a,roleassetrole_dependency rar where rar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rar.dependency_id = a.id
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rar.dependee_id = r.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement_role rr, requirement r,asset_requirement ar, asset a where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement_role rr, requirement r,environment_requirement er, environment e where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id
    union
    select 'role',r.name from role r, requirement_role rr where rr.role_id = r.id;
  end if;
end
//

create procedure subResponsibilityModelElements(in environmentName text, in roleName text)
begin
  declare environmentId int;
  declare compositeCount int;
  declare roleId int;
  select id into roleId from role where name = roleName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'goal',g.name from goal g, goalrole_goalassociation gr where gr.environment_id = environmentId and gr.goal_id = g.id and gr.subgoal_id = roleId
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirementrole_goalassociation rr, requirement r,asset_requirement ar, asset a where rr.environment_id = environmentId and rr.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and rr.subgoal_id = roleId
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement_role rr, requirement r,asset_requirement ar, asset a where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id and rr.role_id = roleId
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement_role rr, requirement r,environment_requirement er, environment e where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id and rr.role_id = roleId
    union
    select 'role',r.name from role r, requirement_role rr where rr.role_id = r.id and rr.role_id = roleId
    union
    select 'role',r.name from role r, goalrole_goalassociation gr where gr.environment_id = environmentId and gr.subgoal_id = r.id and r.id = roleId
    union
    select 'role',r.name from requirementrole_goalassociation rr, role r where rr.environment_id = environmentId and rr.subgoal_id = r.id and r.id = roleId
    union
    select 'role',r.name from responserole_goalassociation rr, role r where rr.environment_id = environmentId and rr.subgoal_id = r.id and r.id = roleId
    union
    select 'role',r.name from task_persona tp, persona_role pr, role r where tp.environment_id = environmentId and tp.environment_id = pr.environment_id and pr.role_id = r.id and r.id = roleId
    union
    select 'response',r.name from responserole_goalassociation rr, response r where rr.environment_id = environmentId and rr.goal_id = r.id and rr.subgoal_id = roleId
    union
    select 'task',t.name from task_persona tp, task t, persona_role pr where tp.environment_id = environmentId and tp.task_id = t.id and tp.persona_id = pr.persona_id and pr.environment_id = tp.environment_id and pr.role_id = roleId
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id = environmentId and rgr.depender_id = r.id and r.id = roleId
    union
    select 'goal',g.name from goal g,rolegoalrole_dependency rgr where rgr.environment_id = environmentId and rgr.dependency_id = g.id and rgr.depender_id = roleId
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id = environmentId and rgr.dependee_id = r.id and r.id = roleId
    union
    select 'role',r.name from role r,roletaskrole_dependency rtr where rtr.environment_id = environmentId and rtr.depender_id = r.id and r.id = roleId
    union
    select 'task',t.name from task t,roletaskrole_dependency rtr where rtr.environment_id = environmentId and rtr.dependency_id = t.id and rtr.depender_id = roleId
    union
    select 'role',r.name from role r,rolegoalrole_dependency rtr where rtr.environment_id = environmentId and rtr.dependee_id = r.id and r.id = roleId
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id = environmentId and rar.depender_id = r.id and r.id = roleId
    union
    select 'asset',a.name from asset a,roleassetrole_dependency rar where rar.environment_id = environmentId and rar.dependency_id = a.id and rar.depender_id = roleId
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id = environmentId and rar.dependee_id = r.id and r.id = roleId; 
  else
    select 'goal',g.name from goal g, goalrole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.goal_id = g.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirementrole_goalassociation rr, requirement r,asset_requirement ar, asset a where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'role',r.name from role r, goalrole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = r.id
    union
    select 'role',r.name from requirementrole_goalassociation rr, role r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.subgoal_id = r.id
    union
    select 'role',r.name from task_persona tp, persona_role pr, role r where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = pr.environment_id and pr.role_id = r.id
    union
    select 'role',r.name from responserole_goalassociation rr, role r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.subgoal_id = r.id
    union
    select 'response',r.name from responserole_goalassociation rr, response r where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.goal_id = r.id
    union
    select 'task',t.name from task_persona tp, task t where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = t.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rgr.depender_id = r.id
    union
    select 'goal',g.name from goal g,rolegoalrole_dependency rgr where rgr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rgr.dependency_id = g.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rgr where rgr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rgr.dependee_id = r.id
    union
    select 'role',r.name from role r,roletaskrole_dependency rtr where rtr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rtr.depender_id = r.id
    union
    select 'task',t.name from task t,roletaskrole_dependency rtr where rtr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rtr.dependency_id = t.id
    union
    select 'role',r.name from role r,rolegoalrole_dependency rtr where rtr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rtr.dependee_id = r.id
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rar.depender_id = r.id
    union
    select 'asset',a.name from asset a,roleassetrole_dependency rar where rar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rar.dependency_id = a.id
    union
    select 'role',r.name from role r,roleassetrole_dependency rar where rar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rar.dependee_id = r.id
    union
    select 'requirement',concat(a.short_code,'-',r.label) from requirement_role rr, requirement r,asset_requirement ar, asset a where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
    union
    select 'requirement',concat(e.short_code,'-',r.label) from requirement_role rr, requirement r,environment_requirement er, environment e where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = er.requirement_id and er.environment_id = e.id
    union
    select 'role',r.name from role r, requirement_role rr where rr.role_id = r.id;
  end if;
end
//

create procedure taskModelElements(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'task',t.name from task t, task_persona tp where tp.environment_id = environmentId and tp.task_id = t.id
    union
    select 'usecase',t.name from usecase t, environment_usecase eu where eu.environment_id = environmentId and eu.usecase_id = t.id
    union
    select 'asset',a.name from asset a, task_asset ta where ta.environment_id = environmentId and ta.asset_id = a.id
    union
    select 'asset',a.name from asset a, usecase_asset ta where ta.environment_id = environmentId and ta.asset_id = a.id
    union
    select 'asset',a.name from asset a, asset_threat at, risk r, misusecase_risk mr where at.environment_id = environmentId and at.asset_id = a.id and at.threat_id = r.threat_id and r.id = mr.risk_id
    union
    select 'asset',a.name from asset a, asset_vulnerability av, risk r, misusecase_risk mr where av.environment_id = environmentId and av.asset_id = a.id and av.vulnerability_id = r.vulnerability_id and r.id = mr.risk_id
    union
    select 'persona',p.name from persona p, task_persona tp where tp.environment_id = environmentId and tp.persona_id = p.id
    union
    select 'role',p.name from role p, usecase_role tp, environment_usecase eu where eu.environment_id = environmentId and eu.usecase_id = tp.usecase_id and tp.role_id = p.id
    union
    select 'attacker',a.name from attacker a,threat_attacker ta, environment_attacker ea, risk r where ea.environment_id = environmentId and ea.attacker_id = ta.attacker_id and ta.attacker_id = a.id and ta.threat_id = r.threat_id and ta.environment_id = ea.environment_id
    union
    select 'role',ro.name from attacker a,threat_attacker ta, environment_attacker ea, risk r, role ro, attacker_role ar where ea.environment_id = environmentId and ea.attacker_id = ta.attacker_id and ta.attacker_id = a.id and ta.threat_id = r.threat_id and ta.environment_id = ea.environment_id and ea.attacker_id = ar.attacker_id and ea.environment_id = ar.environment_id and ar.role_id = ro.id 
    union
    select 'misusecase',m.name from misusecase m, environment_misusecase em where m.id = em.misusecase_id and em.environment_id = environmentId
    union
    select 'role',r.name from role r, persona_role pr where pr.environment_id = environmentId and pr.role_id = r.id;
  else
    select 'task',t.name from task t, task_persona tp where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = t.id
    union
    select 'usecase',t.name from usecase t, environment_usecase eu where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.usecase_id = t.id
    union
    select 'asset',a.name from asset a, task_asset ta where ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.asset_id = a.id
    union
    select 'asset',a.name from asset a, asset_threat at, risk r, misusecase_risk mr where at.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.asset_id = a.id and at.threat_id = r.threat_id and r.id = mr.risk_id
    union
    select 'asset',a.name from asset a, asset_vulnerability av, risk r, misusecase_risk mr where av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.asset_id = a.id and av.vulnerability_id = r.vulnerability_id and r.id = mr.risk_id
    union
    select 'persona',p.name from persona p, task_persona tp where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.persona_id = p.id
    union
    select 'role',p.name from role p, usecase_role tp, environment_usecase eu where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.usecase_id = tp.usecase_id and tp.role_id = p.id
    union
    select 'attacker',a.name from attacker a,threat_attacker ta, risk r, environment_attacker ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.attacker_id = ta.attacker_id and ta.attacker_id = a.id and ta.threat_id = r.threat_id and ta.environment_id = ea.environment_id
    union
    select 'misusecase',m.name from misusecase m, environment_misusecase em where m.id = em.misusecase_id and em.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select 'role',r.name from role r, persona_role pr where pr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and pr.role_id = r.id
    union
    select 'role',ro.name from attacker a,threat_attacker ta, environment_attacker ea, risk r, role ro, attacker_role ar where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.attacker_id = ta.attacker_id and ta.attacker_id = a.id and ta.threat_id = r.threat_id and ta.environment_id = ea.environment_id and ea.attacker_id = ar.attacker_id and ea.environment_id = ar.environment_id and ar.role_id = ro.id; 
  end if;
end
//

create function requirementLabelId(reqLabel int,shortCode text)
returns int
deterministic
begin
  declare reqId int;
  declare modId int;
  select id into modId from asset where short_code = shortCode;
  if modId is not null
  then
    select o.id into reqId from requirement o, asset_requirement rmr where o.label = reqLabel and o.version = (select max(i.version) from requirement i where i.id = o.id) and o.id = rmr.requirement_id and rmr.asset_id = modId;
  else
    select id into modId from environment where short_code = shortCode;
    select o.id into reqId from requirement o, environment_requirement er where o.label = reqLabel and o.version = (select max(i.version) from requirement i where i.id = o.id) and o.id = er.requirement_id and er.environment_id = modId;
  end if;
  return reqId;
end
//

create function requirementLabel(reqTxt text)
returns int
deterministic
begin
  declare reqLabel int;
  select o.label into reqLabel from requirement o where o.name = reqTxt and o.version = (select max(i.version) from requirement i where i.id = o.id);
  return reqLabel;
end
//

create procedure countermeasureRequirements(in cmId int,in environmentId int)
begin
  select distinct r.name from requirement_countermeasure rc, requirement r where rc.countermeasure_id = cmId and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.environment_id = environmentId;
end
//

create procedure addCountermeasureRequirement(in cmId int,in viewLabel text, in environmentName text)
begin
  declare reqId int;
  declare environmentId int;
  declare shortCode varchar(50);
  declare reqLabel int;

  select id into environmentId from environment where name = environmentName limit 1;
  select o.id into reqId from requirement o where o.name = viewLabel and o.version = (select max(i.version) from requirement i where i.id = o.id);
  insert into requirement_countermeasure(countermeasure_id,environment_id,requirement_id) values (cmId,environmentId,reqId);
end
//

create procedure updateCountermeasureRequirement(in cmId int,in viewLabel text, in environmentName text)
begin
  declare reqId int;
  declare environmentId int;
  declare shortCode varchar(50);
  declare reqLabel int;

  select id into environmentId from environment where name = environmentName limit 1;
  select o.id into reqId from requirement o where o.name = viewLabel and o.version = (select max(i.version) from requirement i where i.id = o.id);
  insert into requirement_countermeasure(countermeasure_id,environment_id,requirement_id) values (cmId,environmentId,reqId);
end
//

create procedure riskGoalTargets(in subGoalId int)
begin
  declare goalId int;
  declare responseId int;
  declare done int default 0;
  declare goalCursor cursor for select distinct goal_id from goalgoal_goalassociation where subgoal_id = subGoalId and ref_type_id in (0,1);
  declare continue handler for not found set done = 1;

  select response_id into responseId from response_goal where goal_id = subGoalId; 
  if responseId is not null
  then
    insert into temp_risk(name) 
    (
      select ris.name from response res, risk ris where res.id = responseId and res.risk_id = ris.id
    );
  end if; 

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId;
    if done = 1
    then
      leave goal_loop;
    end if;
    call riskGoalTargets(goalId);
  end loop goal_loop;
  close goalCursor;
end
//

create procedure mitigatedRisks(in cmId int)
begin
  declare reqId int;
  declare reqGoalId int;
  declare goalId int;
  declare responseId int;
  declare done int default 0;
  declare reqCmCursor cursor for select distinct requirement_id from requirement_countermeasure where countermeasure_id = cmId;
  declare goalCursor cursor for select distinct goal_id from goalgoal_goalassociation where subgoal_id = reqGoalId and ref_type_id in (0,1);
  declare continue handler for not found set done = 1;

  drop table if exists temp_risk;
  create temporary table temp_risk (name VARCHAR(50) NOT NULL);

/*  select distinct requirement_id into reqId from requirement_countermeasure where countermeasure_id = cmId; */

  open reqCmCursor;
  reqCm_loop: loop
    fetch reqCmCursor into reqId;
    if done = 1
    then
      leave reqCm_loop;
    end if;

    select distinct goal_id into reqGoalId from goalrequirement_goalassociation where subgoal_id = reqId;

    select response_id into responseId from response_goal where goal_id = reqGoalId; 
    if responseId is not null
    then
      insert into temp_risk(name) 
      (
        select ris.name from response res, risk ris where res.id = responseId and res.risk_id = ris.id
      );
    end if; 

    open goalCursor;
    goal_loop: loop
      fetch goalCursor into goalId;
      if done = 1
      then
        leave goal_loop;
      end if;
    end loop goal_loop;
    call riskGoalTargets(goalId);
    close goalCursor;
  
  end loop reqCm_loop;
  close reqCmCursor;

  select distinct name from temp_risk;
end
//

create procedure detection_mechanismNames(in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select distinct a.name from detection_mechanism dm, asset a where dm.environment_id = environmentId and dm.asset_id = a.id order by 1;
end
//

create procedure delete_requirement(in reqId int)
begin
  delete from requirement_requirement where from_id = reqId;
  delete from requirement_requirement where to_id = reqId;
  delete from requirement_vulnerability where requirement_id = reqId;
  delete from requirement_task where requirement_id = reqId;
  delete from goalrequirement_goalassociation where subgoal_id = reqId;
  delete from obstaclerequirement_goalassociation where subgoal_id = reqId;
  delete from requirementgoal_goalassociation where goal_id = reqId;
  delete from requirementrequirement_goalassociation where goal_id = reqId;
  delete from requirementrequirement_goalassociation where subgoal_id = reqId;
  delete from requirementrole_goalassociation where goal_id = reqId;
  delete from requirementobstacle_goalassociation where goal_id = reqId;
  delete from requirement_countermeasure where requirement_id = reqId;
  delete from asset_requirement where requirement_id = reqId;
  delete from environment_requirement where requirement_id = reqId;
  delete from persona_characteristic_requirement where reference_id in (select id from requirement_reference where requirement_id = reqId);
  delete from task_characteristic_requirement where reference_id in (select id from requirement_reference where requirement_id = reqId); 
  delete from requirement_reference where requirement_id = reqId;
  delete from requirement_usecase where requirement_id = reqId;
  delete from requirement where id = reqId;
end
//

create procedure detectionMechanisms(in responseId int, in environmentId int)
begin
  select a.name from asset a, reaction_detection_mechanism rdm where rdm.response_id = responseId and rdm.environment_id = environmentId and rdm.asset_id = a.id;
end
//

create procedure assetNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from asset order by 1;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select a.name from asset a, environment_asset ca where ca.environment_id = environmentId and ca.asset_id = a.id order by 1;
  end if;
end
//

create procedure threatNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from threat order by 1;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select t.name from threat t, environment_threat ct where ct.environment_id = environmentId and ct.threat_id = t.id order by 1;
  end if;
end
//

create procedure vulnerabilityNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from vulnerability order by 1;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select v.name from vulnerability v, environment_vulnerability cv where cv.environment_id = environmentId and cv.vulnerability_id = v.id order by 1;
  end if;
end
//

create procedure role_environments(in roleId int)
begin
  select cr.environment_id,c.name from environment_role cr,environment c where cr.role_id = roleId and cr.environment_id = c.id;
end
//

create procedure roleCountermeasures(in roleId int,in environmentId int)
begin
  select cm.name from countermeasure_role cr, countermeasure cm where cr.role_id = roleId and cr.environment_id = environmentId and cr.countermeasure_id = cm.id;
end
//

create procedure roleResponses(in roleId int,in environmentId int)
begin
  select r.name,c.name from responserole_goalassociation rr, response r, cost c where rr.subgoal_id = roleId and rr.environment_id = environmentId and rr.goal_id = r.id and rr.cost_id = c.id;
end
//

create procedure attackerDependents(in attackerId int)
begin
  declare threatId int;
  declare threatName varchar(200);
  declare done int default 0;
  declare threatAttackers int;
  declare threatCursor cursor for select distinct ta.threat_id,t.name from threat_attacker ta, threat t where ta.attacker_id = attackerId and ta.threat_id = t.id;  
  declare continue handler for not found set done = 1;

  open threatCursor;
  threat_loop: loop
    fetch threatCursor into threatId,threatName;
    if done = 1
    then
      leave threat_loop;
    end if;
    select count(distinct attacker_id) into threatAttackers from threat_attacker where threat_id = threatId;
    if (threatAttackers = 1)
    then
      insert into temp_threat values(threatId,threatName);
      call threatDependents(threatId);
    end if;
  end loop threat_loop;
  close threatCursor;
end
//

create procedure threatDependents(in threatId int)
begin
  declare riskId int;
  declare riskName varchar(200);
  declare done int default 0;
  declare riskCursor cursor for select distinct id,name from risk where threat_id = threatId;  
  declare continue handler for not found set done = 1;

  open riskCursor;
  risk_loop: loop
    fetch riskCursor into riskId,riskName;
    if done = 1
    then
      leave risk_loop;
    end if;
    insert into temp_risk values(riskId,riskName);
    call riskDependents(riskId);
  end loop risk_loop;
  close riskCursor;
end
//

create procedure riskDependents(in riskId int)
begin
  declare responseId int;
  declare responseName varchar(50);
  declare done int default 0;
  declare responseCursor cursor for select distinct id,name from response where risk_id = riskId;  
  declare continue handler for not found set done = 1;

  open responseCursor;
  response_loop: loop
    fetch responseCursor into responseId,responseName;
    if done = 1
    then
      leave response_loop;
    end if;
    insert into temp_response values(responseId,responseName);
    call responseDependents(responseId);
  end loop response_loop;
  close responseCursor;
end
//

create procedure responseDependents(in responseId int)
begin
  declare goalId int;
  declare goalName varchar(100);
  declare done int default 0;
  declare goalCursor cursor for select distinct g.id,g.name from response_goal rg, goal g where rg.response_id = responseId and rg.goal_id = g.id;  
  declare continue handler for not found set done = 1;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId,goalName;
    if done = 1
    then
      leave goal_loop;
    end if;
    insert into temp_goal values(goalId,goalName);
    call goalDependents(goalId);
  end loop goal_loop;
  close goalCursor;
end
//

create procedure requirementDependents(in reqId int)
begin
  declare cmId int;
  declare cmName varchar(50);
  declare assetId int;
  declare assetName varchar(50);
  declare vulId int;
  declare vulName varchar(200);
  declare obsId int;
  declare obsName varchar(100);
  declare countermeasureRequirements int;
  declare assetRequirements int;
  declare vulnerabilityRequirements int;
  declare obstacleRequirements int;
  declare done int default 0;
  declare vulCursor cursor for select distinct rv.vulnerability_id,v.name from requirement_vulnerability rv, vulnerability v where rv.requirement_id = reqId and rv.vulnerability_id = v.id;
  declare cmCursor cursor for select distinct rc.countermeasure_id,c.name from requirement_countermeasure rc, countermeasure c where rc.requirement_id = reqId and rc.countermeasure_id = c.id;  
  declare obsCursor cursor for select distinct ro.subgoal_id,o.name from requirementobstacle_goalassociation ro, obstacle o where ro.goal_id = reqId and ro.subgoal_id = o.id;  
  declare continue handler for not found set done = 1;

  set done = 0;
  open vulCursor;
  vulnerability_loop: loop
    fetch vulCursor into vulId,vulName;
    if done = 1
    then
      leave vulnerability_loop;
    end if;
    select count(distinct requirement_id) into vulnerabilityRequirements from requirement_vulnerability where vulnerability_id = vulId;
    if (vulnerabilityRequirements = 1)
    then
      insert into temp_vulnerability values(vulId,vulName);
      call vulnerabilityDependents(vulId);
    end if;
  end loop vulnerability_loop;
  close vulCursor;

  set done = 0;
  open cmCursor;
  cm_loop: loop
    fetch cmCursor into cmId,cmName;
    if done = 1
    then
      leave cm_loop;
    end if;
    select count(distinct requirement_id) into countermeasureRequirements from requirement_countermeasure where countermeasure_id = cmId;
    if (countermeasureRequirements = 1)
    then
      insert into temp_countermeasure values(cmId,cmName);
      call countermeasureDependents(cmId);
    end if;
  end loop cm_loop;
  close cmCursor;

  set done = 0;
  open obsCursor;
  obs_loop: loop
    fetch obsCursor into obsId,obsName;
    if done = 1
    then
      leave obs_loop;
    end if;
    select count(distinct goal_id) into obstacleRequirements from requirementobstacle_goalassociation where subgoal_id = obsId;
    if (obstacleRequirements = 1)
    then
      insert into temp_obstacle values(obsId,obsName);
      call obstacleDependents(obsId);
    end if;
  end loop obs_loop;
  close obsCursor;

end
//

create procedure countermeasureDependents(in cmId int)
begin
  declare assetId int;
  declare assetName varchar(50);
  declare assetCountermeasures int;
  declare taskCountermeasures int;
  declare taskId int;
  declare taskName varchar(50);
  declare done int default 0;
  declare assetCursor cursor for select distinct ca.asset_id,a.name from countermeasure_asset ca, asset a where ca.countermeasure_id = cmId and ca.asset_id = a.id;  
  declare taskCursor cursor for select distinct ct.subgoal_id,t.name from countermeasuretask_goalassociation ct, task t where ct.subgoal_id = cmId and ct.goal_id = t.id;  
  declare templateAssetCursor cursor for select a.id,a.name from countermeasure_securitypattern csp, securitypattern_classassociation sc, securitypattern_asset_template_asset ata, asset a where csp.countermeasure_id =cmId and csp.countermeasure_id and csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.head_id = ata.template_asset_id and ata.asset_id = a.id union select a.id,a.name from countermeasure_securitypattern csp, securitypattern_classassociation sc, securitypattern_asset_template_asset ata, asset a where csp.countermeasure_id = cmId and csp.countermeasure_id and csp.pattern_id = sc.pattern_id and sc.tail_id = ata.template_asset_id and ata.pattern_id = csp.pattern_id and ata.asset_id = a.id;



  declare continue handler for not found set done = 1;

  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId,assetName;
    if done = 1
    then
      leave asset_loop;
    end if;
    select ifnull(count(id),0) into assetCountermeasures from temp_asset where id = assetId;
    if (assetCountermeasures = 0)
    then
      insert into temp_asset values(assetId,assetName);
      call assetDependents(assetId);
    end if;
  end loop asset_loop;
  close assetCursor;

  set done = 0;

  open templateAssetCursor;
  templateAsset_loop: loop
    fetch templateAssetCursor into assetId,assetName;
    if done = 1
    then
      leave templateAsset_loop;
    end if;
    select ifnull(count(id),0) into assetCountermeasures from temp_asset where id = assetId;
    if (assetCountermeasures = 0)
    then
      insert into temp_asset values(assetId,assetName);
      call assetDependents(assetId);
    end if;
  end loop templateAsset_loop;
  close templateAssetCursor;

  set done = 0;

  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId,taskName;
    if done = 1
    then
      leave task_loop;
    end if;
    select count(distinct task_id) into taskCountermeasures from countermeasuretask_goalassociation where subgoal_id = taskId;
    if (taskCountermeasures = 1)
    then
      insert into temp_task values(taskId,taskName);
      call taskDependents(taskId);
    end if;
  end loop task_loop;
  close taskCursor;
end
//

create procedure assetDependents(in assetId int)
begin
  declare reqId int;
  declare reqName varchar(255);
  declare threatId int;
  declare threatName varchar(200);
  declare vulId int;
  declare vulName varchar(200);
  declare taskId int;
  declare taskName varchar(50);
  declare reqAssets int;
  declare threatAssets int;
  declare vulnerabilityAssets int;
  declare taskAssets int;
  declare done int default 0;
  declare reqCursor cursor for select distinct ar.requirement_id,r.name from asset_requirement ar, requirement r where ar.asset_id = assetId and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);  
  declare threatCursor cursor for select distinct at.threat_id,t.name from asset_threat at, threat t where at.asset_id = assetId and at.threat_id = t.id;  
  declare vulCursor cursor for select distinct av.vulnerability_id,v.name from asset_vulnerability av, vulnerability v where av.asset_id = assetId and av.vulnerability_id = v.id;  
  declare taskCursor cursor for select distinct ta.task_id,t.name from task_asset ta, task t where ta.asset_id = assetId and ta.task_id = t.id;  
  declare continue handler for not found set done = 1;

  open reqCursor;
  req_loop: loop
    fetch reqCursor into reqId, reqName;
    if done = 1
    then
      leave req_loop;
    end if;
    select count(distinct asset_id) into reqAssets from asset_requirement where requirement_id = reqId;
    if (reqAssets = 1)
    then
      insert into temp_requirement values(reqId,reqName);
      call requirementDependents(reqId);
    end if;
  end loop req_loop;
  close reqCursor;

  set done = 0;

  open threatCursor;
  threat_loop: loop
    fetch threatCursor into threatId,threatName;
    if done = 1
    then
      leave threat_loop;
    end if;
    select count(distinct asset_id) into threatAssets from asset_threat where threat_id = threatId;
    if (threatAssets = 1)
    then
      insert into temp_threat values(threatId,threatName);
      call threatDependents(threatId);
    end if;
  end loop threat_loop;
  close threatCursor;

  set done = 0;

  open vulCursor;
  vulnerability_loop: loop
    fetch vulCursor into vulId,vulName;
    if done = 1
    then
      leave vulnerability_loop;
    end if;
    select count(distinct asset_id) into vulnerabilityAssets from asset_vulnerability where vulnerability_id = vulId;
    if (vulnerabilityAssets = 1)
    then
      insert into temp_vulnerability values(vulId,vulName);
      call vulnerabilityDependents(vulId);
    end if;
  end loop vulnerability_loop;
  close vulCursor;

  set done = 0;

  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId,taskName;
    if done = 1
    then
      leave task_loop;
    end if;
    select count(distinct asset_id) into taskAssets from task_asset where task_id = taskId;
    if (taskAssets = 1)
    then
      insert into temp_task values(taskId,taskName);
      call taskDependents(taskId);
    end if;
  end loop task_loop;
  close taskCursor;
end
//

create procedure domainPropertyDependents(in dpId int)
begin
  declare done int default 0;
  declare assetId int;
  declare assetName varchar(50);
  declare assetCursor cursor for select distinct da.asset_id,a.name from domainproperty_asset da, asset a where da.domainproperty_id = dpId and da.asset_id = a.id;  
  declare continue handler for not found set done = 1;

  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId,assetName;
    if done = 1
    then
      leave asset_loop;
    end if;
    insert into temp_asset values(assetId,assetName);
    call assetDependents(assetId);
  end loop asset_loop;
  close assetCursor;
end
//

create procedure vulnerabilityDependents(in vulId int)
begin
  declare riskId int;
  declare riskName varchar(200);
  declare done int default 0;
  declare riskCursor cursor for select distinct id,name from risk where vulnerability_id = vulId;  
  declare continue handler for not found set done = 1;

  open riskCursor;
  risk_loop: loop
    fetch riskCursor into riskId,riskName;
    if done = 1
    then
      leave risk_loop;
    end if;
    insert into temp_risk values(riskId,riskName);
    call riskDependents(riskId);
  end loop risk_loop;
  close riskCursor;
end
//

create procedure reportDependents(in dimId int, in dimName text)
begin
  drop table if exists temp_asset;
  drop table if exists temp_domainproperty;
  drop table if exists temp_threat;
  drop table if exists temp_vulnerability;
  drop table if exists temp_risk;
  drop table if exists temp_response;
  drop table if exists temp_requirement;
  drop table if exists temp_countermeasure;
  drop table if exists temp_goal;
  drop table if exists temp_obstacle;
  drop table if exists temp_task;
  drop table if exists temp_usecase;
  drop table if exists temp_persona;
  create temporary table temp_asset (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_domainproperty (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_threat (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_vulnerability (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_risk (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_response (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_requirement (id INT NOT NULL,name VARCHAR(255) NOT NULL);
  create temporary table temp_countermeasure (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_goal (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_obstacle (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_task (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_usecase (id INT NOT NULL,name VARCHAR(200) NOT NULL);
  create temporary table temp_persona (id INT NOT NULL,name VARCHAR(200) NOT NULL);

  if (dimName = 'attacker')
  then
    call attackerDependents(dimId);
  end if;

  if (dimName = 'asset')
  then
    call assetDependents(dimId);
  end if;

  if (dimName = 'domainproperty')
  then
    call domainPropertyDependents(dimId);
  end if;

  if (dimName = 'threat')
  then
    call threatDependents(dimId);
  end if;

  if (dimName = 'vulnerability')
  then
    call vulnerabilityDependents(dimId);
  end if;

  if (dimName = 'risk')
  then
    call riskDependents(dimId);
  end if;

  if (dimName = 'response')
  then
    call responseDependents(dimId);
  end if;

  if (dimName = 'requirement')
  then
    call requirementDependents(dimId);
  end if;

  if (dimName = 'domain')
  then
    call domainDependents(dimId);
  end if;

  if (dimName = 'countermeasure')
  then
    call countermeasureDependents(dimId);
  end if;

  if (dimName = 'goal')
  then
    call goalDependents(dimId);
  end if;

  if (dimName = 'obstacle')
  then
    call obstacleDependents(dimId);
  end if;

  if (dimName = 'task')
  then
    call taskDependents(dimId);
  end if;

  if (dimName = 'usecase')
  then
    call usecaseDependents(dimId);
  end if;

  if (dimName = 'role')
  then
    call roleDependents(dimId);
  end if;

  if (dimName = 'securitypattern')
  then
    call securityPatternDependents(dimId);
  end if;

  select distinct 'countermeasure',id,name from temp_countermeasure
  union
  select distinct 'goal',id,name from temp_goal
  union
  select distinct 'obstacle',id,name from temp_obstacle
  union
  select distinct 'response',id,name from temp_response
  union
  select distinct 'requirement',id,name from temp_requirement
  union
  select distinct 'risk',id,name from temp_risk
  union
  select distinct 'threat',id,name from temp_threat
  union
  select distinct 'vulnerability',id,name from temp_vulnerability
  union
  select distinct 'domainproperty',id,name from temp_domainproperty
  union
  select distinct 'asset',id,name from temp_asset
  union
  select distinct 'task',id,name from temp_task
  union
  select distinct 'usecase',id,name from temp_usecase
  union
  select distinct 'persona',id,name from temp_persona;
end
//

create function requirementNameId(reqName text)
returns int
deterministic
begin
  declare reqId int;
  select o.id into reqId from requirement o where o.name = reqName and o.version = (select max(i.version) from requirement i where i.id = o.id);
  return reqId;
end
//

create procedure requirementLabelComponents(in viewLabel text, out shortCode text, out reqLabel int)
begin
  declare dashIdx int;
  select substring_index(viewLabel,'-',1) into shortCode;
  select locate('-',viewLabel) into dashIdx; 
  select substring(viewLabel,dashIdx + 1) into reqLabel;
end
//
create procedure viewRemovableTraces(in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;

  select 'requirement' from_objt, concat(a.short_code,'-',r.label) from_name, 'task' to_objt, s.name to_name from task s, requirement r, asset a, asset_requirement ar, environment_task cs,requirement_task sr where cs.environment_id = environmentId and cs.task_id = s.id and cs.task_id = sr.task_id and sr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
  union
  select 'requirement' from_objt, concat(a.short_code,'-',r.label) from_name, 'task' to_objt, s.name to_name from task s, requirement r, environment a, environment_requirement ar, environment_task cs,requirement_task sr where cs.environment_id = environmentId and cs.task_id = s.id and cs.task_id = sr.task_id and sr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.environment_id = a.id
  union
  select 'requirement' from_objt, concat(a.short_code,'-',r.label) from_name, 'usecase' to_objt, s.name to_name from usecase s, requirement r, asset a, asset_requirement ar, environment_usecase cs,requirement_usecase sr where cs.environment_id = environmentId and cs.usecase_id = s.id and cs.usecase_id = sr.usecase_id and sr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.asset_id = a.id
  union
  select 'requirement' from_objt, concat(a.short_code,'-',r.label) from_name, 'usecase' to_objt, s.name to_name from usecase s, requirement r, environment a, environment_requirement ar, environment_usecase cs,requirement_usecase sr where cs.environment_id = environmentId and cs.usecase_id = s.id and cs.usecase_id = sr.usecase_id and sr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ar.requirement_id and ar.environment_id = a.id
  union
  select 'requirement' from_objt, concat(fa.short_code,'-',fr.label) from_name, 'requirement' to_objt, concat(ta.short_code,'-',tr.label) to_name from requirement fr, asset_requirement far, asset fa, requirement tr, asset_requirement tar, asset ta, requirementrequirement_goalassociation rr where rr.goal_id = fr.id and rr.subgoal_id = tr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fr.id = far.requirement_id and far.asset_id = fa.id and tr.id = tar.requirement_id and tar.asset_id = ta.id
  union
  select 'usecase' from_objt, u.name from_name, 'task' to_objt, t.name to_name from usecase_task ut, environment_usecase eu, environment_task et, usecase u, task t where eu.environment_id = environmentId and eu.environment_id = et.environment_id and ut.usecase_id = eu.usecase_id and eu.usecase_id = u.id and ut.task_id = et.task_id and et.task_id = t.id
  union
  select 'task' from_objt, s.name from_name, 'asset' to_objt, a.name to_name from task_asset sa, environment_asset ca, environment_task cs, asset a, task s where ca.environment_id = environmentId and cs.environment_id = environmentId and cs.task_id = sa.task_id and sa.task_id = s.id and ca.asset_id = sa.asset_id and sa.asset_id = a.id
  union
  select 'task' from_objt, s.name from_name, 'vulnerability' to_objt, v.name to_name from task_vulnerability sv, environment_vulnerability cv, environment_task cs, vulnerability v, task s where cv.environment_id = environmentId and cs.environment_id = environmentId and cs.task_id = sv.task_id and sv.task_id = s.id and cv.vulnerability_id = sv.vulnerability_id and sv.vulnerability_id = v.id
  union
  select 'requirement' from_objt, concat(a.short_code,'-',r.label) from_name, 'vulnerability' to_objt, v.name to_name from requirement r, asset_requirement ar, asset a, vulnerability v, environment_vulnerability cv, requirement_vulnerability rv where cv.environment_id = environmentId and rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id and v.id = cv.vulnerability_id and r.id = ar.requirement_id and ar.asset_id = a.id
  union
  select 'domainproperty' from_objt, dp.name from_name, 'asset' to_objt, a.name to_name from domainproperty dp, domainproperty_asset da, environment_asset ea, asset a where ea.environment_id = environmentId and ea.asset_id = a.id and a.id = da.asset_id and dp.id = da.domainproperty_id
  union
  select 'requirement' from_objt, concat(a.short_code,'-',r.label) from_name, 'role' to_objt, ro.name to_name from requirement r, asset_requirement ar, asset a, role ro, requirement_role rr where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rr.role_id = ro.id and r.id = ar.requirement_id and ar.asset_id = a.id
  union
  select 'requirement' from_objt, concat(e.short_code,'-',r.label) from_name, 'role' to_objt, ro.name to_name from requirement r, environment_requirement er, environment e, role ro, requirement_role rr where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rr.role_id = ro.id and r.id = er.requirement_id and er.environment_id = e.id
  union
  select 'requirement' from_objt, concat(fa.short_code,'-',fr.label) from_name, 'requirement' to_objt, concat(ta.short_code,'-',tr.label) to_name from requirement fr, asset_requirement far, asset fa, environment_asset fae, requirement tr, asset_requirement tar, asset ta, environment_asset tae, requirement_requirement rr where rr.from_id = fr.id and fr.id = far.requirement_id and far.asset_id = fa.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and rr.to_id = tr.id and tr.id = tar.requirement_id and tar.asset_id = ta.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and far.asset_id = fae.asset_id and fae.environment_id = environmentId and fae.environment_id = tae.environment_id and tae.asset_id = tar.asset_id
  union
  select 'requirement' from_objt, concat(fa.short_code,'-',fr.label) from_name, 'requirement' to_objt, concat(te.short_code,'-',tr.label) to_name from requirement fr, asset_requirement far, asset fa, environment_asset fae, requirement tr, environment_requirement ter, environment te, requirement_requirement rr where rr.from_id = fr.id and fr.id = far.requirement_id and far.asset_id = fa.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and rr.to_id = tr.id and tr.id = ter.requirement_id and ter.environment_id = te.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and far.asset_id = fae.asset_id and fae.environment_id = environmentId and fae.environment_id = ter.environment_id
  union
  select 'requirement' from_objt, concat(fe.short_code,'-',fr.label) from_name, 'requirement' to_objt, concat(ta.short_code,'-',tr.label) to_name from requirement fr, environment_requirement fer, environment fe, requirement tr, asset_requirement tar, asset ta, environment_asset tae, requirement_requirement rr where rr.from_id = fr.id and fr.id = fer.requirement_id and fer.environment_id = fe.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and rr.to_id = tr.id and tr.id = tar.requirement_id and tar.asset_id = ta.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fer.environment_id = environmentId and fer.environment_id = tae.environment_id and tae.asset_id = tar.asset_id
  union
  select 'requirement' from_objt, concat(fe.short_code,'-',fr.label) from_name, 'requirement' to_objt, concat(te.short_code,'-',tr.label) to_name from requirement fr, environment_requirement fer, environment fe, requirement tr, environment_requirement ter, environment te, requirement_requirement rr where rr.from_id = fr.id and fr.id = fer.requirement_id and fer.environment_id = fe.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and rr.to_id = tr.id and tr.id = ter.requirement_id and ter.environment_id = te.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fer.environment_id = environmentId and fer.environment_id = ter.environment_id;

end
//

create procedure delete_trace(in fromObjt text, in fromName text, in toObjt text, in toName text)
begin
  declare fromId int;
  declare toId int;
  declare fromIdSql varchar(4000);
  declare toIdSql varchar(4000);
  declare traceSql varchar(4000);
  declare shortCode varchar(50);
  declare reqLabel int;

  if fromObjt = 'requirement'
  then
    call requirementLabelComponents(fromName,shortCode,reqLabel);
    select o.id into fromId from requirement o, asset_requirement ar, asset a where o.label = reqLabel and o.id = ar.requirement_id and ar.asset_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    if fromId is null
    then
      select o.id into fromId from requirement o, environment_requirement er, environment e where o.label = reqLabel and o.id = er.requirement_id and er.environment_id = e.id and e.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    end if;
  else
    set fromIdSql = concat('select id into @fromId from ',fromObjt,' where name = "',fromName,'" limit 1');
    set @sql = fromIdSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set fromId = @fromId;
  end if;

  if toObjt = 'requirement'
  then
    call requirementLabelComponents(toName,shortCode,reqLabel);
    select o.id into toId from requirement o, asset_requirement ar, asset a where o.label = reqLabel and o.id = ar.requirement_id and ar.asset_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    if toId is null
    then
      select o.id into toId from requirement o, environment_requirement er, environment e where o.label = reqLabel and o.id = er.requirement_id and er.environment_id = e.id and e.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    end if;
  else
    set toIdSql = concat('select id into @toId from ',toObjt,' where name = "',toName,'" limit 1');
    set @sql = toIdSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set toId = @toId;
  end if;

  if fromObjt = 'requirement' and toObjt = 'requirement'
  then
    set traceSql = concat('delete from requirement_requirement where from_id = ',fromId,' and to_id = ',toId);
  else
    set traceSql = concat('delete from ',fromObjt,'_',toObjt,' where ',fromObjt,'_id = ',fromId,' and ',toObjt,'_id = ',toId);
  end if;

  set @sql = traceSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure riskAnalysisModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'asset' from_objt,a.name from_name, 'threat' to_objt,t.name to_name from asset_threat at,asset a, threat t where at.environment_id = environmentId and at.asset_id = a.id and at.threat_id = t.id
    union
    select 'asset' from_objt,a.name from_name, 'tag' to_objt,t.name to_name from asset_tag at,asset a, tag t, environment_asset ea where ea.environment_id = environmentId and ea.asset_id = a.id and at.asset_id = ea.asset_id and at.tag_id = t.id
    union
    select 'asset' from_objt,a.name from_name,'vulnerability' to_objt, v.name to_name from asset_vulnerability av, asset a, vulnerability v where av.environment_id = environmentId and av.vulnerability_id = v.id and  av.asset_id = a.id
    union
    select 'attacker' from_objt, a.name from_name, 'threat' to_objt, t.name to_name from threat_attacker ta, threat t, attacker a, environment_attacker ea, environment_threat et where ta.environment_id = environmentId and ta.attacker_id = a.id and ta.threat_id = t.id and ta.environment_id = ea.environment_id and ta.environment_id = et.environment_id and ea.environment_id = environmentId and et.environment_id = environmentId
    union
    select 'role' from_objt, r.name from_name, 'attacker' to_objt, a.name to_name from attacker_role ar, attacker a, role r where ar.environment_id = environmentId and ar.attacker_id = a.id and ar.role_id = r.id
    union
    select 'threat' from_objt, t.name from_name, 'risk' to_objt, r.name to_name from risk r, threat t, threat_likelihood tl, environment_vulnerability ev where r.threat_id = t.id and t.id = tl.threat_id and tl.environment_id = environmentId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = environmentId
    union
    select 'vulnerability' from_objt, v.name from_name, 'risk' to_objt, r.name to_name from risk r, vulnerability v, vulnerability_severity vs, environment_threat et where r.vulnerability_id = v.id and v.id = vs.vulnerability_id and vs.environment_id = environmentId and r.threat_id = et.threat_id and et.environment_id = environmentId
    union
    select 'risk' from_objt, ri.name from_name, 'response' to_objt, re.name to_name from response re, risk ri,environment_response er where er.environment_id = environmentId and er.response_id = re.id and re.risk_id = ri.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'role' from_objt, r.name to_name from countermeasure_role cr, countermeasure c, role r where cr.environment_id = environmentId and cr.countermeasure_id = c.id and cr.role_id = r.id
    union
    select 'task' from_objt, t.name from_name, 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name from task t, requirement r, environment_task et,requirement_task tr, asset_requirement rmr, asset rm where et.environment_id = environmentId and et.task_id = t.id and et.task_id = tr.task_id and tr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'task' from_objt, t.name from_name, 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name from task t, requirement r, environment_task et,requirement_task tr, environment_requirement rmr, environment rm where et.environment_id = environmentId and et.task_id = t.id and et.task_id = tr.task_id and tr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'risk' from_objt, r.name from_name, 'misusecase' to_objt, m.name to_name from risk r, misusecase m, misusecase_risk mr, environment_misusecase em where em.environment_id = environmentId and em.misusecase_id = mr.misusecase_id and mr.misusecase_id = m.id and mr.risk_id = r.id
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_threat_response_target ctrt, requirement_countermeasure rc, requirement re, asset_requirement ar, asset a where er.environment_id = environmentId and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.asset_id = a.id 
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_threat_response_target ctrt, requirement_countermeasure rc, requirement re, environment_requirement ar, environment a where er.environment_id = environmentId and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.environment_id = a.id 
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_vulnerability_response_target ctrt, requirement_countermeasure rc, requirement re, asset_requirement ar, asset a where er.environment_id = environmentId and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.asset_id = a.id 
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_vulnerability_response_target ctrt, requirement_countermeasure rc, requirement re, environment_requirement ar, environment a where er.environment_id = environmentId and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.environment_id = a.id 
    union
    select 'task' from_objt, t.name from_name, 'asset' to_objt, a.name to_name from task_asset ta, environment_asset ea, environment_task et, asset a, task t where ea.environment_id = environmentId and et.environment_id = environmentId and et.task_id = ta.task_id and ta.task_id = t.id and ea.asset_id = ta.asset_id and ta.asset_id = a.id
    union
    select 'task' from_objt, t.name from_name, 'vulnerability' to_objt, v.name to_name from task_vulnerability tv, environment_vulnerability ev, environment_task et, vulnerability v, task t where ev.environment_id = environmentId and et.environment_id = environmentId and et.task_id = tv.task_id and tv.task_id = t.id and ev.vulnerability_id = tv.vulnerability_id and tv.vulnerability_id = v.id
    union
    select 'role' from_objt, ro.name from_name, 'response' to_objt, re.name to_name from responserole_goalassociation rr, response re, role ro where rr.environment_id = environmentId and rr.goal_id = re.id and rr.subgoal_id = ro.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'countermeasure' to_objt, c.name to_name from requirement r, countermeasure c, requirement_countermeasure rc,asset_requirement rmr,asset rm where rc.environment_id = environmentId and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'countermeasure' to_objt, c.name to_name from requirement r, countermeasure c, requirement_countermeasure rc,environment_requirement rmr,environment rm where rc.environment_id = environmentId and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.environment_id = rm.id 
    union 
    select 'countermeasure' from_objt, c.name from_name, 'asset' to_objt, a.name to_name from countermeasure c, asset a, environment_countermeasure cc, countermeasure_asset ca where cc.environment_id = environmentId and cc.countermeasure_id = ca.countermeasure_id and ca.countermeasure_id = c.id and ca.asset_id = a.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'asset' to_objt, a.name to_name from countermeasure c, asset a, environment_countermeasure cc, countermeasure_securitypattern csp, securitypattern_asset_template_asset ata, securitypattern_classassociation sc where cc.environment_id = environmentId and cc.countermeasure_id = csp.countermeasure_id and  csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.head_id = ata.template_asset_id and ata.asset_id = a.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'asset' to_objt, a.name to_name from countermeasure c, asset a, environment_countermeasure cc, countermeasure_securitypattern csp, securitypattern_asset_template_asset ata, securitypattern_classassociation sc where cc.environment_id = environmentId and cc.countermeasure_id = csp.countermeasure_id and  csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.tail_id = ata.template_asset_id and ata.asset_id = a.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'vulnerability' to_objt, v.name to_name from requirement r, vulnerability v, environment_vulnerability cv, requirement_vulnerability rv,asset rm, asset_requirement rmr where cv.environment_id = environmentId and rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id and v.id = cv.vulnerability_id and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'vulnerability' to_objt, v.name to_name from requirement r, vulnerability v, environment_vulnerability cv, requirement_vulnerability rv,environment rm, environment_requirement rmr where cv.environment_id = environmentId and rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id and v.id = cv.vulnerability_id and r.id = rmr.requirement_id and rmr.environment_id = rm.id 
    union
    select 'countermeasure' from_objt, c.name from_name, 'task' to_objt, t.name to_name from countermeasure c, task t, countermeasuretask_goalassociation ct where ct.goal_id = c.id and ct.subgoal_id = t.id and ct.environment_id = environmentId
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',re.label) from_name, 'role' to_objt, ro.name to_name from requirement re, role ro, requirementrole_goalassociation rr,asset_requirement rmr, asset rm where rr.goal_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and rr.subgoal_id = ro.id and rr.environment_id = environmentId and re.id = rmr.requirement_id and rmr.asset_id = rm.id 
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',re.label) from_name, 'role' to_objt, ro.name to_name from requirement re, role ro, requirementrole_goalassociation rr,environment_requirement rmr, environment rm where rr.goal_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and rr.subgoal_id = ro.id and rr.environment_id = environmentId and re.id = rmr.requirement_id and rmr.environment_id = rm.id 
    union
    select 'obstacle' from_objt, o.name from_name, 'threat' to_objt, t.name to_name from obstacle o, threat t, obstaclethreat_goalassociation ot, environment_threat et where ot.goal_id = o.id and ot.subgoal_id = t.id and ot.subgoal_id = et.threat_id and et.environment_id = environmentId and et.environment_id = ot.environment_id
    union
    select 'obstacle' from_objt, o.name from_name, 'vulnerability' to_objt, v.name to_name from obstacle o, vulnerability v, obstaclevulnerability_goalassociation ov, environment_vulnerability ev where ov.goal_id = o.id and ov.subgoal_id = v.id and ov.subgoal_id = ev.vulnerability_id and ev.environment_id = environmentId and ev.environment_id = ov.environment_id
    union
    select 'asset' from_objt, a.name from_name, 'requirement' to_objt, concat(a.short_code,'-',r.label) to_name from asset a, environment_asset ea, requirement r, asset_requirement ar where ea.environment_id = environmentId and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id)
    union
    select 'domainproperty' from_objt, d.name from_name, 'asset' to_objt, a.name to_name from asset a, environment_asset ea, domainproperty_asset da, domainproperty d where ea.environment_id = environmentId and ea.asset_id = a.id and a.id = da.asset_id and da.domainproperty_id = d.id
    union
    select 'component' from_objt, c.name from_name, 'vulnerability' to_objt, v.name to_name from component c, component_vulnerability_target cvt, vulnerability v where cvt.environment_id = environmentId and cvt.component_id = c.id and cvt.vulnerability_id = v.id
    union
    select 'component' from_objt, c.name from_name, 'threat' to_objt, t.name to_name from component c, component_threat_target ctt, threat t where ctt.environment_id = environmentId and ctt.component_id = c.id and ctt.threat_id = t.id
    union
    select 'asset' from_objt, a.name from_name, 'component' to_objt, c.name to_name from component c, component_vulnerability_target cvt, asset a where cvt.environment_id = environmentId and cvt.component_id = c.id and cvt.asset_id = a.id
    union
    select 'asset' from_objt, a.name from_name, 'component' to_objt, c.name to_name from component c, component_threat_target ctt, asset a where ctt.environment_id = environmentId and ctt.component_id = c.id and ctt.asset_id = a.id;
  else
    select 'asset' from_objt,a.name from_name, 'threat' to_objt,t.name to_name from asset_threat at,asset a, threat t where at.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.asset_id = a.id and at.threat_id = t.id
    union
    select 'asset' from_objt,a.name from_name, 'tag' to_objt,t.name to_name from asset_tag at,asset a, tag t, environment_asset ea where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.asset_id = a.id and at.asset_id = ea.asset_id and at.tag_id = t.id
    union
    select 'asset' from_objt,a.name from_name,'vulnerability' to_objt, v.name to_name from asset_vulnerability av, asset a, vulnerability v where av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.vulnerability_id = v.id and  av.asset_id = a.id
    union
    select 'attacker' from_objt, a.name from_name, 'threat' to_objt, t.name to_name from threat_attacker ta, threat t, attacker a, environment_attacker ea, environment_threat et where ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.attacker_id = a.id and ta.threat_id = t.id and ta.environment_id = ea.environment_id and ta.environment_id = et.environment_id and ea.environment_id = environmentId and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select 'role' from_objt, r.name from_name, 'attacker' to_objt, a.name to_name from attacker_role ar, attacker a, role r where ar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ar.attacker_id = a.id and ar.role_id = r.id
    union
    select 'threat' from_objt, t.name from_name, 'risk' to_objt, r.name to_name from risk r, threat t, threat_likelihood tl, environment_vulnerability ev where r.threat_id = t.id and t.id = tl.threat_id and tl.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and r.vulnerability_id = ev.vulnerability_id and ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select 'vulnerability' from_objt, v.name from_name, 'risk' to_objt, r.name to_name from risk r, vulnerability v, vulnerability_severity vs, environment_threat et where r.vulnerability_id = v.id and v.id = vs.vulnerability_id and vs.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and r.threat_id = et.threat_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select 'risk' from_objt, ri.name from_name, 'response' to_objt, re.name to_name from response re, risk ri,environment_response er where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and er.response_id = re.id and re.risk_id = ri.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'role' from_objt, r.name to_name from countermeasure_role cr, countermeasure c, role r where cr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cr.countermeasure_id = c.id and cr.role_id = r.id
    union
    select 'task' from_objt, t.name from_name, 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name from task t, requirement r, environment_task et,requirement_task tr, asset_requirement rmr, asset rm where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = t.id and et.task_id = tr.task_id and tr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'task' from_objt, t.name from_name, 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name from task t, requirement r, environment_task et,requirement_task tr, environment_requirement rmr, environment rm where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = t.id and et.task_id = tr.task_id and tr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'risk' from_objt, r.name from_name, 'misusecase' to_objt, m.name to_name from risk r, misusecase m, misusecase_risk mr, environment_misusecase em where em.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and em.misusecase_id = mr.misusecase_id and mr.misusecase_id = m.id and mr.risk_id = r.id
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_threat_response_target ctrt, requirement_countermeasure rc, requirement re, asset_requirement ar, asset a where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.asset_id = a.id 
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_threat_response_target ctrt, requirement_countermeasure rc, requirement re, environment_requirement ar, environment a where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.environment_id = a.id 
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_vulnerability_response_target ctrt, requirement_countermeasure rc, requirement re, asset_requirement ar, asset a where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.asset_id = a.id 
    union
    select 'response' from_objt, r.name from_name, 'requirement' to_objt, concat(a.short_code,'-',re.label) to_name from response r, environment_response er, countermeasure_vulnerability_response_target ctrt, requirement_countermeasure rc, requirement re, environment_requirement ar, environment a where er.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and er.response_id = r.id and er.environment_id = ctrt.environment_id and er.response_id = ctrt.response_id and ctrt.countermeasure_id = rc.countermeasure_id and ctrt.environment_id = rc.environment_id and rc.requirement_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and re.id = ar.requirement_id and ar.environment_id = a.id 
    union
    select 'task' from_objt, t.name from_name, 'asset' to_objt, a.name to_name from task_asset ta, environment_asset ea, environment_task et, asset a, task t where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = ta.task_id and ta.task_id = t.id and ea.asset_id = ta.asset_id and ta.asset_id = a.id
    union
    select 'task' from_objt, t.name from_name, 'vulnerability' to_objt, v.name to_name from task_vulnerability tv, environment_vulnerability ev, environment_task et, vulnerability v, task t where ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.task_id = tv.task_id and tv.task_id = t.id and ev.vulnerability_id = tv.vulnerability_id and tv.vulnerability_id = v.id
    union
    select 'role' from_objt, ro.name from_name, 'response' to_objt, re.name to_name from responserole_goalassociation rr, response re, role ro where rr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rr.goal_id = re.id and rr.subgoal_id = ro.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'countermeasure' to_objt, c.name to_name from requirement r, countermeasure c, requirement_countermeasure rc, asset_requirement rmr,asset rm where rc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'countermeasure' to_objt, c.name to_name from requirement r, countermeasure c, requirement_countermeasure rc, environment_requirement rmr,environment rm where rc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'asset' to_objt, a.name to_name from countermeasure c, asset a, environment_countermeasure cc, countermeasure_asset ca where cc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cc.countermeasure_id = ca.countermeasure_id and ca.countermeasure_id = c.id and ca.asset_id = a.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'asset' to_objt, a.name to_name from countermeasure c, asset a, environment_countermeasure cc, countermeasure_securitypattern csp, securitypattern_asset_template_asset ata, securitypattern_classassociation sc where cc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cc.countermeasure_id = csp.countermeasure_id and  csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.head_id = ata.template_asset_id and ata.asset_id = a.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'asset' to_objt, a.name to_name from countermeasure c, asset a, environment_countermeasure cc, countermeasure_securitypattern csp, securitypattern_asset_template_asset ata, securitypattern_classassociation sc where cc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cc.countermeasure_id = csp.countermeasure_id and  csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.tail_id = ata.template_asset_id and ata.asset_id = a.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'vulnerability' to_objt, v.name to_name from requirement r, vulnerability v, environment_vulnerability cv, requirement_vulnerability rv,asset_requirement rmr, asset rm where cv.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id and v.id = cv.vulnerability_id and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'countermeasure' from_objt, c.name from_name, 'task' to_objt, t.name to_name from countermeasure c, task t, countermeasuretask_goalassociation ct where ct.goal_id = c.id and ct.subgoal_id = t.id and ct.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',re.label) from_name, 'role' to_objt, ro.name to_name from requirement re, role ro, requirementrole_goalassociation rr, asset_requirement rmr,asset rm where rr.goal_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and rr.subgoal_id = ro.id and rr.environment_id in (select environment_id from composite_environment where composite_environment_id  = environment_id) and re.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',re.label) from_name, 'role' to_objt, ro.name to_name from requirement re, role ro, requirementrole_goalassociation rr, environment_requirement rmr,environment rm where rr.goal_id = re.id and re.version = (select max(i.version) from requirement i where i.id = re.id) and rr.subgoal_id = ro.id and rr.environment_id in (select environment_id from composite_environment where composite_environment_id  = environment_id) and re.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'obstacle' from_objt, o.name from_name, 'threat' to_objt, t.name to_name from obstacle o, threat t, obstaclethreat_goalassociation ot, environment_threat et where ot.goal_id = o.id and ot.subgoal_id = t.id and ot.subgoal_id = et.threat_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = ot.environment_id
    union
    select 'obstacle' from_objt, o.name from_name, 'vulnerability' to_objt, v.name to_name from obstacle o, vulnerability v, obstaclevulnerability_goalassociation ov, environment_vulnerability ev where ov.goal_id = o.id and ov.subgoal_id = v.id and ov.subgoal_id = ev.vulnerability_id and ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ev.environment_id = ov.environment_id
    union
    select 'asset' from_objt, a.name from_name, 'requirement' to_objt, concat(a.short_code,'-',r.label) to_name from asset a, environment_asset ea, requirement r, asset_requirement ar where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id)
    union
    select 'domainproperty' from_objt, d.name from_name, 'asset' to_objt, a.name to_name from asset a, environment_asset ea, domainproperty_asset da, domainproperty d where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.asset_id = a.id and a.id = da.asset_id and da.domainproperty_id = d.id
    union
    select 'component' from_objt, c.name from_name, 'vulnerability' to_objt, v.name to_name from component c, component_vulnerability_target cvt, vulnerability v where cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.component_id = c.id and cvt.vulnerability_id = v.id
    union
    select 'component' from_objt, c.name from_name, 'threat' to_objt, t.name to_name from component c, component_threat_target ctt, threat t where ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.component_id = c.id and ctt.threat_id = t.id
    union
    select 'asset' from_objt, a.name from_name, 'component' to_objt, c.name to_name from component c, component_vulnerability_target cvt, asset a where cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.component_id = c.id and cvt.asset_id = a.id
    union
    select 'asset' from_objt, a.name from_name, 'component' to_objt, c.name to_name from component c, component_threat_target ctt, asset a where ctt.environment_id in (select environment_id from composite_environment_id where composite_environment_id = environmentId) and ctt.component_id = c.id and ctt.asset_id = a.id;

  end if;
end
//

create procedure addGoal(in goalId int,in goalName text, in goalOrig text)
begin
  insert into goal(id,name,originator) values (goalId,goalName,goalOrig);
end
//

create procedure updateGoal(in goalId int,in goalName text, in goalOrig text)
begin
  update goal set name = goalName, originator = goalOrig where id = goalId;
end
//

create procedure delete_goal(in goalId int)
begin
  call deleteGoalComponents(goalId);
  delete from goalrequirement_goalassociation where goal_id = goalId;
  delete from requirementgoal_goalassociation where subgoal_id = goalId;
  delete from goalrole_goalassociation where goal_id = goalId;
  delete from goaldomainproperty_goalassociation where goal_id = goalId;
  delete from goalobstacle_goalassociation where goal_id = goalId;
  delete from response_goal where goal_id = goalId;
  delete from rolegoalrole_dependency where dependency_id = goalId;
  delete from goal_reference where goal_id = goalId;
  delete from goal_tag where goal_id = goalId;
  delete from goal where id = goalId;
end
//

create procedure goalDependents(in asId int)
begin
  declare assetId int;
  declare assetName varchar(200);
  declare goalId int;
  declare goalName varchar(100);
  declare obsId int;
  declare obsName varchar(100);
  declare attackerId int;
  declare attackerName varchar(50);
  declare requirementId int;
  declare requirementLabel int;
  declare taskId int;
  declare taskName varchar(200);
  declare usecaseId int;
  declare usecaseName varchar(200);
  declare roleId int;
  declare roleName varchar(200);
  declare personaId int;
  declare personaName varchar(50);
  declare threatId int;
  declare threatName varchar(200);
  declare vulId int;
  declare vulName varchar(200);

  declare assetGoals int;
  declare goalGoals int;
  declare attackerGoals int;
  declare requirementGoals int;
  declare roleGoals int;
  declare taskGoals int;
  declare usecaseGoals int;
  declare personaGoals int;
  declare threatGoals int;
  declare vulnerabilityGoals int;
  declare obsGoals int;
  declare done int default 0;
  declare goalCursor cursor for select distinct gg.subgoal_id,g.name from goalgoal_goalassociation gg, goal g where gg.goal_id = asId and gg.subgoal_id = g.id;
  declare requirementCursor cursor for select distinct gr.subgoal_id,r.label from goalrequirement_goalassociation gr, requirement r where gr.goal_id = asId and gr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);
  declare taskCursor cursor for select distinct gt.subgoal_id,t.name from goaltask_goalassociation gt, task t where gt.goal_id = asId and gt.subgoal_id = t.id;
  declare usecaseCursor cursor for select distinct gt.subgoal_id,t.name from goalusecase_goalassociation gt, usecase t where gt.goal_id = asId and gt.subgoal_id = t.id;
  declare assetCursor cursor for select distinct gc.asset_id,a.name from goal_concern gc, asset a where gc.goal_id = asId and gc.asset_id = a.id;
  declare continue handler for not found set done = 1;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId,goalName;
    if done = 1
    then
      leave goal_loop;
    end if;
    select count(distinct subgoal_id) into goalGoals from goalgoal_goalassociation  where goal_id = goalId;
    insert into temp_goal values(goalId,goalName);
    if (goalGoals = 1)
    then
      call goalDependents(goalId);
    end if;
  end loop goal_loop;
  close goalCursor;

  set done = 0;
  open requirementCursor;
  requirement_loop: loop
    fetch requirementCursor into requirementId,requirementLabel;
    if done = 1
    then
      leave requirement_loop;
    end if;
    select count(distinct goal_id) into requirementGoals from goalrequirement_goalassociation where subgoal_id = requirementId;
    insert into temp_requirement values(requirementId,requirementLabel);
    if (requirementGoals = 1)
    then
      call requirementDependents(requirementId);
    end if;
  end loop requirement_loop;
  close requirementCursor;

  set done = 0;
  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId,taskName;
    if done = 1
    then
      leave task_loop;
    end if;
    insert into temp_task values(taskId,taskName);
    call taskDependents(taskId);
  end loop task_loop;
  close taskCursor;

  set done = 0;
  open usecaseCursor;
  usecase_loop: loop
    fetch usecaseCursor into usecaseId,usecaseName;
    if done = 1
    then
      leave usecase_loop;
    end if;
    insert into temp_usecase values(usecaseId,usecaseName);
    call usecaseDependents(taskId);
  end loop usecase_loop;
  close usecaseCursor;

  set done = 0;
  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId,assetName;
    if done = 1
    then
      leave asset_loop;
    end if;
    insert into temp_asset values(assetId,assetName);
    call assetDependents(assetId);
  end loop asset_loop;
  close assetCursor;
end
//

create procedure roleTasks(in roleName text, in environmentName text)
begin
  declare environmentId int;
  declare roleId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into roleId from role where name = roleName limit 1;
  select t.name from persona_role pr, task_persona tp, task t where pr.role_id = roleId and pr.environment_id = environmentId and pr.persona_id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = t.id; 
end
//

create procedure rolePersonas(in roleName text, in environmentName text)
begin
  declare environmentId int;
  declare roleId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into roleId from role where name = roleName limit 1;
  select t.name,p.name,duv.name,fv.name,dev.name,gv.name from countermeasure_role cr, persona_role pr, countermeasure_task_persona ctp, task t, persona p,securityusability_property_value duv, securityusability_property_value fv, securityusability_property_value dev, securityusability_property_value gv where cr.role_id = roleId and cr.environment_id = environmentId and pr.role_id = cr.role_id and pr.environment_id = environmentId and pr.persona_id = ctp.persona_id and ctp.environment_id = environmentId and ctp.task_id = t.id and ctp.persona_id = p.id and ctp.duration_id = duv.id and ctp.frequency_id = fv.id and ctp.demands_id = dev.id and ctp.goalsupport_id = gv.id;
end
//

create procedure countermeasureTaskPersonas(in roleName text, in environmentName text)
begin
  declare environmentId int;
  declare roleId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into roleId from role where name = roleName limit 1;
  select t.name,p.name from persona_role pr, task_persona tp, task t, persona p where pr.role_id = roleId and pr.environment_id = environmentId and pr.persona_id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = t.id and tp.persona_id = p.id;
end
//

create procedure countermeasurePersonas(in cmId int, in environmentId int)
begin
  select t.name,p.name,duv.name,fv.name,dev.name,gv.name from countermeasure_task_persona ctp, task t, persona p,securityusability_property_value duv, securityusability_property_value fv, securityusability_property_value dev, securityusability_property_value gv where ctp.countermeasure_id = cmId and ctp.environment_id = environmentId and ctp.task_id = t.id and ctp.persona_id = p.id and ctp.duration_id = duv.id and ctp.frequency_id = fv.id and ctp.demands_id = dev.id and ctp.goalsupport_id = gv.id;
end
//

create procedure addCountermeasurePersona(in cmId int,in personaName text,in taskName text,in durationName text, in frequencyName text, in demandsName text, in goalSupportName text, in environmentName text)
begin
  declare personaId int;
  declare taskId int;
  declare durationId int;
  declare frequencyId int;
  declare demandsId int;
  declare goalSupportId int;
  declare environmentId int;
  select id into personaId from persona where name = personaName limit 1;
  select id into taskId from task where name = taskName limit 1;
  select id into durationId from securityusability_property_value where name = durationName limit 1;
  select id into frequencyId from securityusability_property_value where name = frequencyName limit 1;
  select id into demandsId from securityusability_property_value where name = demandsName limit 1;
  select id into goalSupportId from securityusability_property_value where name = goalSupportName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into countermeasure_task_persona(countermeasure_id,environment_id,task_id,persona_id,duration_id,frequency_id,demands_id,goalsupport_id) values (cmId,environmentId,taskId,personaId,durationId,frequencyId,demandsId,goalSupportId);
end
//

create procedure taskDependents(in taskId int)
begin
  declare cmId int;
  declare cmName varchar(200);
  declare assetId int;
  declare assetName varchar(200);
  declare cmTasks int;
  declare done int default 0;
  declare cmCursor cursor for select distinct cm.id,cm.name from countermeasure_task_persona ctp, countermeasure cm where ctp.task_id = taskId and ctp.countermeasure_id = cm.id;  
  declare continue handler for not found set done = 1;

  set done = 0;
  open cmCursor;
  cm_loop: loop
    fetch cmCursor into cmId,cmName;
    if done = 1
    then
      leave cm_loop;
    end if;
    select count(distinct task_id) into cmTasks from countermeasure_task_persona where task_id = taskId;
    if (cmTasks = 1)
    then
      insert into temp_countermeasure values(cmId,cmName);
      call countermeasureDependents(cmId);
    end if;
  end loop cm_loop;
  close cmCursor;
end
//

create procedure usecaseDependents(in ucId int)
begin
  declare assetId int;
  declare assetName varchar(200);
  declare done int default 0;
  declare assetCursor cursor for select distinct tc.asset_id,a.name from usecase_asset tc, asset a where tc.usecase_id = ucId and tc.asset_id = a.id;
  declare continue handler for not found set done = 1;

  set done = 0;

  set done = 0;
  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId,assetName;
    if done = 1
    then
      leave asset_loop;
    end if;
    insert into temp_asset values(assetId,assetName);
    call assetDependents(assetId);
  end loop asset_loop;
  close assetCursor;
end
//

create function hindrance_score(taskId int,environmentId int) 
returns int
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingUsability int;
  declare currentEnvironmentId int;
  declare currentUsability int;
  declare done int default 0;
  declare usabilityCursor cursor for select environment_id, ifnull(avg((duration_id + frequency_id)/2) + avg(demands_id) + avg(goalsupport_id),0) from countermeasure_task_persona where task_id = taskId group by environment_id;

  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingUsability = 0;

    open usabilityCursor;
    usability_loop: loop
      fetch usabilityCursor into currentEnvironmentId, currentUsability;
      if done = 1
      then
        leave usability_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingUsability = currentUsability;
        end if;
      else
        if currentUsability > workingUsability
        then
          set workingUsability = currentUsability;
        end if;
      end if;
    end loop usability_loop;
    close usabilityCursor;
  else
    select ifnull(avg((duration_id + frequency_id)/2) + avg(demands_id) + avg(goalsupport_id),0) into workingUsability from countermeasure_task_persona where task_id = taskId and environment_id = environmentId;
  end if;

  return workingUsability;
end
//

create function usability_score(taskId int,environmentId int) 
returns int
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingUsability int;
  declare currentEnvironmentId int;
  declare currentUsability int;
  declare taskHindrance int;
  declare done int default 0;
  declare usabilityCursor cursor for select environment_id, ifnull(avg((duration_id + frequency_id)/2) + avg(demands_id) + avg(goalsupport_id),1) from task_persona where task_id = taskId group by environment_id;

  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingUsability = 0;

    open usabilityCursor;
    usability_loop: loop
      fetch usabilityCursor into currentEnvironmentId, currentUsability;
      if done = 1
      then
        leave usability_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingUsability = currentUsability;
        end if;
      else
        if currentUsability > workingUsability
        then
          set workingUsability = currentUsability;
        end if;
      end if;
    end loop usability_loop;
    close usabilityCursor;
  else
    select ifnull(avg((duration_id + frequency_id)/2) + avg(demands_id) + avg(goalsupport_id),1) into workingUsability from task_persona where task_id = taskId and environment_id = environmentId;
  end if;

  return workingUsability;
end
//

create function task_usability(taskName text,environmentName text) 
returns int
deterministic 
begin
  declare taskId int;
  declare environmentId int;
  declare usabilityScore int;
  declare hindranceScore int;
  declare taskUsability int;

  select id into taskId from task where name = taskName;
  select id into environmentId from environment where name = environmentName;

  select usability_score(taskId,environmentId) into usabilityScore;
  select hindrance_score(taskId,environmentId) into hindranceScore;
  set taskUsability = usabilityScore + hindranceScore;

  if taskUsability <= 1
  then
    set taskUsability = 1;
  end if;
  if taskUsability > 9
  then
    set taskUsability = 9;
  end if;
  return taskUsability;

end
//

create procedure countermeasureNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from countermeasure;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select c.name from countermeasure c, environment_countermeasure cc where cc.environment_id = environmentId and cc.countermeasure_id = c.id order by 1;
  end if;
end
//

create procedure classModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,concat('Concerns Security Pattern ',sp.name) rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata,securitypattern sp where hea.environment_id = environmentId and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = sp.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = sp.id and a.pattern_id = sp.id
    union
    select -1,he.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,concat('Concerns Component ',c.name) rationale from component_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, component_asset_template_asset hata, component_asset_template_asset tata,component c where hea.environment_id = environmentId and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.component_id = c.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.component_id = c.id and a.component_id = c.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id = environmentId and at.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_vulnerability_target cvt, asset_vulnerability av where ma.id = cvt.asset_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_threat_target ctt, asset_threat at where ma.id = ctt.asset_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id = environmentId and at.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset', a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,concat('Concerns goal ',g.name) rationale from goal_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,goal g where ca.environment_id = environmentId and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.goal_id = g.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,concat('Concerns task ',t.name) rationale from task_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,task t where ca.environment_id = environmentId and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.task_id = t.id
    union
    select -1,e.name,concat('Concerns goal ',g.name),'goalconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from goal_concern gc, goal g, environment_asset ea, asset a, environment e where ea.environment_id = environmentId and ea.environment_id = gc.environment_id and ea.asset_id = gc.asset_id and gc.goal_id = g.id and gc.asset_id = ea.asset_id and gc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns obstacle ',o.name),'obstacleconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from obstacle_concern oc, obstacle o, environment_asset ea, asset a, environment e where ea.environment_id = environmentId and ea.environment_id = oc.environment_id and ea.asset_id = oc.asset_id and oc.obstacle_id = o.id and oc.asset_id = ea.asset_id and oc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns task ',t.name),'taskconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from task_asset tc, task t, environment_asset ea, asset a, environment e where ea.environment_id = environmentId and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.task_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns usecase ',t.name),'usecaseconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from usecase_asset tc, usecase t, environment_asset ea, asset a, environment e where ea.environment_id = environmentId and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.usecase_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id;
  else
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,'' rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata where hea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = a.pattern_id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = a.pattern_id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset',a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,'' rationale from goal_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e where ca.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,concat('Concerns task ',t.name) rationale from task_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,task t where ca.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.task_id = t.id
    union
    select -1,e.name,concat('Concerns goal ',g.name),'goalconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from goal_concern gc, goal g, environment_asset ea, asset a, environment e where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = gc.environment_id and ea.asset_id = gc.asset_id and gc.goal_id = g.id and gc.asset_id = ea.asset_id and gc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns obstacle ',o.name),'obstacleconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from obstacle_concern oc, obstacle o, environment_asset ea, asset a, environment e where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = oc.environment_id and ea.asset_id = oc.asset_id and oc.obstacle_id = o.id and oc.asset_id = ea.asset_id and oc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns task ',t.name),'taskconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from task_asset tc, task t, environment_asset ea, asset a, environment e where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.task_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns usecase ',t.name),'usecaseconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from usecase_asset tc, usecase t, environment_asset ea, asset a, environment e where ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.usecase_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,he.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,concat('Concerns Component ',c.name) rationale from component_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, component_asset_template_asset hata, component_asset_template_asset tata,component c where hea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.component_id = c.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.component_id = c.id and a.component_id = c.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_vulnerability_target cvt, asset_vulnerability av where ma.id = cvt.asset_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_threat_target ctt, asset_threat at where ma.id = ctt.asset_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id = environmentId and at.environment_id = e.id;
  end if;
end
//

create procedure concernlessClassModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,'' rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata,securitypattern sp where hea.environment_id = environmentId and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = sp.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = sp.id and a.pattern_id = sp.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id = environmentId and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_vulnerability_target cvt, asset_vulnerability av where ma.id = cvt.asset_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_threat_target ctt, asset_threat at where ma.id = ctt.asset_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id = environmentId and at.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset', a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select -1,he.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from component_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, component_asset_template_asset hata, component_asset_template_asset tata,component c where hea.environment_id = environmentId and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.component_id = c.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.component_id = c.id and a.component_id = c.id;
  else
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,'' rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata where hea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = a.pattern_id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = a.pattern_id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset',a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where p.id = tp.persona_id and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select -1,he.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from component_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, component_asset_template_asset hata, component_asset_template_asset tata,component c where hea.environment_id in (select component_id from composite_component where composite_component_id = environmentId) and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.component_id = a.component_id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.component_id = a.component_id and a.component_id = c.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_vulnerability_target cvt, asset_vulnerability av where ma.id = cvt.asset_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,va.name,'asset',1,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, component_threat_target ctt, asset_threat at where ma.id = ctt.asset_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id = e.id;
  end if;
end
//

create procedure classAssociationNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
  end if;
end
//

create procedure addClassAssociation(in associationId int,in envName text, in headAsset text, in headType text, in headNav int, in headMult text,in headRole text, in tailRole text, in tailMult text, in tailNav int, in tailType text, in tailAsset text)
begin
  declare environmentId int;
  declare headAssetId int;
  declare headTypeId int;
  declare headMultId int;
  declare tailMultId int;
  declare tailTypeId int;
  declare tailAssetId int;

  select id into environmentId from environment where name = envName limit 1;
  select id into headAssetId from asset where name = headAsset limit 1;
  select id into headTypeId from association_type where name = headType limit 1;
  select id into headMultId from multiplicity_type where name = headMult limit 1;
  select id into tailMultId from multiplicity_type where name = tailMult limit 1;
  select id into tailTypeId from association_type where name = tailType limit 1;
  select id into tailAssetId from asset where name = tailAsset limit 1;

  call addAssetDependents(headAssetId,tailAssetId,environmentId);

  insert into classassociation(id,environment_id,head_id,head_association_type_id,head_navigation,head_multiplicity_id,head_role_name,tail_role_name,tail_multiplicity_id,tail_navigation,tail_association_type_id,tail_id) values(associationId,environmentId,headAssetId,headTypeId,headNav,headMultId,headRole,tailRole,tailMultId,tailNav,tailTypeId,tailAssetId);
end
//

create procedure updateClassAssociation(in associationId int,in envName text, in headAsset text, in headType text, in headNav int, in headMult text,in headRole text, in tailRole text, in tailMult text, in tailNav int, in tailType text, in tailAsset text)
begin
  declare environmentId int;
  declare headAssetId int;
  declare headTypeId int;
  declare headMultId int;
  declare tailMultId int;
  declare tailTypeId int;
  declare tailAssetId int;

  select id into environmentId from environment where name = envName limit 1;
  select id into headAssetId from asset where name = headAsset limit 1;
  select id into headTypeId from association_type where name = headType limit 1;
  select id into headMultId from multiplicity_type where name = headMult limit 1;
  select id into tailMultId from multiplicity_type where name = tailMult limit 1;
  select id into tailTypeId from association_type where name = tailType limit 1;
  select id into tailAssetId from asset where name = tailAsset limit 1;

  call addAssetDependents(headAssetId,tailAssetId,environmentId);

  update classassociation set environment_id = environmentId, head_id = headAssetId, head_association_type_id = headTypeId, head_multiplicity_id = headMultId, head_role_name = headRole, tail_role_name = tailRole, tail_multiplicity_id = tailMultId, tail_association_type_id = tailTypeId, tail_id = tailAssetId, head_navigation = headNav, tail_navigation = tailNav where id = associationId;
end
//

create procedure delete_classassociation(in associationId int)
begin
  delete from classassociation where id = associationId;
end
//

create function classAssociationId(envName text,headName text,tailName text) 
returns int
deterministic 
begin
  declare envId int;
  declare headId int;
  declare tailId int;
  declare associationId int;

  select id into envId from environment where name = envName;
  select id into headId from asset where name = headName;
  select id into tailId from asset where name = tailName;

  
  select id into associationId from classassociation where environment_id = envId and head_id = headId and tail_id = tailId;
  return associationId;

end
//

create procedure deleteGoalComponents(in goalId int)
begin
  delete from environment_goal where goal_id = goalId;
  delete from goal_label where goal_id = goalId;
  delete from goal_definition where goal_id = goalId;
  delete from goal_category where goal_id = goalId;
  delete from goal_priority where goal_id = goalId;
  delete from goal_fitcriterion where goal_id = goalId;
  delete from goal_issue where goal_id = goalId;
  delete from goalgoal_goalassociation where goal_id = goalId;
  delete from goalgoal_goalassociation where subgoal_id = goalId;
  delete from goalrequirement_goalassociation where goal_id = goalId;
  delete from goaldomainproperty_goalassociation where goal_id = goalId;
  delete from goalobstacle_goalassociation where goal_id = goalId;
  delete from goaltask_goalassociation where goal_id = goalId;
  delete from goalusecase_goalassociation where goal_id = goalId;
  delete from obstaclegoal_goalassociation where subgoal_id = goalId;
  delete from goalrole_goalassociation where goal_id = goalId;
  delete from goal_concern where goal_id = goalId;
  delete from goal_concernassociation where goal_id = goalId;
end
//

create procedure addGoalDefinition(in goalId int,in environmentName text, in defName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into goal_definition(goal_id,environment_id,definition) values (goalId,environmentId,defName);
end
//

create procedure addGoalCategory(in goalId int,in environmentName text, in catName text)
begin
  declare environmentId int;
  declare catId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into catId from goal_category_type where name = catName limit 1;
  insert into goal_category(goal_id,environment_id,category_id) values (goalId,environmentId,catId);
end
//

create procedure addGoalPriority(in goalId int,in environmentName text, in priName text)
begin
  declare environmentId int;
  declare priId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into priId from priority_type where name = priName limit 1;
  insert into goal_priority(goal_id,environment_id,priority_id) values (goalId,environmentId,priId);
end
//

create procedure addGoalFitCriterion(in goalId int,in environmentName text, in fcName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into goal_fitcriterion(goal_id,environment_id,fitcriterion) values (goalId,environmentId,fcName);
end
//

create procedure addGoalIssue(in goalId int,in environmentName text, in issueName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into goal_issue(goal_id,environment_id,issue) values (goalId,environmentId,issueName);
end
//

create function goal_definition(goalId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingDefinition varchar(1000);
  declare currentEnvironmentId int;
  declare currentDefinition varchar(1000);
  declare definitionName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare defCursor cursor for select environment_id,definition from goal_definition where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingDefinition = '';

    open defCursor;
    def_loop: loop
      fetch defCursor into currentEnvironmentId, currentDefinition;
      if done = 1
      then
        leave def_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingDefinition = currentDefinition;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingDefinition = concat(workingDefinition,' [' ,currentEnvName,'] ',currentDefinition);
      end if;
    end loop def_loop;
    close defCursor;
    set definitionName = workingDefinition; 
  else
    select definition into definitionName from goal_definition where goal_id = goalId and environment_id = environmentId;
  end if;
  return definitionName;
end
//

create function goal_fitcriterion(goalId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingFC varchar(1000);
  declare currentEnvironmentId int;
  declare currentFC varchar(1000);
  declare fitCriterionName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare fcCursor cursor for select environment_id,fitcriterion from goal_fitcriterion where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingFC = '';

    open fcCursor;
    fc_loop: loop
      fetch fcCursor into currentEnvironmentId, currentFC;
      if done = 1
      then
        leave fc_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingFC = currentFC;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingFC = concat(workingFC,' [' ,currentEnvName,'] ',currentFC);
      end if;
    end loop fc_loop;
    close fcCursor;
    set fitCriterionName = workingFC; 
  else
    select fitcriterion into fitCriterionName from goal_fitcriterion where goal_id = goalId and environment_id = environmentId;
  end if;
  return fitCriterionName;
end
//


create function goal_issue(goalId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingIssue varchar(1000);
  declare currentEnvironmentId int;
  declare currentIssue varchar(1000);
  declare issueName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare issueCursor cursor for select environment_id,definition from goal_issue where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingIssue = '';

    open issueCursor;
    issue_loop: loop
      fetch issueCursor into currentEnvironmentId, currentIssue;
      if done = 1
      then
        leave issue_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingIssue = currentIssue;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingIssue = concat(workingIssue,' [' ,currentEnvName,'] ',currentIssue);
      end if;
    end loop issue_loop;
    close issueCursor;
    set issueName = workingIssue; 
  else
    select issue into issueName from goal_issue where goal_id = goalId and environment_id = environmentId;
  end if;
  return issueName;
end
//


create function goal_category(goalId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingCategory varchar(1000);
  declare currentEnvironmentId int;
  declare currentCategory varchar(50);
  declare categoryName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare catCursor cursor for select environment_id,gct.name from goal_category gc, goal_category_type gct where gc.goal_id = goalId and gc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gc.category_id = gct.id;
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingCategory = '';

    open catCursor;
    cat_loop: loop
      fetch catCursor into currentEnvironmentId, currentCategory;
      if done = 1
      then
        leave cat_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingCategory = currentCategory;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingCategory = concat(workingCategory,' [' ,currentEnvName,'] ',currentCategory);
      end if;
    end loop cat_loop;
    close catCursor;
    set categoryName = workingCategory; 
  else
    select gct.name into categoryName from goal_category gc, goal_category_type gct where gc.goal_id = goalId and gc.environment_id = environmentId and gc.category_id = gct.id;
  end if;
  return categoryName;
end
//

create function goal_priority(goalId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingPriority varchar(1000);
  declare currentEnvironmentId int;
  declare currentPriority varchar(50);
  declare priorityName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare priCursor cursor for select environment_id,pt.name from goal_priority gp, priority_type pt where gp.goal_id = goalId and gp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gp.priority_id = pt.id;
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingPriority = '';

    open priCursor;
    pri_loop: loop
      fetch priCursor into currentEnvironmentId, currentPriority;
      if done = 1
      then
        leave pri_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingPriority = currentPriority;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingPriority = concat(workingPriority,' [' ,currentEnvName,'] ',currentPriority);
      end if;
    end loop pri_loop;
    close priCursor;
    set priorityName = workingPriority; 
  else
    select pt.name into priorityName from goal_priority gp, priority_type pt where gp.goal_id = goalId and gp.environment_id = environmentId and gp.priority_id = pt.id;
  end if;
  return priorityName;
end
//

create procedure add_goal_environment(in goalId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_goal(goal_id,environment_id) values(goalId,environmentId);
end
//

create procedure goal_environments(in goalId int)
begin
  select eg.environment_id,e.name from environment_goal eg,environment e where eg.goal_id = goalId and eg.environment_id = e.id;
end
//

create procedure goalAssociationNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementgoal_goalassociation ga, environment e, requirement hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrequirement_goalassociation ga, environment e, requirement hg, reference_type rt, requirement tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'countermeasure' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, countermeasure hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'domainproperty' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from domainpropertyobstacle_goalassociation ga, environment e, domainproperty hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name, 'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name, 'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementgoal_goalassociation ga, environment e, requirement hg, reference_type rt, goal tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrequirement_goalassociation ga, environment e, requirement hg, reference_type rt, requirement tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'countermeasure' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, countermeasure hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'domainproperty' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from domainpropertyobstacle_goalassociation ga, environment e, domainproperty hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name, 'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name, 'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id;
  end if;
end
//

create procedure addGoalAssociation(in associationId int,in envName text, in goalName text, in goalDimName text, in aType text, in subGoalName text, in subGoalDimName text,in alternativeId int,rationaleName text)
begin
  declare environmentId int;
  declare goalId int;
  declare aTypeId int;
  declare subGoalId int;
  declare shortCode text;
  declare reqLabel int;

  select id into environmentId from environment where name = envName limit 1;
  select id into aTypeId from reference_type where name = aType limit 1;

  if goalDimName = 'goal' and subGoalDimName = 'goal'
  then
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from goal where name = subGoalName;    
    call addGoalDependents(goalId,subGoalId,environmentId);
    insert into goalgoal_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'goal' and subGoalDimName = 'requirement'
  then 
    select id into goalId from goal where name = goalName;    
    select requirementId(subGoalName) into subGoalId;
/*    select o.id into subGoalId from requirement o where o.name = subGoalName and o.version = (select max(i.version) from requirement i where i.id = o.id); */
    insert into goalrequirement_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'goal' and subGoalDimName = 'task'
  then
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from task where name = subGoalName;    
    insert into goaltask_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'task'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from task where name = subGoalName;    
    insert into obstacletask_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'usecase'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from usecase where name = subGoalName;    
    insert into obstacleusecase_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'goal' and subGoalDimName = 'usecase'
  then
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from usecase where name = subGoalName;    
    insert into goalusecase_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'requirement' and subGoalDimName = 'goal'
  then 
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);

    select id into subGoalId from goal where name = subGoalName;    
    insert into requirementgoal_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'requirement' and subGoalDimName = 'requirement'
  then 
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    select o.id into subGoalId from requirement o where o.name = subGoalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    insert into requirementrequirement_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'goal' and subGoalDimName = 'role'
  then 
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from role where name = subGoalName;    
    insert into goalrole_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'countermeasure' and subGoalDimName = 'task'
  then 
    select id into goalId from countermeasure where name = goalName;    
    select id into subGoalId from task where name = subGoalName;    
    insert into countermeasuretask_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'goal' and subGoalDimName = 'domainproperty'
  then 
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from domainproperty where name = subGoalName;    
    insert into goaldomainproperty_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'goal' and subGoalDimName = 'obstacle'
  then
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from obstacle where name = subGoalName;    
    insert into goalobstacle_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'domainproperty' and subGoalDimName = 'obstacle'
  then
    select id into goalId from domainproperty where name = goalName;    
    select id into subGoalId from obstacle where name = subGoalName;    
    insert into domainpropertyobstacle_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'obstacle'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from obstacle where name = subGoalName;    
    call addObstacleDependents(goalId,subGoalId,environmentId);
    insert into obstacleobstacle_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'goal'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from goal where name = subGoalName;    
    insert into obstaclegoal_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'domainproperty'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from domainproperty where name = subGoalName;    
    insert into obstacledomainproperty_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'requirement'
  then
    select id into goalId from obstacle where name = goalName;    
    call requirementLabelComponents(subGoalName,shortCode,reqLabel);
    select o.id into subGoalId from requirement o where o.name = reqLabel and o.version = (select max(i.version) from requirement i where i.id = o.id);
    insert into obstaclerequirement_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'requirement' and subGoalDimName = 'obstacle'
  then
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    select id into subGoalId from obstacle where name = subGoalName;    
    insert into requirementobstacle_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'threat'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from threat where name = subGoalName;    
    insert into obstaclethreat_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'vulnerability'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from vulnerability where name = subGoalName;    
    insert into obstaclevulnerability_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'role'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from role where name = subGoalName;    
    insert into obstaclerole_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  elseif goalDimName = 'obstacle' and subGoalDimName = 'misusecase'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from misusecase where name = subGoalName;    
    insert into obstaclemisusecase_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  else
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    select id into subGoalId from role where name = subGoalName;    
    insert into requirementrole_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values(associationId,environmentId,goalId,aTypeId,subGoalId,alternativeId,rationaleName);
  end if;
end
//

create procedure updateGoalAssociation(in associationId int,in envName text, in goalName text, in goalDimName text, in aType text, in subGoalName text,in subGoalDimName text,in alternativeId int,rationaleName text)
begin
  declare environmentId int;
  declare goalId int;
  declare aTypeId int;
  declare subGoalId int;

  select id into environmentId from environment where name = envName limit 1;
  select id into aTypeId from reference_type where name = aType limit 1;

  if goalDimName = 'goal' and subGoalDimName = 'goal'
  then
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from goal where name = subGoalName;    
    update goalgoal_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId,rationale = rationaleName where id = associationId;
  elseif goalDimName = 'goal' and subGoalDimName = 'requirement'
  then 
    select id into goalId from goal where name = goalName;    
    select o.id into subGoalId from requirement o where o.name = subGoalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    update goalrequirement_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'goal' and subGoalDimName = 'task'
  then 
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from task where name = subGoalName;    
    update goaltask_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'task'
  then 
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from task where name = subGoalName;    
    update obstacletask_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'usecase'
  then 
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from usecase where name = subGoalName;    
    update obstacleusecase_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'goal' and subGoalDimName = 'usecase'
  then 
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from usecase where name = subGoalName;    
    update goalusecase_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'requirement' and subGoalDimName = 'goal'
  then 
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    select id into subGoalId from goal where name = subGoalName;    
    update requirementgoal_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'requirement' and subGoalDimName = 'requirement'
  then 
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    select o.id into subGoalId from requirement o where o.name = subGoalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    update requirementrequirement_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'goal' and subGoalDimName = 'role'
  then 
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from role where name = subGoalName;    
    update goalrole_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'countermeasure' and subGoalDimName = 'task'
  then 
    select id into goalId from countermeasure where name = goalName;    
    select id into subGoalId from task where name = subGoalName;    
    update countermeasuretask_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'goal' and subGoalDimName = 'domainproperty'
  then 
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from domainproperty where name = subGoalName;    
    update goaldomainproperty_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'goal' and subGoalDimName = 'obstacle'
  then
    select id into goalId from goal where name = goalName;    
    select id into subGoalId from obstacle where name = subGoalName;    
    update goalobstacle_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'domainproperty' and subGoalDimName = 'obstacle'
  then
    select id into goalId from domainproperty where name = goalName;    
    select id into subGoalId from obstacle where name = subGoalName;    
    update domainpropertyobstacle_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'obstacle'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from obstacle where name = subGoalName;    
    update obstacleobstacle_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'goal'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from goal where name = subGoalName;    
    update obstaclegoal_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'domainproperty'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from domainproperty where name = subGoalName;    
    update obstacledomainproperty_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'requirement'
  then
    select id into goalId from obstacle where name = goalName;    
    select o.id into subGoalId from requirement o where o.name = subGoalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    update obstaclerequirement_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'threat'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from threat where name = subGoalName;    
    update obstaclethreat_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'vulnerability'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from threat where name = subGoalName;    
    update obstaclevulnerability_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'role'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from role where name = subGoalName;    
    update obstaclerole_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  elseif goalDimName = 'obstacle' and subGoalDimName = 'misusecase'
  then
    select id into goalId from obstacle where name = goalName;    
    select id into subGoalId from misusecase where name = subGoalName;    
    update obstaclemisusecase_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  else
    select o.id into goalId from requirement o where o.name = goalName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    select id into subGoalId from role where name = subGoalName;    
    update requirementrole_goalassociation set environment_id = environmentId, goal_id = goalId, ref_type_id = aTypeId, subgoal_id = subGoalId,alternative_id = alternativeId, rationale = rationaleName where id = associationId;
  end if;
end
//

create procedure delete_goalassociation(in associationId int, in goalName text, in subGoalName text)
begin
  if goalName = 'goal' and subGoalName = 'goal'
  then 
    delete from goalgoal_goalassociation where id = associationId;
  elseif goalName = 'goal' and subGoalName = 'requirement'
  then
    delete from goalrequirement_goalassociation where id = associationId;
  elseif goalName = 'goal' and subGoalName = 'task'
  then
    delete from goaltask_goalassociation where id = associationId;
  elseif goalName = 'obstacle' and subGoalName = 'task'
  then
    delete from obstacletask_goalassociation where id = associationId;
  elseif goalName = 'obstacle' and subGoalName = 'usecase'
  then
    delete from obstacleusecase_goalassociation where id = associationId;
  elseif goalName = 'goal' and subGoalName = 'usecase'
  then
    delete from goalusecase_goalassociation where id = associationId;
  elseif goalName = 'requirement' and subGoalName = 'goal'
  then
    delete from goalrequirement_goalassociation where id = associationId;
  elseif goalName = 'requirement' and subGoalName = 'requirement'
  then
    delete from requirementrequirement_goalassociation where id = associationId;
  elseif goalName = 'goal' and subGoalName = 'role'
  then
    delete from goalrole_goalassociation where id = associationId;
  elseif goalName = 'countermeasure' and subGoalName = 'task'
  then
    delete from countermeasuretask_goalassociation where id = associationId;
  elseif goalName = 'goal' and subGoalName = 'domainproperty'
  then
    delete from goaldomainproperty_goalassociation where id = associationId;
  elseif goalName = 'goal' and subGoalName = 'obstacle'
  then
    delete from goalobstacle_goalassociation where id = associationId;
  elseif goalName = 'domainproperty' and subGoalName = 'obstacle'
  then
    delete from domainpropertyobstacle_goalassociation where id = associationId;
  elseif goalName = 'obstacle' and subGoalName = 'obstacle'
  then
    delete from obstacleobstacle_goalassociation where id = associationId;
  elseif goalName = 'obstacle' and subGoalName = 'goal'
  then
    delete from obstaclegoal_goalassociation where id = associationId;
  elseif goalName = 'obstacle' and subGoalName = 'requirement'
  then
    delete from obstaclerequirement_goalassociation where id = associationId;
  elseif goalName = 'obstacle' and subGoalName = 'misusecase'
  then
    delete from obstaclemisusecase_goalassociation where id = associationId;
  else
    delete from requirementrole_goalassociation where id = associationId;
  end if;

end
//

create function goalAssociationId(envName text,goalName text,subGoalName text,goalDimName text, subGoalDimName text) 
returns int
deterministic 
begin
  declare envId int;
  declare goalId int;
  declare subGoalId int;
  declare associationId int;

  select id into envId from environment where name = envName;
  select id into goalId from goal where name = goalName;
  select id into subGoalId from goal where name = subGoalName;

  if goalDimName = 'goal' and subGoalDimName = 'goal'
  then 
    select id into associationId from goalgoal_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  elseif goalDimName = 'goal' and subGoalDimName = 'requirement'
  then
    select id into associationId from goalrequirement_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  elseif goalDimName = 'goal' and subGoalDimName = 'task'
  then
    select id into associationId from goaltask_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  elseif goalDimName = 'goal' and subGoalDimName = 'usecase'
  then
    select id into associationId from goalusecase_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  elseif goalDimName = 'requirement' and subGoalDimName = 'goal'
  then
    select id into associationId from requirementgoal_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  elseif goalDimName = 'requirement' and subGoalDimName = 'requirement'
  then
    select id into associationId from requirementrequirement_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  elseif goalDimName = 'goal' and subGoalDimName = 'role'
  then
    select id into associationId from goalrole_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  else
    select id into associationId from requirementrole_goalassociation where environment_id = envId and goal_id = goalId and subgoal_id = subGoalId;
  end if;
  return associationId;
end
//

create procedure goalTargets(in subGoalId int, in envId int)
begin
  declare workingGoalId int;
  declare workingResponseId int;
  declare done int default 0;
  declare goalCursor cursor for select goal_id from goalgoal_goalassociation where environment_id = envId and subgoal_id = subGoalId and ref_type_id in (0,1);
  declare continue handler for not found set done = 1;

  select response_id into workingResponseId from response_goal where goal_id = subGoalId; 
  if workingResponseId is not null
  then
    insert into temp_target(target_name,response_name) 
    (
      select t.name,res.name from response res, risk ris, threat t where res.id = workingResponseId and res.risk_id = ris.id and ris.threat_id = t.id
    );
    insert into temp_target(target_name,response_name) 
    (
      select v.name,res.name from response res, risk ris, vulnerability v where res.id = workingResponseId and res.risk_id = ris.id and ris.vulnerability_id = v.id
    ); 
  end if; 

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into workingGoalId;
    if done = 1
    then
      leave goal_loop;
    end if;
    call goalTargets(workingGoalId,envId);
  end loop goal_loop;
  close goalCursor;
end
//

create procedure targetNames(in viewLabel text, in envName text)
begin
  declare envId int;
  declare reqId int;
  declare subGoalId int;
  declare workingGoalId int;
  declare workingResponseId int;
  declare done int default 0;
  declare goalCursor cursor for select goal_id from goalgoal_goalassociation where environment_id = envId and subgoal_id = subGoalId and ref_type_id in (0,1);
  declare goalReqCursor cursor for select goal_id from goalrequirement_goalassociation where subgoal_id = reqId and environment_id = envId;
  declare continue handler for not found set done = 1;

  select o.id into reqId from requirement o where o.name = viewLabel and o.version = (select max(i.version) from requirement i where i.id = o.id);

  select id into envId from environment where name = envName;
  drop table if exists temp_target;
  create temporary table temp_target (target_name VARCHAR(200) NOT NULL,response_name VARCHAR(200) NOT NULL);

  set done = 0;
  open goalReqCursor;  
  goalReq_loop: loop
    fetch goalReqCursor into subGoalId;
    if done = 1
    then
      leave goalReq_loop;
    end if;
    select response_id into workingResponseId from response_goal where goal_id = subGoalId; 
    if workingResponseId is not null
    then
      insert into temp_target(target_name,response_name) 
      (
        select t.name,res.name from response res, risk ris, threat t where res.id = workingResponseId and res.risk_id = ris.id and ris.threat_id = t.id
      );
      insert into temp_target(target_name,response_name) 
      (
        select v.name,res.name from response res, risk ris, vulnerability v where res.id = workingResponseId and res.risk_id = ris.id and ris.vulnerability_id = v.id
        
      ); 
    end if; 

    open goalCursor;
    goal_loop: loop
      fetch goalCursor into workingGoalId;
      if done = 1
      then
        leave goal_loop;
      end if;
    end loop goal_loop;
    call goalTargets(workingGoalId,envId);
    close goalCursor;
    set done = 0;
    end loop goalReq_loop;
  close goalReqCursor; 

  select distinct target_name,response_name from temp_target;
end
//

create procedure goalModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm, environment_asset ea where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id and rmr.asset_id = ea.asset_id and ea.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm, environment_asset ea where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id and rmr.asset_id = ea.asset_id and ea.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementgoal_goalassociation ga, environment e, requirement hg, reference_type rt, goal tg, asset_requirement rmr, asset rm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementgoal_goalassociation ga, environment e, requirement hg, reference_type rt, goal tg, environment_requirement rmr, environment rm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = rmr.requirement_id and rmr.environment_id = e.id
    union
    select ga.id id,e.name environment,concat(hrm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,concat(trm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrequirement_goalassociation ga, environment e, requirement hg, reference_type rt, requirement tg, asset_requirement hrmr, asset hrm, asset_requirement trmr, asset trm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and hg.id = hrmr.requirement_id and hrmr.asset_id = hrm.id and tg.id = trmr.requirement_id and trmr.asset_id = trm.id
    union
    select ga.id id,e.name environment,concat(he.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,concat(te.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrequirement_goalassociation ga, environment e, requirement hg, reference_type rt, requirement tg, environment_requirement her, environment  he, environment_requirement ter, environment te where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and hg.id = her.requirement_id and her.environment_id = he.id and tg.id = ter.requirement_id and ter.environment_id = te.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment, concat(rm.short_code,'-',r.label) goal_name, 'requirement' goal_dim,'and' ref_type,c.name subgoal_name,'countermeasure' subgoal_dim,0 alternative_id,'' rationale from requirement_countermeasure rc, environment e, requirement r, countermeasure c, asset_requirement rmr, asset rm where rc.environment_id = environmentId and rc.environment_id = e.id and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select -1 id,e.name environment, concat(rm.short_code,'-',r.label) goal_name, 'requirement' goal_dim,'and' ref_type,c.name subgoal_name,'countermeasure' subgoal_dim,0 alternative_id,'' rationale from requirement_countermeasure rc, environment e, requirement r, countermeasure c, environment_requirement rmr, environment rm where rc.environment_id = environmentId and rc.environment_id = e.id and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'conflict' ref_type,c.name subgoal_name,'countermeasure' subgoal_dim,0 alternative_id,concat('usability disconnect in countermeasure ',c.name) rationale from environment e, countermeasure_task_persona ctp, task t, countermeasure c where ctp.environment_id = e.id and ctp.task_id = t.id and ctp.countermeasure_id = c.id and ctp.environment_id = environmentId and (ctp.duration_id > 0 or ctp.frequency_id > 0 or ctp.demands_id > 0 or ctp.goalsupport_id > 0)
    union
    select ga.id id,e.name environment,hg.name goal_name,'countermeasure' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from countermeasuretask_goalassociation ga, environment e, countermeasure hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg, environment_goal eg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId and ga.environment_id = eg.environment_id and ga.goal_id = eg.goal_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'domainproperty' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from domainpropertyobstacle_goalassociation ga, environment e, domainproperty hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select -1 id,e.name environment, concat(a.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,t.name subgoal_name,'task' subgoal_dim,0 alternative_id,'' rationale from requirement_task rt, environment e, environment_task et, environment_asset ea, requirement r, task t, asset_requirement ar, asset a, reference_type ret where et.environment_id = environmentId and et.environment_id = e.id and et.task_id = t.id and et.environment_id = ea.environment_id and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rt.requirement_id and rt.task_id = t.id and rt.ref_type_id = ret.id
    union
    select -1 id,e.name environment, concat(e.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,t.name subgoal_name,'task' subgoal_dim,0 alternative_id,'' rationale from requirement_task rt, environment e, environment_task et, requirement r, task t, environment_requirement er, reference_type ret where et.environment_id = environmentId and et.environment_id = e.id and et.task_id = t.id and et.environment_id = er.environment_id and er.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rt.requirement_id and rt.task_id = t.id and rt.ref_type_id = ret.id
    union
    select -1 id,e.name environment, concat(a.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,u.name subgoal_name,'usecase' subgoal_dim,0 alternative_id,'' rationale from requirement_usecase ru, environment e, environment_usecase eu, environment_asset ea, requirement r, usecase u, asset_requirement ar, asset a, reference_type ret where eu.environment_id = environmentId and eu.environment_id = e.id and eu.usecase_id = u.id and eu.environment_id = ea.environment_id and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ru.requirement_id and ru.usecase_id = u.id and ru.ref_type_id = ret.id
    union
    select -1 id,e.name environment, concat(e.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,u.name subgoal_name,'usecase' subgoal_dim,0 alternative_id,'' rationale from requirement_usecase ru, environment e, environment_usecase eu, requirement r, usecase u, environment_requirement er, reference_type ret where eu.environment_id = environmentId and eu.environment_id = e.id and eu.usecase_id = u.id and eu.environment_id = er.environment_id and er.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ru.requirement_id and ru.usecase_id = u.id and ru.ref_type_id = ret.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, asset_requirement rmr, asset rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId and hg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, environment_requirement rmr, environment rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId and hg.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where et.environment_id = environmentId and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ev.environment_id = environmentId and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'goal' goal_dim,'and' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id, 'None' rationale from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_threat_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.environment_id = environmentId and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1 id,e.name environment,hg.name goal_name,'goal' goal_dim,'and' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id, 'None' rationale from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_vulnerability_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.environment_id = environmentId and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId;
/*    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id; */
  else
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm, environment_asset ea where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id and rmr.asset_id = ea.asset_id and ea.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm, environment_asset ea where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id and rmr.asset_id = ea.asset_id and ea.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id, ga.rationale from requirementgoal_goalassociation ga, environment e, requirement hg, reference_type rt, goal tg, asset_requirement rmr, asset rm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id, ga.rationale from requirementgoal_goalassociation ga, environment e, requirement hg, reference_type rt, goal tg, environment_requirement rmr, environment rm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select ga.id id,e.name environment,concat(hrm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,concat(trm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id, ga.rationale from requirementrequirement_goalassociation ga, environment e, requirement hg, reference_type rt, requirement tg, asset_requirement hrmr, asset hrm, asset_requirement trmr, asset trm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and hg.id = hrmr.requirement_id and hrmr.asset_id = hrm.id
    union
    select ga.id id,e.name environment,concat(hrm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,concat(trm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id, ga.rationale from requirementrequirement_goalassociation ga, environment e, requirement hg, reference_type rt, requirement tg, environment_requirement hrmr, environment hrm, environment_requirement trmr, environment trm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and hg.id = hrmr.requirement_id and hrmr.environment_id = hrm.id and tg.id and trmr.requirement_id and trmr.environment_id = trm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id, ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id, ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment, concat(rm.short_code,'-',r.label) goal_name, 'requirement' goal_dim,'and' ref_type,c.name subgoal_name,'countermeasure' subgoal_dim,0 alternative_id,'' rationale from requirement_countermeasure rc, environment e, requirement r, countermeasure c, asset_requirement rmr, asset rm where rc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rc.environment_id = e.id and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select -1 id,e.name environment, concat(rm.short_code,'-',r.label) goal_name, 'requirement' goal_dim,'and' ref_type,c.name subgoal_name,'countermeasure' subgoal_dim,0 alternative_id,'' rationale from requirement_countermeasure rc, environment e, requirement r, countermeasure c, environment_requirement rmr, environment rm where rc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rc.environment_id = e.id and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.countermeasure_id = c.id and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'conflict' ref_type,c.name subgoal_name,'countermeasure' subgoal_dim,0 alternative_id,concat('usability disconnect in countermeasure ',c.name) rationale from environment e, countermeasure_task_persona ctp, task t, countermeasure c where ctp.environment_id = e.id and ctp.task_id = t.id and ctp.countermeasure_id = c.id and ctp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and (ctp.duration_id > 0 or ctp.frequency_id > 0 or ctp.demands_id > 0 or ctp.goalsupport_id > 0)
    union
    select ga.id id,e.name environment,hg.name goal_name,'countermeasure' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from countermeasuretask_goalassociation ga, environment e, countermeasure hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id  in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg, environment_goal eg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.environment_id = eg.environment_id and ga.goal_id = eg.goal_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'domainproperty' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from domainpropertyobstacle_goalassociation ga, environment e, domainproperty hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment, concat(a.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,t.name subgoal_name,'task' subgoal_dim,0 alternative_id,'' rationale from requirement_task rt, environment e, environment_task et, environment_asset ea, requirement r, task t, asset_requirement ar, asset a, reference_type ret where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = e.id and et.task_id = t.id and et.environment_id = ea.environment_id and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rt.requirement_id and rt.task_id = t.id and rt.ref_type_id = ret.id
    union
    select -1 id,e.name environment, concat(e.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,t.name subgoal_name,'task' subgoal_dim,0 alternative_id,'' rationale from requirement_task rt, environment e, environment_task et, requirement r, task t, environment_requirement er, reference_type ret where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = e.id and et.task_id = t.id and et.environment_id = er.environment_id and er.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rt.requirement_id and rt.task_id = t.id and rt.ref_type_id = ret.id
    union
    select -1 id,e.name environment, concat(a.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,u.name subgoal_name,'usecase' subgoal_dim,0 alternative_id,'' rationale from requirement_usecase ru, environment e, environment_usecase eu, environment_asset ea, requirement r, usecase u, asset_requirement ar, asset a, reference_type ret where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.environment_id = e.id and eu.usecase_id = u.id and eu.environment_id = ea.environment_id and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ru.requirement_id and ru.usecase_id = u.id and ru.ref_type_id = ret.id
    union
    select -1 id,e.name environment, concat(e.short_code,'-',r.label) goal_name, 'requirement' goal_dim,ret.name ref_type,u.name subgoal_name,'usecase' subgoal_dim,0 alternative_id,'' rationale from requirement_usecase ru, environment e, environment_usecase eu, requirement r, usecase u, environment_requirement er, reference_type ret where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.environment_id = e.id and eu.usecase_id = u.id and eu.environment_id = er.environment_id and er.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = ru.requirement_id and ru.usecase_id = u.id and ru.ref_type_id = ret.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, asset_requirement rmr, asset rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, environment_requirement rmr, environment rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hg.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'goal' goal_dim,'and' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id, 'None' rationale from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_threat_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1 id,e.name environment,hg.name goal_name,'goal' goal_dim,'and' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id, 'None' rationale from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_vulnerability_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id;
  end if;
end
//

create procedure responsibilityModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'task' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,concat(tg.name,' performs ',hg.name) from task_persona tp, persona_role pr, role tg, task hg, environment e where tp.environment_id = environmentId and tp.environment_id = pr.environment_id and tp.task_id = hg.id and tp.persona_id = pr.persona_id and pr.role_id = tg.id and tp.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg,asset_requirement ar, asset a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id
    union
    select rg.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'goal' subgoal_dim,'0',rg.rationale from rolegoalrole_dependency rg, role hg, goal tg, environment e where rg.environment_id = environmentId and rg.depender_id = hg.id and rg.dependency_id = tg.id and rg.environment_id = e.id
    union
    select rt.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'task' subgoal_dim,'0',rt.rationale from roletaskrole_dependency rt, role hg, task tg, environment e where rt.environment_id = environmentId and rt.depender_id = hg.id and rt.dependency_id = tg.id and rt.environment_id = e.id
    union
    select ra.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'asset' subgoal_dim,'0',ra.rationale from roleassetrole_dependency ra, role hg, asset tg, environment e where ra.environment_id = environmentId and ra.depender_id = hg.id and ra.dependency_id = tg.id and ra.environment_id = e.id
    union
    select gr.id id,e.name environment,hg.name goal_name,'goal' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',gr.rationale from rolegoalrole_dependency gr, goal hg, role tg, environment e where gr.environment_id = environmentId and gr.dependency_id = hg.id and gr.dependee_id = tg.id and gr.environment_id = e.id
    union
    select tr.id id,e.name environment,hg.name goal_name,'task' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',tr.rationale from roletaskrole_dependency tr, task hg, role tg, environment e where tr.environment_id = environmentId and tr.dependency_id = hg.id and tr.dependee_id = tg.id and tr.environment_id = e.id
    union
    select ar.id id,e.name environment,hg.name goal_name,'asset' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',ar.rationale from roleassetrole_dependency ar, asset hg, role tg, environment e where ar.environment_id = environmentId and ar.dependency_id = hg.id and ar.dependee_id = tg.id and ar.environment_id = e.id;
  else
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'task' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,concat(tg.name,' performs ',hg.name) from task_persona tp, persona_role pr, role tg, task hg, environment e where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = pr.environment_id and tp.task_id = hg.id and tp.persona_id = pr.persona_id and pr.role_id = tg.id and tp.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, asset_requirement ar, asset a, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg,asset_requirement ar, asset a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id
    union
    select rg.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'goal' subgoal_dim,'0',rg.rationale from rolegoalrole_dependency rg, role hg, goal tg, environment e where rg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rg.depender_id = hg.id and rg.dependency_id = tg.id and rg.environment_id = e.id
    union
    select rt.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'task' subgoal_dim,'0',rt.rationale from roletaskrole_dependency rt, role hg, task tg, environment e where rt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rt.depender_id = hg.id and rt.dependency_id = tg.id and rt.environment_id = e.id
    union
    select ra.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'asset' subgoal_dim,'0',ra.rationale from roleassetrole_dependency ra, role hg, asset tg, environment e where ra.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ra.depender_id = hg.id and ra.dependency_id = tg.id and ra.environment_id = e.id
    union
    select gr.id id,e.name environment,hg.name goal_name,'goal' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',gr.rationale from rolegoalrole_dependency gr, goal hg, role tg, environment e where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.dependency_id = hg.id and gr.dependee_id = tg.id and gr.environment_id = e.id
    union
    select tr.id id,e.name environment,hg.name goal_name,'task' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',tr.rationale from roletaskrole_dependency tr, task hg, role tg, environment e where tr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tr.dependency_id = hg.id and tr.dependee_id = tg.id and tr.environment_id = e.id
    union
    select ar.id id,e.name environment,hg.name goal_name,'asset' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',ar.rationale from roleassetrole_dependency ar, asset hg, role tg, environment e where ar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ar.dependency_id = hg.id and ar.dependee_id = tg.id and ar.environment_id = e.id;
  end if;
end
//


create procedure subResponsibilityModel(in environmentName text, in roleName text)
begin
  declare environmentId int;
  declare compositeCount int;
  declare roleId int;
  select id into roleId from role where name = roleName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.subgoal_id = roleId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, rolegoalrole_dependency rgr, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.subgoal_id = rgr.depender_id and ga.goal_id = rgr.dependency_id and ga.environment_id = rgr.environment_id and  rgr.dependee_id= roleId
    union
    select -1 id,e.name environment,hg.name goal_name,'task' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,concat(tg.name,' performs ',hg.name) from task_persona tp, persona_role pr, role tg, task hg, environment e where tp.environment_id = environmentId and tp.environment_id = pr.environment_id and tp.task_id = hg.id and tp.persona_id = pr.persona_id and pr.role_id = tg.id and tp.environment_id = e.id and pr.role_id = roleId
    union
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and tg.id = roleId
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg,asset_requirement ar, asset a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id and tg.id = roleId
    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and tg.id = roleId
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and tg.id = roleId
    union
    select rg.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'goal' subgoal_dim,'0',rg.rationale from rolegoalrole_dependency rg, role hg, goal tg, environment e where rg.environment_id = environmentId and rg.depender_id = hg.id and rg.dependency_id = tg.id and rg.environment_id = e.id and hg.id = roleId
    union
    select rt.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'task' subgoal_dim,'0',rt.rationale from roletaskrole_dependency rt, role hg, task tg, environment e where rt.environment_id = environmentId and rt.depender_id = hg.id and rt.dependency_id = tg.id and rt.environment_id = e.id and hg.id = roleId
    union
    select ra.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'asset' subgoal_dim,'0',ra.rationale from roleassetrole_dependency ra, role hg, asset tg, environment e where ra.environment_id = environmentId and ra.depender_id = hg.id and ra.dependency_id = tg.id and ra.environment_id = e.id and hg.id = roleId
    union
    select gr.id id,e.name environment,hg.name goal_name,'goal' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',gr.rationale from rolegoalrole_dependency gr, goal hg, role tg, environment e where gr.environment_id = environmentId and gr.dependency_id = hg.id and gr.dependee_id = tg.id and gr.environment_id = e.id and tg.id = roleId
    union
    select tr.id id,e.name environment,hg.name goal_name,'task' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',tr.rationale from roletaskrole_dependency tr, task hg, role tg, environment e where tr.environment_id = environmentId and tr.dependency_id = hg.id and tr.dependee_id = tg.id and tr.environment_id = e.id and tg.id = roleId
    union
    select ar.id id,e.name environment,hg.name goal_name,'asset' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',ar.rationale from roleassetrole_dependency ar, asset hg, role tg, environment e where ar.environment_id = environmentId and ar.dependency_id = hg.id and ar.dependee_id = tg.id and ar.environment_id = e.id and tg.id = roleId; 
  else
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, rolegoalrole_dependency rgr, environment e, goal hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.subgoal_id = rgr.depender_id and ga.goal_id = rgr.dependency_id and ga.environment_id = rgr.environment_id and  rgr.dependee_id= roleId
    union 
    select -1 id,e.name environment,hg.name goal_name,'task' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,concat(tg.name,' performs ',hg.name) from task_persona tp, persona_role pr, role tg, task hg, environment e where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = pr.environment_id and tp.task_id = hg.id and tp.persona_id = pr.persona_id and pr.role_id = tg.id and tp.environment_id = e.id and pr.role_id = roleId
    union 
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and tg.id = roleId
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg,asset_requirement ar, asset a where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id and tg.id = roleId
    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and tg.id = roleId
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and tg.id = roleId
    union
    select rg.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'goal' subgoal_dim,'0',rg.rationale from rolegoalrole_dependency rg, role hg, goal tg, environment e where rg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rg.depender_id = hg.id and rg.dependency_id = tg.id and rg.environment_id = e.id and hg.id = roleId
    union
    select rt.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'task' subgoal_dim,'0',rt.rationale from roletaskrole_dependency rt, role hg, task tg, environment e where rt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rt.depender_id = hg.id and rt.dependency_id = tg.id and rt.environment_id = e.id and hg.id = roleId
    union
    select ra.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'asset' subgoal_dim,'0',ra.rationale from roleassetrole_dependency ra, role hg, asset tg, environment e where ra.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ra.depender_id = hg.id and ra.dependency_id = tg.id and ra.environment_id = e.id and hg.id = roleId
    union
    select gr.id id,e.name environment,hg.name goal_name,'goal' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',gr.rationale from rolegoalrole_dependency gr, goal hg, role tg, environment e where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.dependency_id = hg.id and gr.dependee_id = tg.id and gr.environment_id = e.id and tg.id = roleId
    union
    select tr.id id,e.name environment,hg.name goal_name,'task' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',tr.rationale from roletaskrole_dependency tr, task hg, role tg, environment e where tr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tr.dependency_id = hg.id and tr.dependee_id = tg.id and tr.environment_id = e.id and tg.id = roleId
    union
    select -1 id,e.name environment,hg.name goal_name,'task' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,concat(tg.name,' performs ',hg.name) from task_persona tp, persona_role pr, role tg, task hg, environment e where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = pr.environment_id and tp.task_id = hg.id and tp.persona_id = pr.persona_id and pr.role_id = tg.id and tp.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'response' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from responserole_goalassociation ga, environment e, response hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, asset_requirement ar, asset a, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementrole_goalassociation ga, environment e, requirement hg, reference_type rt, role tg,asset_requirement ar, asset a where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id
    union
    select rg.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'goal' subgoal_dim,'0',rg.rationale from rolegoalrole_dependency rg, role hg, goal tg, environment e where rg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rg.depender_id = hg.id and rg.dependency_id = tg.id and rg.environment_id = e.id
    union
    select rt.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'task' subgoal_dim,'0',rt.rationale from roletaskrole_dependency rt, role hg, task tg, environment e where rt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and rt.depender_id = hg.id and rt.dependency_id = tg.id and rt.environment_id = e.id
    union
    select ra.id id,e.name environment,hg.name goal_name,'role' goal_dim,'depend' ref_type, tg.name subgoal_name,'asset' subgoal_dim,'0',ra.rationale from roleassetrole_dependency ra, role hg, asset tg, environment e where ra.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ra.depender_id = hg.id and ra.dependency_id = tg.id and ra.environment_id = e.id
    union
    select gr.id id,e.name environment,hg.name goal_name,'goal' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',gr.rationale from rolegoalrole_dependency gr, goal hg, role tg, environment e where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.dependency_id = hg.id and gr.dependee_id = tg.id and gr.environment_id = e.id
    union
    select tr.id id,e.name environment,hg.name goal_name,'task' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',tr.rationale from roletaskrole_dependency tr, task hg, role tg, environment e where tr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tr.dependency_id = hg.id and tr.dependee_id = tg.id and tr.environment_id = e.id
    union 
    select ar.id id,e.name environment,hg.name goal_name,'asset' goal_dim,'depend' ref_type, tg.name subgoal_name,'role' subgoal_dim,'0',ar.rationale from roleassetrole_dependency ar, asset hg, role tg, environment e where ar.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ar.dependency_id = hg.id and ar.dependee_id = tg.id and ar.environment_id = e.id;
  end if;
end
//

create procedure taskModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'task_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from task_persona tp, environment e, task t, persona p where tp.environment_id = environmentId and tp.environment_id = e.id and tp.task_id = t.id and tp.persona_id = p.id
    union
    select -1 id,e.name environment,r.name goal_name,'role' goal_dim,'rolepersona_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from persona_role pr, task_persona tp, environment e, environment_usecase eu, role r, persona p where pr.environment_id = environmentId and pr.environment_id = e.id and pr.persona_id = p.id and pr.role_id = r.id and pr.persona_id = tp.persona_id and tp.environment_id = pr.environment_id and tp.environment_id = eu.environment_id
    union
    select -1 id,e.name environment,r.name goal_name,'role' goal_dim,'rolepersona_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from persona_role pr, task_persona tp, environment e, environment_task et, role r, persona p where pr.environment_id = environmentId and pr.environment_id = e.id and pr.persona_id = p.id and pr.role_id = r.id and pr.persona_id = tp.persona_id and tp.environment_id = pr.environment_id and tp.environment_id = et.environment_id
    union
    select -1 id,e.name environment,t.name goal_name,'usecase' goal_dim,'usecase_association' ref_type,p.name subgoal_name,'role' subgoal_dim,'0' alternative_id, '' rationale from usecase_role tp, environment e, environment_usecase eu, usecase t, role p where eu.environment_id = environmentId and eu.environment_id = e.id and eu.usecase_id = tp.usecase_id and tp.usecase_id = t.id and tp.role_id = p.id
    union
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'taskasset_association' ref_type,a.name subgoal_name,'asset' subgoal_dim,'0' alternative_id, '&lt;&lt;uses&gt;&gt;' rationale from task_asset ta, environment e, task t, asset a where ta.environment_id = environmentId and ta.environment_id = e.id and ta.task_id = t.id and ta.asset_id = a.id
    union
    select -1 id,e.name environment,t.name goal_name,'usecase' goal_dim,'usecaseasset_association' ref_type,a.name subgoal_name,'asset' subgoal_dim,'0' alternative_id, '&lt;&lt;uses&gt;&gt;' rationale from usecase_asset ta, environment e, usecase t, asset a where ta.environment_id = environmentId and ta.environment_id = e.id and ta.usecase_id = t.id and ta.asset_id = a.id
    union
    select -1 id,e.name environment,u.name goal_name,'usecase' goal_dim,'usecasetask_association' ref_type,t.name subgoal_name,'task' subgoal_dim,'0' alternative_id, '&lt;&lt;consequence&gt;&gt;' rationale from usecase_task ut, environment e, usecase u, task t, environment_usecase eu, environment_task et where eu.environment_id = environmentId and eu.environment_id = e.id and eu.environment_id = et.environment_id and ut.usecase_id = eu.usecase_id and eu.usecase_id = u.id and ut.task_id = et.task_id and et.task_id = t.id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecase_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, environment_misusecase em, risk r, threat_attacker ta,attacker a,environment e, environment_attacker ea where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and mc.id = em.misusecase_id and em.environment_id = e.id and em.environment_id = ta.environment_id and ta.attacker_id = a.id and em.environment_id = environmentId and ta.attacker_id = ea.attacker_id and ta.environment_id = ea.environment_id
    union
    select -1 id,e.name environment,ro.name goal,'role' goal_dim,'roleattacker_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, environment_misusecase em, risk r, threat_attacker ta,attacker a,environment e, environment_attacker ea, attacker_role ar, role ro where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and mc.id = em.misusecase_id and em.environment_id = e.id and em.environment_id = ta.environment_id and ta.attacker_id = a.id and em.environment_id = environmentId and ta.attacker_id = ea.attacker_id and ta.environment_id = ea.environment_id and ta.attacker_id = ar.attacker_id and ta.environment_id = ar.environment_id and ar.role_id = ro.id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasethreatasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;',t.name,' threatens&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_threat ta,asset a, threat t, environment_vulnerability ev, environment e, environment_misusecase em where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and mc.id = em.misusecase_id and em.environment_id = environmentId and em.environment_id = ta.environment_id and ta.environment_id = e.id and ta.asset_id = a.id and r.threat_id = t.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = ta.environment_id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasevulnerabilityasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;exploits ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_vulnerability va,asset a, vulnerability v, environment_threat et, environment e, environment_misusecase em where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = va.vulnerability_id and mc.id = em.misusecase_id and em.environment_id = environmentId and em.environment_id = va.environment_id and va.environment_id = e.id and r.threat_id = et.threat_id and et.environment_id = va.environment_id and va.asset_id = a.id and r.vulnerability_id = v.id
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasethreat_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;',r.name,' threatens&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_threat tha, threat th, task_asset taa,task t, environment_task et, environment e, environment_vulnerability ev, environment_threat eth where m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = tha.threat_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.threat_id = th.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = environmentId and r.threat_id = eth.threat_id and eth.environment_id = environmentId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, task_asset taa,task t, environment_task et, environment e, vulnerability v, environment_vulnerability ev, environment_threat eth where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id and r.threat_id = eth.threat_id and eth.environment_id = environmentId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = environmentId
    union
    select -1 id,e.name environment,t.name goal_dim,'usecase' goal_dim,'usecasemisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, usecase_asset taa,usecase t, environment_usecase et, environment e, vulnerability v, environment_vulnerability ev, environment_threat eth where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.usecase_id = t.id and t.id = et.usecase_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id and r.threat_id = eth.threat_id and eth.environment_id = environmentId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = environmentId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, usecase_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, usecase_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, task tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = tas.id
    union
    select -1 id,e.name environment,tas.name goal_name, 'usecase' goal_dim,'usecasemisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, usecase tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, usecase_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.usecase_id = tas.id
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, task tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = tas.id
    union
    select -1 id,e.name environment,tas.name goal_name, 'usecase' goal_dim,'usecasemisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, usecase tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, usecase_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.usecase_id = tas.id;
  else
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'task_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from task_persona tp, environment e, task t, persona p where tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = e.id and tp.task_id = t.id and tp.persona_id = p.id
    union
    select -1 id,e.name environment,r.name goal_name,'role' goal_dim,'rolepersona_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from persona_role pr, task_persona tp, environment e, role r, persona p, environment_usecase eu where pr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and pr.environment_id = e.id and pr.persona_id = p.id and pr.role_id = r.id and pr.persona_id = tp.persona_id and tp.environment_id = pr.environment_id and tp.environment_id = eu.environment_id
    union
    select -1 id,e.name environment,r.name goal_name,'role' goal_dim,'rolepersona_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from persona_role pr, task_persona tp, environment e, role r, persona p, environment_task et where pr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and pr.environment_id = e.id and pr.persona_id = p.id and pr.role_id = r.id and pr.persona_id = tp.persona_id and tp.environment_id = pr.environment_id and tp.environment_id = et.environment_id
    union
    select -1 id,e.name environment,t.name goal_name,'usecase' goal_dim,'usecase_association' ref_type,p.name subgoal_name,'role' subgoal_dim,'0' alternative_id, '' rationale from usecase_role tp, environment_usecase eu, environment e, usecase t, role p where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.environment_id = e.id and eu.usecase_id = tp.usecase_id and tp.usecase_id = t.id and tp.role_id = p.id
    union
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'taskasset_association' ref_type,a.name subgoal_name,'asset' subgoal_dim,'0' alternative_id, '&lt;&lt;uses&gt;&gt;' rationale from task_asset ta, environment e, task t, asset a where ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.environment_id = e.id and ta.task_id = t.id and ta.asset_id = a.id
    union
    select -1 id,e.name environment,u.name goal_name,'usecase' goal_dim,'usecasetask_association' ref_type,t.name subgoal_name,'task' subgoal_dim,'0' alternative_id, '&lt;&lt;consequence&gt;&gt;' rationale from usecase_task ut, environment e, usecase u, task t, environment_usecase eu, environment_task et where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.environment_id = e.id and eu.environment_id = et.environment_id and ut.usecase_id = eu.usecase_id and eu.usecase_id = u.id and ut.task_id = et.task_id and et.task_id = t.id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecase_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, risk r, threat_attacker ta,attacker a,environment e, environment_misusecase em where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and mc.id = em.misusecase_id and em.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and em.environment_id = ta.environment_id and ta.environment_id = e.id and ta.attacker_id = a.id
    union
    select -1 id,e.name environment,ro.name goal,'role' goal_dim,'roleattacker_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, environment_misusecase em, risk r, threat_attacker ta,attacker a,environment e, environment_attacker ea, attacker_role ar, role ro where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and mc.id = em.misusecase_id and em.environment_id = e.id and em.environment_id = ta.environment_id and ta.attacker_id = a.id and em.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.attacker_id = ea.attacker_id and ta.environment_id = ea.environment_id and ta.attacker_id = ar.attacker_id and ta.environment_id = ar.environment_id and ar.role_id = ro.id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasethreatasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;',t.name,' threatens&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_threat ta,asset a, threat t, environment e, environment_vulnerability ev, environment_misusecase em where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and mc.id = em.misusecase_id and em.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and em.environment_id = ta.environment_id and ta.environment_id = e.id and ta.asset_id = a.id and r.threat_id = t.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = ta.environment_id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasevulnerabilityasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;exploits ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_vulnerability va,asset a, vulnerability v, environment e, environment_threat et, environment_misusecase em where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = va.vulnerability_id and va.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and va.environment_id = em.environment_id and em.misusecase_id = mc.id and va.environment_id = e.id and va.asset_id = a.id and r.vulnerability_id = v.id and r.threat_id = et.threat_id and et.environment_id = va.environment_id
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasethreat_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;',r.name,' threatens&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_threat tha, threat th, task_asset taa,task t, environment_task et, environment e where m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = tha.threat_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.threat_id = th.id
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, task_asset taa,task t, environment_task et, environment e, vulnerability v where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, task tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = tas.id
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, task tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = tas.id;
  end if;
end
//

create procedure addTaskAsset(in taskId int,in assetName text,in environmentName text)
begin
  declare assetId int;
  declare environmentId int;
  select id into assetId from asset where name = assetName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into task_asset(asset_id,task_id,environment_id) values (assetId,taskId,environmentId);
end
//

create procedure taskAssets(in taskId int, in environmentId int)
begin
  select a.name from asset a, task_asset ta where ta.task_id = taskId and ta.environment_id = environmentId and ta.asset_id = a.id;
end
//

create procedure addRequirementRole(in associationId int, in cmName text, in roleName text,in viewLabel text,in envName text)
begin
  declare roleId int;
  declare envId int;
  declare reqId int;
  declare rationaleText varchar(1000);
  declare shortCode varchar(50);
  declare reqLabel int;

  set rationaleText = concat('Role ',roleName,' is responsible for Countermeasure ',cmName);
  select id into roleId from role where name = roleName limit 1;
  select id into envId from environment where name = envName limit 1;

  select o.id into reqId from requirement o where o.name = viewLabel and o.version = (select max(i.version) from requirement i where i.id = o.id);
  insert into requirementrole_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values (associationId,envId,reqId,3,roleId,0,rationaleText);
end
//

create procedure updateRequirementRole(in associationId int, in cmName text, in roleName text,in viewLabel text,in envName text)
begin
  declare roleId int;
  declare envId int;
  declare reqId int;
  declare rationaleText varchar(1000);
  declare shortCode varchar(50);
  declare reqLabel int;

  set rationaleText = concat('Role ',roleName,' is responsible for Countermeasure ',cmName);
  select id into roleId from role where name = roleName limit 1;
  select id into envId from environment where name = envName limit 1;
  select o.id into reqId from requirement o where o.name = viewLabel and o.version = (select max(i.version) from requirement i where i.id = o.id);
  insert into requirementrole_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale) values (associationId,envId,reqId,3,roleId,0,rationaleText);
end
//

create procedure roleDependents(in roleId int)
begin
  declare pId int;
  declare pName varchar(50);
  declare pRoles int;
  declare done int default 0;
  declare pCursor cursor for select distinct p.id,p.name from persona_role pr, persona p where pr.role_id = roleId and pr.persona_id = p.id;  
  declare continue handler for not found set done = 1;

  open pCursor;
  p_loop: loop
    fetch pCursor into pId,pName;
    if done = 1
    then
      leave p_loop;
    end if;
    select count(distinct persona_id) into pRoles from persona_role where role_id = roleId;
    if (pRoles = 1)
    then
      insert into temp_persona values(pId,pName);
    end if;
  end loop p_loop;
  close pCursor;
end
//

create procedure goalCountermeasures(in goalId int, in responseId int, in envId int)
begin
  declare reqId int;
  declare subGoalId int;
  declare cmId int;
  declare done int default 0;
  declare grCursor cursor for select distinct subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id = envId;
  declare goalCursor cursor for select distinct subgoal_id from goalgoal_goalassociation gr where goal_id = goalId and environment_id = envId;

  declare continue handler for not found set done = 1;

  set done = 0;
  open grCursor;
  gr_loop: loop
    fetch grCursor into reqId;
    if done = 1
    then
      leave gr_loop;
    else  
      select countermeasure_id into cmId from requirement_countermeasure where requirement_id = reqId and environment_id = envId;
      if cmId is not null
      then
        insert into temp_countermeasure values(responseId,cmId);
      end if;
    end if;
  end loop gr_loop;
  close grCursor;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into subGoalId;
    if done = 1
    then
      leave goal_loop;
    else
      call goalCountermeasures(subGoalId,responseId,envId);
    end if;
  end loop goal_loop;
  close goalCursor;
end
//

create procedure mitigatingMultiEnvCountermeasures(in responseId int, in envId int)
begin
  declare done int default 0;
  declare subEnvId int;
  declare firstCall int default 1;
  declare envCursor cursor for select c.id from composite_environment cc, environment c where cc.composite_environment_id = envId and cc.environment_id = c.id;
  declare continue handler for not found set done = 1;

  open envCursor;
  env_loop: loop
    fetch envCursor into subEnvId;
    if done = 1
    then
      leave env_loop;
    else
      call mitigatingCountermeasures(responseId,subEnvId,firstCall);
      set firstCall = 0;
    end if;
  end loop env_loop;
  close envCursor;
end
//

create procedure mitigatingCountermeasures(in responseId int,in envId int,in dropTableFlag int)
begin
  declare responseGoalId int;
  declare subGoalId int;
  declare reqId int;
  declare done int default 0;
  declare responseCursor cursor for select id from response where risk_id = riskId;
  declare continue handler for not found set done = 1;

  if dropTableFlag = 1
  then
    drop table if exists temp_countermeasure;
    create temporary table temp_countermeasure (response_id int not null, countermeasure_id int not null);
  end if;

  call responseCountermeasures(responseId,envId);
end
//

create procedure responseCountermeasures(in responseId int, in envId int)
begin
  declare responseGoalId int;
  declare subGoalId int;
  declare reqId int;
  declare cmId int;
  declare done int default 0;

  insert into temp_countermeasure
  select response_id,countermeasure_id from countermeasure_vulnerability_response_target where response_id= responseId and environment_id = envId
  union
  select response_id,countermeasure_id from countermeasure_threat_response_target where response_id = responseId and environment_id = envId;

/*  declare goalCursor cursor for select distinct subgoal_id from goalgoal_goalassociation gr where goal_id = responseGoalId and environment_id = envId;
  declare continue handler for not found set done = 1;

  select goal_id into responseGoalId from response_goal where response_id = responseId;
   
  select subgoal_id into reqId from goalrequirement_goalassociation where goal_id = responseGoalId and environment_id = envId;
  if reqId is not null
  then
    select countermeasure_id into cmId from requirement_countermeasure where requirement_id = reqId and environment_id = envId;
    if cmId is not null
    then
      insert into temp_countermeasure values(responseId,cmId);
    end if;
  end if;
  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into subGoalId;
    if done = 1
    then
      leave goal_loop;
    else
      call goalCountermeasures(subGoalId,responseId,envId);
    end if;
  end loop goal_loop;
  close goalCursor; */
end
//


create procedure threatAssetProperties(in threatId int, in envId int)
begin
  declare done int default 0;
  declare compositeCount int;
  declare assetId int;
  declare cProp int default 0;
  declare iProp int default 0;
  declare avProp int default 0;
  declare acProp int default 0;
  declare anProp int default 0;
  declare panProp int default 0;
  declare unlProp int default 0;
  declare unoProp int default 0;
  declare tmpCProperty int default 0;
  declare tmpIProperty int default 0;
  declare tmpAvProperty int default 0;
  declare tmpAcProperty int default 0;
  declare tmpAnProperty int default 0;
  declare tmpPanProperty int default 0;
  declare tmpUnlProperty int default 0;
  declare tmpUnoProperty int default 0;

  declare taCursor cursor for select distinct asset_id from asset_threat where threat_id = threatId and environment_id = envId;
  declare tacCursor cursor for select distinct asset_id from asset_threat where threat_id = threatId and environment_id in (select environment_id from composite_environment where composite_environment_id = envId);
  declare continue handler for not found set done = 1;

  drop table if exists temp_threatassetproperties;
  create temporary table temp_threatassetproperties (c_property int,i_property int,av_property int, ac_property int, an_property int, pan_property int, unl_property int, uno_property int);

  select count(*) into compositeCount from composite_environment where composite_environment_id = envId; 

  if compositeCount > 0
  then
    open tacCursor;
    tac_loop: loop
      fetch tacCursor into assetId;
      if done = 1
      then
        leave tac_loop;
      else
        call suppressedAssetProperties(assetId,envId);
        select cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty into tmpCProperty,tmpIProperty,tmpAvProperty,tmpAcProperty,tmpAnProperty,tmpPanProperty,tmpUnlProperty,tmpUnoProperty from temp_assetproperties;
        set cProp = cProp + tmpCProperty;  
        set iProp = iProp + tmpIProperty;  
        set avProp = avProp + tmpAvProperty;  
        set acProp = acProp + tmpAcProperty;  
        set anProp = anProp + tmpAnProperty;  
        set panProp = panProp + tmpPanProperty;  
        set unlProp = unlProp + tmpUnlProperty;  
        set unoProp = unoProp + tmpUnoProperty;  
      end if;
    end loop tac_loop;
    close tacCursor;
  else
    open taCursor;
    ta_loop: loop
      fetch taCursor into assetId;
      if done = 1
      then
        leave ta_loop;
      else
        call suppressedAssetProperties(assetId,envId);
        select cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty into tmpCProperty,tmpIProperty,tmpAvProperty,tmpAcProperty,tmpAnProperty,tmpPanProperty,tmpUnlProperty,tmpUnoProperty from temp_assetproperties;
        set cProp = cProp + tmpCProperty;  
        set iProp = iProp + tmpIProperty;  
        set avProp = avProp + tmpAvProperty;  
        set acProp = acProp + tmpAcProperty;  
        set anProp = anProp + tmpAnProperty;  
        set panProp = panProp + tmpPanProperty;  
        set unlProp = unlProp + tmpUnlProperty;  
        set unoProp = unoProp + tmpUnoProperty;  
      end if;
    end loop ta_loop;
    close taCursor;
  end if; 
  insert into temp_threatassetproperties select cProp,iProp,avProp,acProp,anProp,panProp,unlProp,unoProp;
end
//

create procedure mitigatingValues(in responseId int, in envId int)
begin
  declare done int default 0;
  declare cmId int default -1;
  declare cmCProperty int default 0;
  declare cmIProperty int default 0;
  declare cmAvProperty int default 0;
  declare cmAcProperty int default 0;
  declare cmAnProperty int default 0;
  declare cmPanProperty int default 0;
  declare cmUnlProperty int default 0;
  declare cmUnoProperty int default 0;
  declare workingCProperty int default 0;
  declare workingIProperty int default 0;
  declare workingAvProperty int default 0;
  declare workingAcProperty int default 0;
  declare workingAnProperty int default 0;
  declare workingPanProperty int default 0;
  declare workingUnlProperty int default 0;
  declare workingUnoProperty int default 0;
  declare compositeCount int default 0;
  declare mitigatingLikelihoods int default 0;
  declare mlhood int default 0;
  declare msev int default 0;
  declare mitigatingSeverities int default 0;
  declare cmNo int default 0;
  declare msComments varchar(1000) default '';
  declare mlComments varchar(1000) default '';
  declare msCurrentComments varchar(1000) default '';
  declare mlCurrentComments varchar(1000) default '';
  declare cmCursor cursor for select distinct countermeasure_id from temp_countermeasure where response_id = responseId;
  declare continue handler for not found set done = 1;

  drop table if exists temp_mitigatingvalues;
  create temporary table temp_mitigatingvalues (likelihood int, severity int,cProperty int,iProperty int,avProperty int, acProperty int, anProperty int, panProperty int, unlProperty int, unoProperty int, ms_comments varchar(1000),ml_comments varchar(1000));

  select count(*) into compositeCount from composite_environment where composite_environment_id = envId; 
  if (compositeCount > 0)
  then
    call mitigatingMultiEnvCountermeasures(responseId,envId);
  else
    call mitigatingCountermeasures(responseId,envId,1);
  end if;

  open cmCursor;
  cm_loop: loop
    fetch cmCursor into cmId;
    if done = 1
    then
      leave cm_loop;
    else
      set cmNo = cmNo + 1;
      call mitigatingLikelihood(cmId,responseId,envId,mlhood,mlCurrentComments);
      if (mlCurrentComments is not null)
      then
        set mlComments = concat(mlComments,'  ',mlCurrentComments);
      end if;
      set mitigatingLikelihoods = mitigatingLikelihoods + mlhood;
      call mitigatingSeverity(cmId,responseId,envId,msev,msCurrentComments);
      if (msCurrentComments is not null)
      then
        set msComments = concat(msComments,'  ',msCurrentComments);
      end if;

      set mitigatingSeverities = mitigatingSeverities + msev;
      call suppressedCountermeasureProperties(cmId,envId);
      select c_property,i_property,av_property,ac_property,an_property,pan_property,unl_property,uno_property into workingCProperty,workingIProperty,workingAvProperty,workingAcProperty,workingAnProperty,workingPanProperty,workingUnlProperty,workingUnoProperty from temp_countermeasureproperties;
      set cmCProperty = cmCProperty + workingCProperty;
      set cmIProperty = cmIProperty + workingIProperty;
      set cmAvProperty = cmAvProperty + workingAvProperty; 
      set cmAcProperty = cmAcProperty + workingAcProperty; 
      set cmAnProperty = cmAnProperty + workingAnProperty; 
      set cmPanProperty = cmPanProperty + workingPanProperty; 
      set cmUnlProperty = cmUnlProperty + workingUnlProperty; 
      set cmUnoProperty = cmUnoProperty + workingUnoProperty; 
    end if;
  end loop cm_loop;
  close cmCursor;

  insert into temp_mitigatingvalues values(round(mitigatingLikelihoods/cmNo),round(mitigatingSeverities/cmNo),round(cmCProperty/cmNo),round(cmIProperty/cmNo),round(cmAvProperty/cmNo),round(cmAcProperty/cmNo),round(cmAnProperty/cmNo),round(cmPanProperty/cmNo),round(cmUnlProperty/cmNo),round(cmUnoProperty/cmNo),msComments,mlComments);
end
//

create procedure riskScore(in threatName text, in vulName text, envName text, riskName text)
begin
  declare done int default 0;
  declare responseNo int default 0;
  declare threatId int;
  declare vulId int;
  declare envId int;
  declare responseName varchar(50);
  declare likelihoodName varchar(50);
  declare severityName varchar(50);
  declare threatLikelihood int;
  declare vulSeverity int;
  declare riskId int;
  declare responseId int default -1;
  declare preScore int;
  declare postScore int;
  declare detailsBuf varchar(1000);
  declare responseCursor cursor for select distinct id,name from response where risk_id = riskId;
  declare continue handler for not found set done = 1;

  select id into threatId from threat where name = threatName; 
  select id into vulId from vulnerability where name = vulName;

  select id into envId from environment where name = envName;
  if envId is null
  then
    select distinct cc.composite_environment_id into envId from composite_environment cc, environment e where cc.composite_environment_id = e.id and e.name = envName;
  end if;

  select threat_likelihood(threatId,envId) into likelihoodName;
  select vulnerability_severity(vulId,envId) into severityName;
  select id into threatLikelihood from likelihood where name = likelihoodName;
  select id into vulSeverity from severity where name = severityName;
  drop table if exists temp_riskscore;
  create temporary table temp_riskscore (response_name varchar(50),preScore int, postScore int, details varchar(1000));

  if riskName != ''
  then
    select id into riskId from risk where name = riskName;
    open responseCursor;
    response_loop: loop
      fetch responseCursor into responseId,responseName;
      if done = 1
      then
        leave response_loop;
      end if;
      call calculateRiskScore(threatId,vulId,threatLikelihood,vulSeverity,envId,responseId,preScore,postScore,detailsBuf); 
      insert into temp_riskscore values(responseName,ifnull(preScore,0),ifnull(postScore,0),ifnull(detailsBuf,''));
      set responseNo = responseNo + 1;
    end loop response_loop;
    close responseCursor;
    if responseNo = 0
    then
      call calculateRiskScore(threatId,vulId,threatLikelihood,vulSeverity,envId,-1,preScore,postScore,detailsBuf); 
      insert into temp_riskscore values('None',ifnull(preScore,0),ifnull(postScore,0),ifnull(detailsBuf,''));
    end if;
  else
    call calculateRiskScore(threatId,vulId,threatLikelihood,vulSeverity,envId,-1,preScore,postScore,detailsBuf); 
    insert into temp_riskscore values('None',ifnull(preScore,0),ifnull(postScore,0),ifnull(detailsBuf,''));
  end if;
  select response_name,preScore,postScore,details from temp_riskscore;
end
//


create procedure calculateRiskScore(in threatId int, in vulId int, in threatLikelihood int, in vulSeverity int, in envId int, in responseId int, out preScore int, out postScore int, out detailsBuf varchar(1000))
begin
  declare likelihood int default 0;
  declare severity int default 0;
  declare mitigatingLikelihoods int default 0;
  declare mitigatingSeverities int default 0;
  declare mitigatingCValue int default 0;
  declare mitigatingIValue int default 0;
  declare mitigatingAvValue int default 0;
  declare mitigatingAcValue int default 0;
  declare mitigatingAnValue int default 0;
  declare mitigatingPanValue int default 0;
  declare mitigatingUnlValue int default 0;
  declare mitigatingUnoValue int default 0;
  declare threatCProperty int default 0;
  declare threatIProperty int default 0;
  declare threatAvProperty int default 0;
  declare threatAcProperty int default 0;
  declare threatAnProperty int default 0;
  declare threatPanProperty int default 0;
  declare threatUnlProperty int default 0;
  declare threatUnoProperty int default 0;
  declare assetCProperty int default 0;
  declare assetIProperty int default 0;
  declare assetAvProperty int default 0;
  declare assetAcProperty int default 0;
  declare assetAnProperty int default 0;
  declare assetPanProperty int default 0;
  declare assetUnlProperty int default 0;
  declare assetUnoProperty int default 0;
  declare preAssetCValue int default 0;
  declare preAssetIValue int default 0;
  declare preAssetAvValue int default 0;
  declare preAssetAcValue int default 0;
  declare preAssetAnValue int default 0;
  declare preAssetPanValue int default 0;
  declare preAssetUnlValue int default 0;
  declare preAssetUnoValue int default 0;
  declare assetCValue int default 0;
  declare assetIValue int default 0;
  declare assetAvValue int default 0;
  declare assetAcValue int default 0;
  declare assetAnValue int default 0;
  declare assetPanValue int default 0;
  declare assetUnlValue int default 0;
  declare assetUnoValue int default 0;
  declare preRiskCValue int default 0;
  declare preRiskIValue int default 0;
  declare preRiskAvValue int default 0;
  declare preRiskAcValue int default 0;
  declare preRiskAnValue int default 0;
  declare preRiskPanValue int default 0;
  declare preRiskUnlValue int default 0;
  declare preRiskUnoValue int default 0;
  declare riskCValue int default 0;
  declare riskIValue int default 0;
  declare riskAvValue int default 0;
  declare riskAcValue int default 0;
  declare riskAnValue int default 0;
  declare riskPanValue int default 0;
  declare riskUnlValue int default 0;
  declare riskUnoValue int default 0;
  declare msComments varchar(1000) default '';
  declare mlComments varchar(1000) default '';
  if responseId != -1
  then
    call mitigatingValues(responseId,envId);
    select * into mitigatingLikelihoods,mitigatingSeverities,mitigatingCValue,mitigatingIValue,mitigatingAvValue,mitigatingAcValue,mitigatingAnValue,mitigatingPanValue,mitigatingUnlValue,mitigatingUnoValue,msComments,mlComments from temp_mitigatingvalues;
    if mitigatingLikelihoods is null
    then
      set mitigatingLikelihoods = 0;
    end if;
    if mitigatingSeverities is null
    then
      set mitigatingSeverities = 0;
    end if;
    if mitigatingCValue is null
    then
      set mitigatingCValue = 0;
    end if;
    if mitigatingIValue is null
    then
      set mitigatingIValue = 0;
    end if;
    if mitigatingAvValue is null
    then
      set mitigatingAvValue = 0;
    end if;
    if mitigatingAcValue is null
    then
      set mitigatingAcValue = 0;
    end if;
    if mitigatingAnValue is null
    then
      set mitigatingAnValue = 0;
    end if;
    if mitigatingPanValue is null
    then
      set mitigatingPanValue = 0;
    end if;
    if mitigatingUnlValue is null
    then
      set mitigatingUnlValue = 0;
    end if;
    if mitigatingUnoValue is null
    then
      set mitigatingUnoValue = 0;
    end if;
  end if;

  
  set likelihood = threatLikelihood - mitigatingLikelihoods;
  set detailsBuf = '\n';
  if mlComments != ''
  then
    set detailsBuf = concat(detailsBuf,'Mitigating likelihoods note: ',mlComments,'\n\n');
  end if;

  set detailsBuf = concat(detailsBuf,'likelihood = threat likelihood - (mean of threat mitigating likelihoods)\n');
  set detailsBuf = concat(detailsBuf,'              = ',threatLikelihood,' - ',mitigatingLikelihoods,'\n');
  set detailsBuf = concat(detailsBuf,'              = ',likelihood,'\n');
  if likelihood < 0
  then
    set likelihood = 0;
    set detailsBuf = concat(detailsBuf,'Rounding likelihood up to 0.\n');
  end if;

  set severity = vulSeverity - mitigatingSeverities;
  if msComments != ''
  then
    set detailsBuf = concat(detailsBuf,'Mitigating severities note: ',msComments,'\n\n');
  end if;

  set detailsBuf = concat(detailsBuf,'severity = vulnerability severity - (mean of vulnerability mitigating severities)\n');
  set detailsBuf = concat(detailsBuf,'           = ',vulSeverity,' - ',mitigatingSeverities,'\n');
  set detailsBuf = concat(detailsBuf,'           = ',severity,'\n');
  if severity < 0
  then
    set severity = 0;
    set detailsBuf = concat(detailsBuf,'Rounding severity up to 0.\n');
  end if;
 
  
  call suppressedThreatProperties(threatId,envId);
  select cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty into threatCProperty,threatIProperty,threatAvProperty,threatAcProperty,threatAnProperty,threatPanProperty,threatUnlProperty,threatUnoProperty from temp_threatproperties;

  call threatAssetProperties(threatId,envId);
  select c_property,i_property,av_property,ac_property,an_property,pan_property,unl_property,uno_property into assetCProperty,assetIProperty,assetAvProperty,assetAcProperty,assetAnProperty,assetPanProperty,assetUnlProperty,assetUnoProperty from temp_threatassetproperties;

  set detailsBuf = concat(detailsBuf,'security property = (threat property x asset property) - (mean of mitigating properties)\n');
  set detailsBuf = concat(detailsBuf,'                  = ([',threatCProperty,' ',threatIProperty,' ',threatAvProperty,' ',threatAcProperty,' ',threatAnProperty,' ',threatPanProperty,' ',threatUnlProperty,' ',threatUnoProperty,'] x [',assetCProperty,' ',assetIProperty,' ',assetAvProperty,' ',assetAcProperty,' ',assetAnProperty,' ',assetPanProperty,' ',assetUnlProperty,' ',assetUnoProperty,']) - [',mitigatingCValue,' ',mitigatingIValue,' ',mitigatingAvValue,' ',mitigatingAcValue,' ',mitigatingAnValue,' ',mitigatingPanValue,' ',mitigatingUnlValue,' ',mitigatingUnoValue,']\n');
  
  set preAssetCValue = threatCProperty * assetCProperty;
  set assetCValue = preAssetCValue - mitigatingCValue;
  set preAssetIValue = threatIProperty * assetIProperty;
  set assetIValue = preAssetIValue - mitigatingIValue;
  set preAssetAvValue = threatAvProperty * assetAvProperty;
  set assetAvValue = preAssetAvValue - mitigatingAvValue;
  set preAssetAcValue = threatAcProperty * assetAcProperty;
  set assetAcValue = preAssetAcValue - mitigatingAcValue;
  set preAssetAnValue = threatAnProperty * assetAnProperty;
  set assetAnValue = preAssetAnValue - mitigatingAnValue;
  set preAssetPanValue = threatPanProperty * assetPanProperty;
  set assetPanValue = preAssetPanValue - mitigatingPanValue;
  set preAssetUnlValue = threatUnlProperty * assetUnlProperty;
  set assetUnlValue = preAssetUnlValue - mitigatingUnlValue;
  set preAssetUnoValue = threatUnoProperty * assetUnoProperty;
  set assetUnoValue = preAssetUnoValue - mitigatingUnoValue;
  set detailsBuf = concat(detailsBuf,'                 = [',assetCValue,' ',assetIValue,' ',assetAvValue,' ',assetAcValue,' ',assetAnValue,' ',assetPanValue,' ',assetUnlValue,' ',assetUnoValue,']\n');

  set detailsBuf = concat(detailsBuf,'risk = likelihood x severity x asset\n');
  set detailsBuf = concat(detailsBuf,'     = ',likelihood,' x ',severity,' x [',assetCValue,' ',assetIValue,' ',assetAvValue,' ',assetAcValue,' ',assetAnValue,' ',assetPanValue,' ',assetUnlValue,' ',assetUnoValue,']\n');
  set preRiskCValue = preAssetCValue * threatLikelihood * vulSeverity;
  set riskCValue = assetCValue * likelihood * severity;
  set preRiskIValue = preAssetIValue * threatLikelihood * vulSeverity;
  set riskIValue = assetIValue * likelihood * severity;
  set preRiskAvValue = preAssetAvValue * threatLikelihood * vulSeverity;
  set riskAvValue = assetAvValue * likelihood * severity;
  set preRiskAcValue = preAssetAcValue * threatLikelihood * vulSeverity;
  set riskAcValue = assetAcValue * likelihood * severity;
  set preRiskAnValue = preAssetAnValue * threatLikelihood * vulSeverity;
  set riskAnValue = assetAnValue * likelihood * severity;
  set preRiskPanValue = preAssetPanValue * threatLikelihood * vulSeverity;
  set riskPanValue = assetPanValue * likelihood * severity;
  set preRiskUnlValue = preAssetUnlValue * threatLikelihood * vulSeverity;
  set riskUnlValue = assetUnlValue * likelihood * severity;
  set preRiskUnoValue = preAssetUnoValue * threatLikelihood * vulSeverity;
  set riskUnoValue = assetUnoValue * likelihood * severity;
  set detailsBuf = concat(detailsbuf,'     = [',riskCValue,' ',riskIValue,' ',riskAvValue,' ',riskAcValue,' ',riskAnValue,' ',riskPanValue,' ',riskUnlValue,' ',riskUnoValue,']\n');

  set detailsBuf = concat(detailsBuf,'unnormalised score = ',riskCValue,' + ',riskIValue,' + ',riskAvValue,' + ',riskAcValue,' + ',riskAnValue,' + ',riskPanValue,' + ',riskUnlValue,' + ',riskUnoValue);
  set preScore = preRiskCValue + preRiskIValue + preRiskAvValue + preRiskAcValue + preRiskAnValue + preRiskPanValue + preRiskUnlValue + preRiskUnoValue;
  set postScore = riskCValue + riskIValue + riskAvValue + riskAcValue + riskAnValue + riskPanValue + riskUnlValue + riskUnoValue;
  set detailsBuf = concat(detailsBuf,'                   = ',postScore,'\n');
 
  set detailsBuf = concat(detailsBuf,'normalised score = riskScore / 1.2\n');
  set preScore = round(preScore / 1.2);
  set postScore = round(postScore / 1.2);
  set detailsBuf = concat(detailsBuf,'normalised score = ',postScore,'\n');
  if preScore <= 0
  then
    set preScore = 1;
  elseif preScore > 9
  then
    set preScore = 9;
  end if;

  if postScore <= 0
  then
    set postScore = 1;
    set detailsBuf = concat(detailsBuf,'rounding score up to 1\n');
  elseif postScore > 9
  then
    set postScore = 9;
    set detailsBuf = concat(detailsBuf,'rounding score down to 9\n');
  end if;

  if likelihood > 0
  then
    call criticalAssetThreatCheck(threatId,envId,detailsBuf,preScore,postScore);
  end if;

  if severity > 0
  then
    call criticalAssetVulnerabilityCheck(vulId,envId,detailsBuf,preScore,postScore);
  end if;

end
//

create procedure getRequirements(in assetName text,in isAsset int)
begin
  declare assetId int;
  declare envId int;
  if assetName = ''
  then
    select concat(rm.short_code,'-',o.label),o.id,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,o.version,rt.name,rm.name from requirement o, asset_requirement rmr, asset rm, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = rmr.requirement_id and rmr.asset_id = rm.id 
    union
    select concat(rm.short_code,'-',o.label),o.id,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,o.version,rt.name,rm.name from requirement o, environment_requirement rmr, environment rm, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = rmr.requirement_id and rmr.environment_id = rm.id 
    order by 1;
  else
    if isAsset is True
    then
      select id into assetId from asset where name = assetName;
      select o.label,o.id,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,o.version,rt.name,rm.name from requirement o, asset_requirement rmr, asset rm, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = rmr.requirement_id and rmr.asset_id = assetId and rmr.asset_id = rm.id order by o.label;
    else
      select id into envId from environment where name = assetName;
      select o.label,o.id,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,o.version,rt.name,rm.name from requirement o, environment_requirement rmr, environment rm, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = rmr.requirement_id and rmr.environment_id = envId and rmr.environment_id = rm.id order by o.label;
    end if;
  end if;
end
//

create procedure getRequirement(in reqName text)
begin
  declare reqLabel int;
  declare reqId int;
  declare shortCode varchar(10);

  select o.id into reqId from requirement o where o.name = reqName and o.version = (select max(i.version) from requirement i where i.id = o.id);
  if reqId is null
  then
    call requirementLabelComponents(reqName,shortCode,reqLabel);
    select o.id into reqId from requirement o, asset_requirement ar, asset a where o.label = reqLabel and o.id = ar.requirement_id and ar.asset_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    if reqId is null
    then
      select o.id into reqId from requirement o, environment_requirement ar, environment a where o.label = reqLabel and o.id = ar.requirement_id and ar.environment_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    end if;
    select o.label,o.id,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,o.version,rt.name from requirement o, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = reqId order by o.label;
  else
    select o.label,o.id,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,o.version,rt.name from requirement o, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = reqId order by o.label;
  end if;
end
//

create procedure allowableTraces()
begin
  select ftd.name, ttd.name from allowable_trace at, trace_dimension ftd, trace_dimension ttd where from_dim = ftd.id and to_dim = ttd.id;
end
//

create procedure traceDimensions()
begin
  select id,name from trace_dimension;
end
//

create procedure lastId()
begin
  select id from attributes where name = 'did';
end
//

create procedure newId()
begin
  declare lastId int;
  select id into lastId from attributes;
  set lastId = lastId + 1;
  update attributes set id = lastId where name = 'did';
  commit;
  select lastId;
end
//

create procedure newId2(out newId int)
begin
  declare lastId int;
  select id into lastId from attributes;
  set lastId = lastId + 1;
  update attributes set id = lastId where name = 'did';
  commit;
  set newId = lastId;
end
//

create procedure addRequirement(in reqLabel text, in reqId int, in reqVersion int, in reqName text, in reqDesc text, in reqRationale text, in reqOriginator text, in reqFc text, in reqPriority int,in reqTypeName text,in modName text,in isAsset int)
begin
  declare reqTypeId int;
  declare modId int;
  select id into reqTypeId from requirement_type where name = reqTypeName;
  insert into requirement(label,id,version,name,description,rationale,originator,fit_criterion,priority,type,update_date) values (reqLabel,reqId,reqVersion,ifnull(reqName,''),ifnull(reqDesc,''),ifnull(reqRationale,''),ifnull(reqOriginator,''),ifnull(reqFc,''),reqPriority,reqTypeId,now());
  if isAsset = 1
  then
    select id into modId from asset where name = modName;
    insert into asset_requirement(asset_id,requirement_id) values (modId,reqId);
  else
    select id into modId from environment where name = modName;
    insert into environment_requirement(environment_id,requirement_id) values (modId,reqId);
  end if;
end
//

create procedure updateRequirement(in reqLabel text, in reqId int, in reqVersion int, in reqName text, in reqDesc text, in reqRationale text, in reqOriginator text, in reqFc text, in reqPriority int,in reqTypeName text)
begin
  declare reqTypeId int;
  select id into reqTypeId from requirement_type where name = reqTypeName;
  insert into requirement(label,id,version,name,description,rationale,originator,fit_criterion,priority,type,update_date) values (reqLabel,reqId,reqVersion,ifnull(reqName,''),ifnull(reqDesc,''),ifnull(reqRationale,''),ifnull(reqOriginator,''),ifnull(reqFc,''),reqPriority,reqTypeId,now());
end
//

create procedure getEnvironments(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,short_code,description from environment;
  else
    select id,name,short_code,description from environment where id = constraintId;
  end if;
end
//

create procedure duplicateProperties(in environmentId int)
begin
  declare dpName varchar(50) default '';
  declare overridingEnvironment varchar(50) default '';

  select dp.name into dpName from composite_environment_property ccp, duplicate_property dp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id;
  if dpName = 'Override'
  then
    select c.name into overridingEnvironment from composite_environment_override cco, environment c where cco.composite_environment_id = environmentId and cco.overriding_environment_id = c.id;
  end if;
  select dpName,overridingEnvironment;
end
//

create procedure getPersonas(in constraintId int)
begin
  if constraintId = -1
  then
    select p.id,p.name,p.activities,p.attitudes,p.aptitudes,p.motivations,p.skills,p.intrinsic,p.contextual,p.image,p.assumption_id,pt.name from persona p, persona_type pt where p.persona_type_id = pt.id;
  else
    select p.id,p.name,p.activities,p.attitudes,p.aptitudes,p.motivations,p.skills,p.intrinsic,p.contextual,p.image,p.assumption_id,pt.name from persona p, persona_type pt where p.id = constraintId and p.persona_type_id = pt.id;
  end if;
end
//

create procedure getTasks(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,short_code,objective,assumption_id,author from task;
  else
    select id,name,short_code,objective,assumption_id,author from task where id = constraintId;
  end if;
end
//

create procedure getUseCases(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,author,short_code,description from usecase;
  else
    select id,name,author,short_code,description from usecase where id = constraintId;
  end if;
end
//

create procedure getMisuseCases(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name from misusecase;
  else
    select id,name from misusecase where id = constraintId;
  end if;
end
//

create procedure riskMisuseCase(in riskId int)
begin
  select mc.id, mc.name from misusecase mc, misusecase_risk mr where mr.risk_id = riskId and mr.misusecase_id = mc.id;
end
//

create procedure traceDimensionList(in dimId int, in isFromFlag int)
begin
  if isFromFlag = 1
  then
    select td.name from allowable_trace atr, trace_dimension td where atr.from_dim = dimId and atr.to_dim = td.id;
  else
    select td.name from allowable_trace atr, trace_dimension td where atr.to_dim = dimId and atr.from_dim = td.id;
  end if;
end
//

create procedure addRisk(in threatName text, in vulName text, in riskId int, in riskName text,in inTxt text, in envName text)
begin
  declare threatId int;
  declare vulId int;
  declare envId int;

  select id into threatId from threat where name = threatName;
  select id into vulId from vulnerability where name = vulName;
  select id into envId from environment where name = envName;
  if envId is null
  then
    set envId = -1;
  end if;

  insert into risk(id,name,threat_id,vulnerability_id,intent,environment_id) values (riskId,riskName,threatId,vulId,inTxt,envId);
end
//

create procedure updateRisk(in threatName text, in vulName text, in riskId int, in riskName text,in inTxt text, in envName text)
begin
  declare threatId int;
  declare vulId int;
  declare envId int;

  select id into threatId from threat where name = threatName;
  select id into vulId from vulnerability where name = vulName;
  select id into envId from environment where name = envName;
  if envId is null
  then
    set envId = -1;
  end if;

  update risk set name = riskName,threat_id = threatId,vulnerability_id = vulId,intent = inTxt,environment_id = envId where id = riskId;

end
//

create procedure getResponses(in constraintId int)
begin
  if constraintId = -1
  then
    select re.id,re.name,rt.name,r.name from response re,goal_category_type rt, risk r where re.goal_category_type_id = rt.id and re.risk_id = r.id;
  else
    select re.id,re.name,rt.name,r.name from response re,goal_category_type rt, risk r where re.id = constraintId and re.goal_category_type_id = rt.id and re.risk_id = r.id;
  end if;
end
//

create procedure riskComponents(in riskName text)
begin
  declare riskId int;
  select id into riskId from risk where name = riskName;
  select t.name,v.name from risk r, threat t, vulnerability v where r.id = riskId and r.threat_id = t.id and r.vulnerability_id = v.id;
end
//

create function allowableTraceDimension(fromId int, toId int)
returns int
deterministic 
begin
  declare allowableFlag int default 0;

  select count(*) into allowableFlag from allowable_trace where from_dim = fromId and to_dim = toId;
  if allowableFlag is null
  then
    return 0;
  elseif allowableFlag = 0
  then
    return 0;
  else
    return 1;
  end if;
end
//

create procedure getRoles(in constraintId int)
begin
  if constraintId = -1
  then
    select r.id,r.name,rt.name,r.short_code,r.description from role r, role_type rt where r.role_type_id = rt.id;
  else
    select r.id,r.name,rt.name,r.short_code,r.description from role r, role_type rt where r.id = constraintId and r.role_type_id = rt.id;
  end if;
end
//

create procedure addRole(in roleId int,in roleName text, in roleTypeName text, in roleCode text, in roleDescription text)
begin
  declare roleTypeId int;
  select id into roleTypeId from role_type where name = roleTypeName;
  insert into role(id,name,role_type_id,short_code,description) values (roleId,roleName,roleTypeId,roleCode,roleDescription);
end
//

create procedure updateRole(in roleId int,in roleName text, in roleTypeName text, in roleCode text, in roleDescription text)
begin
  declare roleTypeId int;
  select id into roleTypeId from role_type where name = roleTypeName;
  update role set name = roleName, role_type_id = roleTypeId, description = roleDescription, short_code = roleCode where id = roleId;
end
//

create procedure getCountermeasures(in constraintId int)
begin
  if constraintId = -1
  then
    select c.id,c.name,c.description,at.name from countermeasure c,asset_type at where c.countermeasure_type_id = at.id;
  else
    select c.id,c.name,c.description,at.name from countermeasure c,asset_type at where c.id = constraintId and c.countermeasure_type_id = at.id;
  end if;
end
//

create procedure getGoals(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,originator from goal;
  else
    select id,name,originator from goal where id = constraintId;
  end if;
end
//

create procedure dimensionId(in dimText text, in dimTable text)
begin
  declare shortCode varchar(50);
  declare reqLabel int;
  declare objtId int;
  declare dimSql varchar(4000);

  if dimTable != 'requirement' and dimTable != 'usecase' and dimTable != 'task'
  then
    set dimSql = concat('select id from ',dimTable,' where ');

    if dimTable = 'persona_characteristic' or dimTable = 'task_characteristic'
    then
      set dimSql = concat(dimSql,'description');
    else
      set dimSql = concat(dimSql,'name');
    end if;
    set dimSql = concat(dimSql,' = \'',dimText,'\'');

    set @sql = dimSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
  elseif dimTable = 'usecase'
  then
    select id into objtId from usecase where name = dimText;
    if objtId is null
    then
      select id into objtId from usecase where short_code = dimText;
    end if;  
    select objtId;
  elseif dimTable = 'task'
  then
    select id into objtId from task where name = dimText;
    if objtId is null
    then
      select id into objtId from task where short_code = dimText;
    end if;  
    select objtId;
  else
    select o.id into objtId from requirement o where o.name = dimText and o.version = (select max(i.version) from requirement i where i.id = o.id);
    if objtId is null
    then
      call requirementLabelComponents(dimText,shortCode,reqLabel);
      select o.id into objtId from requirement o, asset_requirement ar, asset a where o.label = reqLabel and o.id = ar.requirement_id and ar.asset_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
      if objtId is null
      then
        select o.id from requirement o, environment_requirement ar, environment a where o.label = reqLabel and o.id = ar.requirement_id and ar.environment_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
      else
        select objtId;
      end if;
    end if;
    select objtId;
  end if;
end
//

create procedure getDimensions(in dimensionTable text, in constraintId int)
begin
  declare dimSql varchar(4000);

  if constraintId = -1
  then
    set dimSql = concat('select id, name from ',dimensionTable);
  else
    set dimSql = concat('select id, name from ',dimensionTable,' where id = ',constraintId);
  end if;
  set @sql = dimSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure addDomainProperty(in dpId int,in dpName text, in dpDesc text, in dpType text, in dpOrig text)
begin
  declare dpTypeId int;
  select id into dpTypeId from domainproperty_type where name = dpType;
  insert into domainproperty(id,name,description,domainproperty_type_id,originator) values (dpId,dpName,dpDesc,dpTypeId,dpOrig);
end
//

create procedure updateDomainProperty(in dpId int,in dpName text,in dpDesc text, in dpType text,in dpOrig text)
begin
  declare dpTypeId int;
  select id into dpTypeId from domainproperty_type where name = dpType;
  update domainproperty set name = dpName, description = dpDesc, domainproperty_type_id = dpTypeId,originator = dpOrig where id = dpId;
end
//

create procedure getDomainProperties(in constraintId int)
begin
  if constraintId = -1
  then
    select dp.id,dp.name,dp.description,dpt.name,dp.originator from domainproperty dp, domainproperty_type dpt where dp.domainproperty_type_id = dpt.id;
  else
    select dp.id,dp.name,dp.description,dpt.name,dp.originator from domainproperty dp, domainproperty_type dpt where dp.id = constraintId and dp.domainproperty_type_id = dpt.id;
  end if;
end
//

create procedure delete_domainproperty(in dpId int)
begin
  delete from goaldomainproperty_goalassociation where subgoal_id = dpId;
  delete from obstacledomainproperty_goalassociation where subgoal_id = dpId;
  delete from domainproperty_asset where domainproperty_id = dpId;
  delete from domainproperty_reference where domainproperty_id = dpId;
  delete from domainproperty_tag where domainproperty_id = dpId;
  delete from domainproperty where id = dpId;
end
//

create procedure domainPropertyNames(in environmentName text)
begin
  select name from domainproperty order by 1;
end
//

create procedure addObstacle(in obsId int,in obsName text,in obsOrig text)
begin
  insert into obstacle(id,name,originator) values (obsId,obsName,obsOrig);
end
//

create procedure updateObstacle(in obsId int,in obsName text,in obsOrig text)
begin
  update obstacle set name = obsName, originator = obsOrig where id = obsId;
end
//

create procedure delete_obstacle(in obsId int)
begin
  call deleteObstacleComponents(obsId);
  delete from obstacle_reference where obstacle_id = obsId;
  delete from obstacle_tag where obstacle_id = obsId;
  delete from obstacle where id = obsId;
end
//

create procedure deleteObstacleComponents(in obsId int)
begin
  delete from environment_obstacle where obstacle_id = obsId;
  delete from obstacle_label where obstacle_id = obsId;
  delete from obstacle_definition where obstacle_id = obsId;
  delete from obstacle_category where obstacle_id = obsId;
  delete from obstacle_concern where obstacle_id = obsId;
  delete from obstacleobstacle_goalassociation where goal_id = obsId;
  delete from obstaclegoal_goalassociation where goal_id = obsId;
  delete from obstacledomainproperty_goalassociation where goal_id = obsId;
  delete from obstaclerequirement_goalassociation where goal_id = obsId;
  delete from goalobstacle_goalassociation where subgoal_id = obsId;
  delete from domainpropertyobstacle_goalassociation where subgoal_id = obsId;
  delete from obstacleobstacle_goalassociation where subgoal_id = obsId;
  delete from obstaclethreat_goalassociation where goal_id = obsId;
  delete from obstaclevulnerability_goalassociation where goal_id = obsId;
  delete from obstacletask_goalassociation where goal_id = obsId;
  delete from obstacleusecase_goalassociation where goal_id = obsId;
  delete from obstaclerole_goalassociation where goal_id = obsId;
  delete from obstaclemisusecase_goalassociation where goal_id = obsId;
  delete from requirementobstacle_goalassociation where subgoal_id = obsId;
end
//

create procedure addObstacleDefinition(in obsId int,in environmentName text, in defName text, in obsProb float, in ObsProbRat text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into obstacle_definition(obstacle_id,environment_id,definition,probability,rationale) values (obsId,environmentId,defName,obsProb,obsProbRat);
end
//

create procedure addObstacleCategory(in obsId int,in environmentName text, in catName text)
begin
  declare environmentId int;
  declare catId int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into catId from obstacle_category_type where name = catName limit 1;
  insert into obstacle_category(obstacle_id,environment_id,obstacle_category_type_id) values (obsId,environmentId,catId);
end
//

create procedure getObstacles(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,originator from obstacle;
  else
    select id,name,originator from obstacle where id = constraintId;
  end if;
end
//

create function obstacle_definition(obsId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingDefinition varchar(1000);
  declare currentEnvironmentId int;
  declare currentDefinition varchar(1000);
  declare definitionName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare defCursor cursor for select environment_id,definition from obstacle_definition where obstacle_id = obsId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingDefinition = '';

    open defCursor;
    def_loop: loop
      fetch defCursor into currentEnvironmentId, currentDefinition;
      if done = 1
      then
        leave def_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingDefinition = currentDefinition;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingDefinition = concat(workingDefinition,' [' ,currentEnvName,'] ',currentDefinition);
      end if;
    end loop def_loop;
    close defCursor;
    set definitionName = workingDefinition; 
  else
    select definition into definitionName from obstacle_definition where obstacle_id = obsId and environment_id = environmentId;
  end if;
  return definitionName;
end
//

create function obstacle_category(obsId int,environmentId int) 
returns varchar(1000)
deterministic 
begin
  declare compositeCount int;
  declare duplicatePolicy varchar(50);
  declare overridingEnvironmentId int;
  declare workingCategory varchar(1000);
  declare currentEnvironmentId int;
  declare currentCategory varchar(50);
  declare categoryName varchar(1000);
  declare currentEnvName varchar(50);
  declare done int default 0;
  declare catCursor cursor for select environment_id,oct.name from obstacle_category oc, obstacle_category_type oct where oc.obstacle_id = obsId and oc.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and oc.obstacle_category_type_id = oct.id;
  declare continue handler for not found set done = 1;

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = environmentId limit 1;
  if compositeCount > 0
  then
    select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = environmentId and ccp.duplicate_property_id = dp.id limit 1;
    if duplicatePolicy = 'Override'
    then
      select overriding_environment_id into overridingEnvironmentId from composite_environment_override where composite_environment_id = environmentId limit 1;
    end if;
    set workingCategory = '';

    open catCursor;
    cat_loop: loop
      fetch catCursor into currentEnvironmentId, currentCategory;
      if done = 1
      then
        leave cat_loop;
      end if;
      if duplicatePolicy = 'Override'
      then
        if currentEnvironmentId = overridingEnvironmentId
        then
          set workingCategory = currentCategory;
        end if;
      else
        select name into currentEnvName from environment where id = currentEnvironmentId;
        set workingCategory = concat(workingCategory,' [' ,currentEnvName,'] ',currentCategory);
      end if;
    end loop cat_loop;
    close catCursor;
    set categoryName = workingCategory; 
  else
    select oct.name into categoryName from obstacle_category oc, obstacle_category_type oct where oc.obstacle_id = obsId and oc.environment_id = environmentId and oc.obstacle_category_type_id = oct.id;
  end if;
  return categoryName;
end
//

create procedure add_obstacle_environment(in obsId int, in environmentName text)
begin
  declare environmentId int;
  select id into environmentId from environment where name = environmentName limit 1;
  insert into environment_obstacle(obstacle_id,environment_id) values(obsId,environmentId);
end
//

create procedure obstacle_environments(in obsId int)
begin
  select eo.environment_id,e.name from environment_obstacle eo,environment e where eo.obstacle_id = obsId and eo.environment_id = e.id;
end
//

create procedure obstacleNames(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select name from obstacle;
  else
    select id into environmentId from environment where name = environmentName limit 1;
    select o.name from obstacle o, environment_obstacle eo where eo.environment_id = environmentId and eo.obstacle_id = o.id order by 1;
  end if;
end
//

create procedure obstacleDependents(in obsId int)
begin
  declare sobsId int;
  declare sobsName varchar(100);
  declare goalId int;
  declare goalName varchar(100);
  declare taskId int;
  declare taskName varchar(50);
  declare ucId int;
  declare ucName varchar(50);

  declare obsObs int;
  declare obsThrs int;
  declare obsVuls int;
  declare obsGoals int;
  declare obsAssets int;
  declare done int default 0;
  declare obsCursor cursor for select distinct oo.subgoal_id,o.name from obstacleobstacle_goalassociation oo, obstacle o where oo.goal_id = obsId and oo.subgoal_id = o.id;
  declare thrCursor cursor for select distinct oo.subgoal_id,t.name from obstaclethreat_goalassociation oo, threat t where oo.goal_id = obsId and oo.subgoal_id = t.id;
  declare vulCursor cursor for select distinct oo.subgoal_id,v.name from obstaclevulnerability_goalassociation oo, vulnerability v where oo.goal_id = obsId and oo.subgoal_id = v.id;
  declare assetCursor cursor for select distinct oc.asset_id,a.name from obstacle_concern oc, asset a where oc.obstacle_id = obsId and oc.asset_id = a.id;
  declare goalCursor cursor for select distinct og.subgoal_id,g.name from obstaclegoal_goalassociation og, goal g where og.goal_id = obsId and og.subgoal_id = g.id;
  declare taskCursor cursor for select distinct gt.subgoal_id,t.name from obstacletask_goalassociation gt, task t where gt.goal_id = obsId and gt.subgoal_id = t.id;
  declare ucCursor cursor for select distinct gt.subgoal_id,t.name from obstacleusecase_goalassociation gt, usecase t where gt.goal_id = obsId and gt.subgoal_id = t.id;
  declare continue handler for not found set done = 1;

  set done = 0;
  open obsCursor;
  obs_loop: loop
    fetch obsCursor into sobsId,sobsName;
    if done = 1
    then
      leave obs_loop;
    end if;
    select count(distinct subgoal_id) into obsObs from obstacleobstacle_goalassociation  where goal_id = sobsId;
    insert into temp_obstacle values(sobsId,sobsName);
    if (obsObs = 1)
    then
      call obstacleDependents(sobsId);
    end if;
  end loop obs_loop;
  close obsCursor;

  set done = 0;
  open thrCursor;
  thr_loop: loop
    fetch thrCursor into sobsId,sobsName;
    if done = 1
    then
      leave thr_loop;
    end if;
    insert into temp_threat values(sobsId,sobsName);
    call threatDependents(sobsId);
  end loop thr_loop;
  close thrCursor;

  set done = 0;
  open vulCursor;
  vul_loop: loop
    fetch vulCursor into sobsId,sobsName;
    if done = 1
    then
      leave vul_loop;
    end if;
    insert into temp_vulnerability values(sobsId,sobsName);
    call vulnerabilityDependents(sobsId);
  end loop vul_loop;
  close vulCursor;

  set done = 0;
  open assetCursor;
  asset_loop: loop
    fetch assetCursor into sobsId,sobsName;
    if done = 1
    then
      leave asset_loop;
    end if;
    insert into temp_asset values(sobsId,sobsName);
    call assetDependents(sobsId);
  end loop asset_loop;
  close assetCursor;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId,goalName;
    if done = 1
    then
      leave goal_loop;
    end if;
    select count(distinct subgoal_id) into obsGoals from goalgoal_goalassociation  where goal_id = goalId;
    insert into temp_goal values(goalId,goalName);
    if (obsGoals = 1)
    then
      call goalDependents(goalId);
    end if;
  end loop goal_loop;
  close goalCursor;

  set done = 0;
  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId,taskName;
    if done = 1
    then
      leave task_loop;
    end if;
    insert into temp_task values(taskId,taskName);
    call taskDependents(taskId);
  end loop task_loop;
  close taskCursor;

  set done = 0;
  open ucCursor;
  uc_loop: loop
    fetch ucCursor into ucId,ucName;
    if done = 1
    then
      leave uc_loop;
    end if;
    insert into temp_usecase values(ucId,ucName);
    call usecaseDependents(ucId);
  end loop uc_loop;
  close ucCursor;


end
//

create procedure obstacleModelElements(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'goal',g.name from goal g, obstaclegoal_goalassociation og where og.environment_id = environmentId and og.subgoal_id = g.id
    union
    select 'obstacle',o.name from obstacle o, obstacledomainproperty_goalassociation od where od.environment_id = environmentId and od.goal_id = o.id
    union
    select 'domainproperty',dp.name from domainproperty dp, obstacledomainproperty_goalassociation od where od.environment_id = environmentId and od.subgoal_id = dp.id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclethreat_goalassociation ot where eg.environment_id = environmentId and eg.environment_id = ot.environment_id and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.threat_id = ot.subgoal_id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclevulnerability_goalassociation ov where eg.environment_id = environmentId and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.vulnerability_id = ov.subgoal_id and eg.environment_id = ov.environment_id
    union
    select 'obstacle',o.name from obstacle o, environment_obstacle eo where eo.environment_id = environmentId and eo.obstacle_id = o.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirementobstacle_goalassociation ro, requirement r, asset_requirement rmr, asset rm where ro.environment_id = environmentId and ro.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirementobstacle_goalassociation ro, requirement r, environment_requirement rmr, environment rm where ro.environment_id = environmentId and ro.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from obstaclerequirement_goalassociation obr, requirement r, asset_requirement rmr, asset rm where obr.environment_id = environmentId and obr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from obstaclerequirement_goalassociation obr, requirement r, environment_requirement rmr, environment rm where obr.environment_id = environmentId and obr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'task',t.name from obstacletask_goalassociation gt, task t where gt.environment_id = environmentId and gt.subgoal_id = t.id
    union
    select 'usecase',t.name from obstacleusecase_goalassociation gt, usecase t where gt.environment_id = environmentId and gt.subgoal_id = t.id
    union
    select 'role',r.name from requirement_role rr, role r, obstaclerequirement_goalassociation ga where ga.environment_id = environmentId and ga.subgoal_id = rr.requirement_id and rr.role_id = r.id
    union
    select 'role',r.name from role r, obstaclerole_goalassociation gr where gr.environment_id = environmentId and gr.subgoal_id = r.id
    union
    select 'misusecase',m.name from misusecase m,obstaclemisusecase_goalassociation ga where ga.environment_id = environmentId and ga.subgoal_id = m.id;
  else
    select 'goal',g.name from goal g, obstaclegoal_goalassociation og where og.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and og.subgoal_id = g.id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclethreat_goalassociation ot where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = ot.environment_id and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.threat_id = ot.subgoal_id
    union
    select 'goal',g.name from goal g, response_goal rg, environment_goal eg, response re, risk ri, obstaclevulnerability_goalassociation ov where eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.goal_id = g.id and g.id = rg.goal_id and rg.response_id = re.id and re.risk_id = ri.id and ri.vulnerability_id = ov.subgoal_id and eg.environment_id = ov.environment_id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirementobstacle_goalassociation ro, requirement r, asset_requirement rmr, asset rm where ro.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ro.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from requirementobstacle_goalassociation ro, requirement r, environment_requirement rmr, environment rm where ro.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ro.goal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from obstaclerequirement_goalassociation obr, requirement r, asset_requirement rmr, asset rm where obr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and obr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select 'requirement',concat(rm.short_code,'-',r.label) from obstaclerequirement_goalassociation obr, requirement r, environment_requirement rmr, environment rm where obr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and obr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select 'obstacle',o.name from obstacle o, environment_obstacle eo where eo.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eo.obstacle_id = o.id
    union
    select 'task',t.name from obstacletask_goalassociation gt, task t where gt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gt.subgoal_id = t.id
    union
    select 'usecase',t.name from obstacleusecase_goalassociation gt, usecase t where gt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gt.subgoal_id = t.id
    union
    select 'role',r.name from requirement_role rr, obstaclerequirement_goalassociation ga, role r where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.subgoal_id = rr.requirement_id and rr.role_id = r.id
    union
    select 'role',r.name from role r, obstaclerole_goalassociation gr where gr.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gr.subgoal_id = r.id
    union
    select 'misusecase',m.name from misusecase m,obstaclemisusecase_goalassociation ga where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.subgoal_id = m.id;
  end if;
end
//

create procedure obstacleModel(in environmentName text)
begin
  declare environmentId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, asset_requirement rmr, asset rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId and hg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, environment_requirement rmr, environment rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId and hg.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where et.environment_id = environmentId and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ev.environment_id = environmentId and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,obstaclerequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, obstaclerequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'misusecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclemisusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, misusecase tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id;
  else
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, asset_requirement rmr, asset rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,concat(rm.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, environment_requirement rmr, environment rm where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hg.id = rmr.requirement_id and rmr.environment_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.subgoal_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,obstaclerequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, obstaclerequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'misusecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclemisusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, misusecase tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id;
  end if;
end
//

create procedure assetAssociations(in assetId int, in environmentId int)
begin
  select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.head_id = assetId and a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
end
//

create procedure updateProjectSettings(in projName text, in background text, in goals text,in scope text,in richPicture text, in fontSize text, in fontName text)
begin
  update project_setting set description = projName where name = 'Project Name';
  update project_setting set description = background where name = 'Project Background';
  update project_setting set description = goals where name = 'Project Goals';
  update project_setting set description = scope where name = 'Project Scope';
  update project_setting set description = richPicture where name = 'Rich Picture';
  update project_setting set description = fontSize where name = 'Font Size';
  update project_setting set description = fontName where name = 'Font Name';
end
//

create procedure deleteDictionary()
begin
  delete from project_dictionary;
end
//

create procedure addDictionaryEntry(in name text, in definition text)
begin
  insert into project_dictionary values(name,definition);
end
//

create procedure getProjectSettings()
begin
  select name,description from project_setting;
end
//

create procedure getDictionary()
begin
  select name,description from project_dictionary order by name;
end
//

create procedure addContributorEntry(in firstName text, in surName text, in affn text, in contributorRole text)
begin
  insert into project_contributor values(firstName,surName,affn,contributorRole);
end
//


create procedure getContributors()
begin
  select firstname,surname,affiliation,role from project_contributor;
end
//

create procedure deleteContributors()
begin
  delete from project_contributor;
end
//

create procedure addRevision(in revNo int, in revDate text, in revRemarks text)
begin
  insert into project_revision values(revNo,revDate,revRemarks);
end
//

create procedure getRevisions()
begin
  select revision_no,revision_date,revision_remarks from project_revision;
end
//

create procedure deleteRevisions()
begin
  delete from project_revision;
end
//

create procedure getRequirementVersions(in reqId int)
begin
  select o.version,o.label,o.name,o.description,o.priority,o.rationale,o.fit_criterion,o.originator,rt.name,ifnull(o.update_date,'') from requirement o, requirement_type rt where o.id = reqId and o.type = rt.id order by o.version desc;
end
//

create function existingResponseGoal(responseId int)
returns int
deterministic
begin
  declare existingCount int;
  select count(*) into existingCount from response_goal where response_id = responseId;
  if existingCount > 0
  then
    set existingCount = 1;
  end if;
  return existingCount;
end
//

create procedure goalRefinements(in goalId int, in environmentId int)
begin
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(a.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement ar, asset a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = ar.requirement_id and ar.asset_id = a.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(a.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement ar, environment a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = ar.requirement_id and ar.environment_id = a.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'threat' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclethreat_goalassociation ga, environment e, obstacle hg, reference_type rt, threat tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'vulnerability' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclevulnerability_goalassociation ga, environment e, obstacle hg, reference_type rt, vulnerability tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' subgoal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, asset_requirement ar, asset a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and ga.goal_id = ar.requirement_id and ar.asset_id = a.id
  union
  select ga.id id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' subgoal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg, environment_requirement ar, environment a where ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = goalId and ga.subgoal_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.environment_id = e.id and ga.goal_id = ar.requirement_id and ar.environment_id = a.id;
end
//

create procedure subGoalRefinements(in goalId int, in environmentId int)
begin
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(a.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement ar, asset a where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = ar.requirement_id and ar.asset_id = a.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,concat(a.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement ar, environment a where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = ar.requirement_id and ar.environment_id = a.id
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'threat' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclethreat_goalassociation ga, environment e, obstacle hg, reference_type rt, threat tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
  union
  select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'vulnerability' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclevulnerability_goalassociation ga, environment e, obstacle hg, reference_type rt, vulnerability tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId;
end
//

create procedure asset_valueNames(in environmentName text)
begin
  declare envId int;
  select id into envId from environment where name = environmentName;
  select name from asset_value where environment_id = envId order by id;
end
//

create procedure countermeasure_valueNames(in environmentName text)
begin
  select name from countermeasure_value order by id;
end
//

create procedure threat_valueNames(in environmentName text)
begin
  select name from threat_value order by id;
end
//

create procedure risk_classNames(in environmentName text)
begin
  select name from risk_class order by id;
end
//

create procedure delete_capability(in objtId int)
begin
  delete from capability where id = objtId;
end
//

create procedure delete_motivation(in objtId int)
begin
  delete from motivation where id = objtId;
end
//

create procedure delete_asset_type(in objtId int)
begin
  delete from asset_type where id = objtId;
end
//

create procedure delete_threat_type(in objtId int)
begin
  if objtId != -1
  then
    delete from threat_type where id = objtId;
  else
    delete from threat_type;
  end if;
end
//

create procedure delete_vulnerability_type(in objtId int)
begin
  if objtId != -1
  then
    delete from vulnerability_type where id = objtId;
  else
    delete from vulnerability_type;
  end if;
end
//

create procedure addValueType(in vtId int,in vtName text, in vtDesc text, in vtType text, in vtScore int, in vtRat text)
begin
  declare existingId int;
  declare existingIdSql varchar(4000);
  declare vtSql varchar(4000);
  
  set existingIdSql = concat('select id into @existingId from ',vtType,' where name = \"',vtName,'\" limit 1');
  set @sql = existingIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set existingId = @existingId;
  
  if existingId is not null
  then
    call updateValueType(existingId,vtName,vtDesc,vtType,'',vtScore,vtRat);
  else
    if vtType = 'capability' or vtType = 'motivation' or vtType = 'asset_type' or vtType = 'threat_type' or vtType = 'vulnerability_type' or vtType = 'risk_class'
    then
      set vtSql = concat('insert into ',vtType,'(id,name,description) values (',vtId,',\"',vtName,'\",\"',vtDesc,'\")');
      set @sql = vtSql;
      prepare stmt from @sql;
      execute stmt;
      deallocate prepare stmt;
    else
      set vtSql = concat('insert into ',vtType,'(id,name,description,value,rationale) values (',vtId,',\"',vtName,'\",\"',vtDesc,'\",',vtScore,',\"',vtRat,'\")');
      set @sql = vtSql;
      prepare stmt from @sql;
      execute stmt;
      deallocate prepare stmt;
    end if;
  end if;
end
//

create procedure updateValueType(in vtId int,in vtName text, in vtDesc text, in vtType text, in envName text, in vtScore int, in vtRat text)
begin
  declare envId int default 0;
  declare vtSql varchar(4000);

  if vtType = 'asset_value'
  then
    select id into envId from environment where name = envName;
    update asset_value set name=vtName, description=vtDesc where id = vtId and environment_id = envId;
  elseif vtType = 'threat_value' or vtType = 'countermeasure_value' or vtType = 'capability' or vtType = 'motivation' or vtType = 'asset_type' or vtType = 'threat_type' or vtType = 'vulnerability_type' or vtType = 'risk_class'
  then
    set vtSql = concat('update ',vtType,' set name=\"',vtName,'\", description=\"',vtDesc,'\" where id = ',vtId);
    set @sql = vtSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
  elseif vtType = 'severity' or vtType = 'likelihood'
  then
    set vtSql = concat('update ',vtType,' set name=\"',vtName,'\", description=\"',vtDesc,'\" where id = ',vtId);
    set @sql = vtSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
  else
    set vtSql = concat('update ',vtType,' set name=\"',vtName,'\", description=\"',vtDesc,'\", value = ',vtScore,', rationale=\"',vtRat,'\"  where id = ',vtId);
    set @sql = vtSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
  end if;
end
//

create procedure asset_typeNames(in environmentName text)
begin
  select distinct name from asset_type;
end
//

create procedure requirement_typeNames(in environmentName text)
begin
  select distinct name from requirement_type;
end
//

create procedure threat_typeNames(in environmentName text)
begin
  select distinct name from threat_type;
end
//

create procedure vulnerability_typeNames(in environmentName text)
begin
  select distinct name from vulnerability_type;
end
//

create function requirementLabelById(reqId int)
returns int
deterministic
begin
  declare reqLabel int;
  select o.label into reqLabel from requirement o where o.id = reqId and o.version = (select max(i.version) from requirement i where i.id = o.id);
  return reqLabel;
end
//

create procedure threatTypes(envName text)
begin
  declare noRows int;
  declare envId int;
  if envName = ''
  then
    select count(*) from threat into noRows;
    select tt.name "Threat Type", (count(t.id) / noRows) "No" from threat t right join threat_type tt on t.threat_type_id = tt.id group by tt.name; 
  else
    select id into envId from environment where name = envName;
    select ifnull(count(*),0) into noRows from environment_threat where environment_id = envId;
    select tt.name "Threat Type", ifnull((count(t.id) / noRows),0) "No" from environment_threat et join threat t on et.threat_id = t.id right join threat_type tt on t.threat_type_id = tt.id group by tt.name; 
  end if;
end
//

create procedure vulnerabilityTypes(envName text)
begin
  declare noRows int;
  declare envId int;
  if envName = ''
  then
    select count(*) from vulnerability into noRows;
    select vt.name "Vulnerability Type", (count(v.id) / noRows) "No" from vulnerability v right join vulnerability_type vt on v.vulnerability_type_id = vt.id group by vt.name; 
  else
    select id into envId from environment where name = envName;
    select ifnull(count(*),0) into noRows from environment_vulnerability where environment_id = envId;
    select vt.name "Vulnerability Type", ifnull((count(v.id) / noRows),0) "No" from environment_vulnerability ev join vulnerability v on ev.vulnerability_id = v.id right join vulnerability_type vt on v.vulnerability_type_id = vt.id group by vt.name; 
  end if;
end
//

create procedure priority_typeNames(in environmentName text)
begin
  select name from priority_type;
end
//

create procedure getRiskElements(in environmentName text)
begin
  declare envId int;
  select id into envId from environment where name = environmentName;
  select r.name 'Risk',t.name 'Threat',v.name 'Vulnerability',vs.severity_id 'Severity', tl.likelihood_id 'Likelihood' from risk r, threat t, vulnerability v,threat_likelihood tl, vulnerability_severity vs where r.threat_id = t.id and r.vulnerability_id = v.id and vs.environment_id = envId and vs.vulnerability_id = v.id and tl.environment_id = envId and tl.threat_id = t.id;
end
//

create procedure persona_typeNames(in environmentName text)
begin
  select distinct name from persona_type;
end
//

create procedure addAssetDependents(in headId int, in tailId int, in envId int)
begin
  declare headCount int;
  declare tailCount int;
  select count(asset_id) into headCount from environment_asset where environment_id = envId and asset_id = headId;
  if headCount = 0
  then
    insert into environment_asset (environment_id,asset_id) values (envId,headId);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (headId,envId,0,0);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (headId,envId,1,0);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (headId,envId,2,0);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (headId,envId,3,0);
  end if;
  
  select count(asset_id) into tailCount from environment_asset where environment_id = envId and asset_id = tailId;
  if tailCount = 0
  then
    insert into environment_asset (environment_id,asset_id) values (envId,tailId);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (tailId,envId,0,0);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (tailId,envId,1,0);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (tailId,envId,2,0);
    insert into asset_property (asset_id,environment_id,property_id,property_value_id) values (tailId,envId,3,0);
  end if;

end
//

create procedure addGoalDependents(in headId int, in tailId int, in envId int)
begin
  declare headCount int;
  declare tailCount int;

  select count(goal_id) into headCount from environment_goal where environment_id = envId and goal_id = headId;
  if headCount = 0
  then
    insert into environment_goal(environment_id,goal_id) values (envId,headId);
    insert into goal_definition(goal_id,environment_id,definition) values (headId,envId,'None');
    insert into goal_category(goal_id,environment_id,category_id) values (headId,envId,1);
    insert into goal_priority(goal_id,environment_id,priority_id) values (headId,envId,1);
    insert into goal_fitcriterion(goal_id,environment_id,fitcriterion) values (headId,envId,'None');
    insert into goal_issue(goal_id,environment_id,issue) values (headId,envId,'None');
  end if;
  
  select count(goal_id) into tailCount from environment_goal where environment_id = envId and goal_id = tailId;
  if tailCount = 0
  then
    insert into environment_goal(environment_id,goal_id) values (envId,tailId);
    insert into goal_definition(goal_id,environment_id,definition) values (tailId,envId,'None');
    insert into goal_category(goal_id,environment_id,category_id) values (tailId,envId,1);
    insert into goal_priority(goal_id,environment_id,priority_id) values (tailId,envId,1);
    insert into goal_fitcriterion(goal_id,environment_id,fitcriterion) values (tailId,envId,'None');
    insert into goal_issue(goal_id,environment_id,issue) values (tailId,envId,'None');
  end if;
end
//

create procedure addObstacleDependents(in headId int, in tailId int, in envId int)
begin
  declare headCount int;
  declare tailCount int;

  select count(obstacle_id) into headCount from environment_obstacle where environment_id = envId and obstacle_id = headId;
  if headCount = 0
  then
    insert into environment_obstacle(environment_id,obstacle_id) values (envId,headId);
    insert into obstacle_definition(obstacle_id,environment_id,definition) values (headId,envId,'None');
    insert into obstacle_category(obstacle_id,environment_id,obstacle_category_type_id) values (headId,envId,4);
  end if;
  
  select count(obstacle_id) into tailCount from environment_obstacle where environment_id = envId and obstacle_id = tailId;
  if tailCount = 0
  then
    insert into environment_obstacle(environment_id,obstacle_id) values (envId,tailId);
    insert into obstacle_definition(obstacle_id,environment_id,definition) values (tailId,envId,'None');
    insert into obstacle_category(obstacle_id,environment_id,obstacle_category_type_id) values (tailId,envId,4);
  end if;
end
//

create procedure role_typeNames(in environmentName text)
begin
  select distinct name from role_type;
end
//

create procedure obstacle_category_typeNames(in environmentName text)
begin
  select name from obstacle_category_type;
end
//

create procedure getVulnerabilityDirectory(in vulName text)
begin
  if vulName = ''
  then
    select vd.label,vd.name,vd.description,vt.name,vd.reference from vulnerability_directory vd, vulnerability_type vt where vd.vulnerability_type_id = vt.id;
  else
    select vd.label,vd.name,vd.description,vt.name,vd.reference from vulnerability_directory vd, vulnerability_type vt where vd.name = vulName and vd.vulnerability_type_id = vt.id;
  end if;
end
//

create procedure getThreatDirectory(in thrName text)
begin
  if thrName = ''
  then
    select td.label,td.name,td.description,tt.name,td.reference from threat_directory td, threat_type tt where td.threat_type_id = tt.id;
  else
    select td.label,td.name,td.description,tt.name,td.reference from threat_directory td, threat_type tt where td.name = thrName and td.threat_type_id = tt.id;
  end if;
end
//

create procedure reassociateAsset(assetName text, envName text, reqId int)
begin
  declare assetId int;
  declare envId int;
  declare lastReqLabel int;
  if envName != ''
  then
    select id into envId from environment where name = envName;
    delete from environment_requirement where environment_id = envId and requirement_id = reqId;
  end if;
  select id into assetId from asset where name = assetName;
  delete from asset_requirement where requirement_id = reqId;
  insert into asset_requirement(asset_id,requirement_id) values (assetId,reqId);
  select max(r.label) into lastReqLabel from requirement r, asset_requirement ar where ar.asset_id = assetId and r.version = (select max(i.version) from requirement i where i.id = r.id);
  insert into requirement(id,type,version,label,name,rationale,originator,fit_criterion,priority,supporting_material,update_date)
  (
    select id,type,(version + 1),(label + 1),name,rationale,originator,fit_criterion,priority,supporting_material,now() from requirement where id = reqId and version = (select max(version) from requirement where id = reqId)
  );
end
//

create procedure add_reaction_detection_mechanism(mitId int, detMechName text, envName text)
begin
  declare detMechId int;
  declare envId int;

  select id into detMechId from asset where name = detMechName;
  select id into envId from environment where name = envName;
  insert into reaction_detection_mechanism(response_id,environment_id,asset_id) values (mitId,envId,detMechId); 
end
//

create procedure add_obstacle_concern(obsId int, envName text, assetName text)
begin
  declare envId int;
  declare assetId int;
  select id into envId from environment where name = envName;
  select id into assetId from asset where name = assetName;
  insert into obstacle_concern(obstacle_id,environment_id,asset_id) values (obsId,envId,assetId);
end
//

create procedure obstacleConcerns(in obsId int, in envId int)
begin
  select a.name from obstacle_concern oc, asset a where oc.obstacle_id = obsId and oc.environment_id = envId and oc.asset_id = a.id;
end
//

create procedure addGoalConcernAssociation(goalId int, envName text, sourceName text,sourceMultiplicity text,link text, targetName text, targetMultiplicity text)
begin
  declare envId int;
  declare sourceId int;
  declare sourceMultiplicityId int;
  declare targetId int;
  declare targetMultiplicityId int;
  select id into envId from environment where name = envName;
  select id into sourceId from asset where name = sourceName;
  select id into sourceMultiplicityId from multiplicity_type where name = sourceMultiplicity;
  select id into targetId from asset where name = targetName;
  select id into targetMultiplicityId from multiplicity_type where name = targetMultiplicity;
  insert into goal_concernassociation(goal_id,environment_id,source_id,source_multiplicity_id,link,target_id,target_multiplicity_id) values (goalId,envId,sourceId,sourceMultiplicityId,link,targetId,targetMultiplicityId);
end
//

create procedure goalConcernAssociations(in goalId int, in envId int)
begin
  select sa.name,smt.name,ca.link,ta.name,tmt.name from goal_concernassociation ca, asset sa, asset ta, multiplicity_type smt, multiplicity_type tmt where ca.goal_id = goalId and ca.environment_id = envId and ca.source_id = sa.id and ca.source_multiplicity_id = smt.id and ca.target_id = ta.id and ca.target_multiplicity_id = tmt.id;
end
//

create procedure addTaskConcernAssociation(taskId int, envName text, sourceName text,sourceMultiplicity text,link text, targetName text, targetMultiplicity text)
begin
  declare envId int;
  declare sourceId int;
  declare sourceMultiplicityId int;
  declare targetId int;
  declare targetMultiplicityId int;
  select id into envId from environment where name = envName;
  select id into sourceId from asset where name = sourceName;
  select id into sourceMultiplicityId from multiplicity_type where name = sourceMultiplicity;
  select id into targetId from asset where name = targetName;
  select id into targetMultiplicityId from multiplicity_type where name = targetMultiplicity;
  insert into task_concernassociation(task_id,environment_id,source_id,source_multiplicity_id,link,target_id,target_multiplicity_id) values (taskId,envId,sourceId,sourceMultiplicityId,link,targetId,targetMultiplicityId);
end
//

create procedure taskConcernAssociations(in taskId int, in envId int)
begin
  select sa.name,smt.name,ca.link,ta.name,tmt.name from task_concernassociation ca, asset sa, asset ta, multiplicity_type smt, multiplicity_type tmt where ca.task_id = taskId and ca.environment_id = envId and ca.source_id = sa.id and ca.source_multiplicity_id = smt.id and ca.target_id = ta.id and ca.target_multiplicity_id = tmt.id;
end
//

create procedure add_goal_concern(in goalId int, in envName text, in assetName text)
begin
  declare envId int;
  declare assetId int default -1;
  select id into envId from environment where name = envName;
  select id into assetId from asset where name = assetName;

  if assetId = -1
  then
    call importTemplateAssetIntoEnvironment(assetName,envName); 
  end if;

  insert into goal_concern(goal_id,environment_id,asset_id) values (goalId,envId,assetId);
end
//

create procedure goalConcerns(in goalId int, in envId int)
begin
  select a.name from goal_concern gc, asset a where gc.goal_id = goalId and gc.environment_id = envId and gc.asset_id = a.id;
end
//

create procedure addDependency(depId int, envName text, depender text, dependee text, dType text, dependency text, rationaleTxt text)
begin
  declare depTypeId int;
  declare dependerId int;
  declare dependeeId int;
  declare dependencyId int;
  declare envId int;

  select id into envId from environment where name = envName;
  select id into dependerId from role where name = depender;
  select id into dependeeId from role where name = dependee;

  if dType = 'goal'
  then
    select id into depTypeId from goal where name = dependency;
    insert into rolegoalrole_dependency(id,environment_id,depender_id,dependee_id,dependency_id,rationale) values (depId,envId,dependerId,dependeeId,depTypeId,rationaleTxt);
  elseif dType = 'task'
  then
    select id into depTypeId from task where name = dependency;
    insert into roletaskrole_dependency(id,environment_id,depender_id,dependee_id,dependency_id,rationale) values (depId,envId,dependerId,dependeeId,depTypeId,rationaleTxt);
  else
    select id into depTypeId from asset where name = dependency;
    insert into roleassetrole_dependency(id,environment_id,depender_id,dependee_id,dependency_id,rationale) values (depId,envId,dependerId,dependeeId,depTypeId,rationaleTxt);
  end if;
end
//

create procedure updateDependency(depId int, envName text, depender text, dependee text, dType text, dependency text, rationaleTxt text)
begin
  declare depTypeId int;
  declare dependerId int;
  declare dependeeId int;
  declare dependencyId int;
  declare envId int;

  select id into envId from environment where name = envName;
  select id into dependerId from role where name = depender;
  select id into dependeeId from role where name = dependee;

  if dType = 'goal'
  then
    select id into depTypeId from goal where name = dependency;
    update rolegoalrole_dependency set environment_id = envId, depender_id = dependerId, dependee_id = dependeeId, dependency_id = depTypeId, rationale = rationaleTxt where id = depId;
  elseif dType = 'task'
  then
    select id into depTypeId from task where name = dependency;
    update roletaskrole_dependency set environment_id = envId, depender_id = dependerId, dependee_id = dependeeId, dependency_id = depTypeId, rationale = rationaleTxt where id = depId;
  else
    select id into depTypeId from asset where name = dependency;
    update roleassetrole_dependency set environment_id = envId, depender_id = dependerId, dependee_id = dependeeId, dependency_id = depTypeId, rationale = rationaleTxt where id = depId;
  end if;
end
//

create procedure delete_dependency(in depId int,dType text)
begin

  if dType = 'goal'
  then
    delete from rolegoalrole_dependency where id = depId;
  elseif dType = 'task'
  then
    delete from roletaskrole_dependency where id = depId;
  else
    delete from roleassetrole_dependency where id = depId;
  end if;
end
//

create procedure getDependencies(in environmentName text)
begin
  declare environmentId int;
  if environmentName = ''
  then
    select rgr.id id,e.name environment,dr.name depender,de.name dependee,'goal' dependencyType,g.name dependency,rgr.rationale from rolegoalrole_dependency rgr, role dr, role de, environment e, goal g where rgr.environment_id = e.id and rgr.depender_id = dr.id and rgr.dependee_id = de.id and rgr.dependency_id = g.id
    union
    select rtr.id id,e.name environment,dr.name depender,de.name dependee,'task' dependencyType,t.name dependency,rtr.rationale from roletaskrole_dependency rtr, role dr, role de, environment e, task t where rtr.environment_id = e.id and rtr.depender_id = dr.id and rtr.dependee_id = de.id and rtr.dependency_id = t.id
    union
    select rar.id id,e.name environment,dr.name depender,de.name dependee,'asset' dependencyType,a.name dependency,rar.rationale from roleassetrole_dependency rar, role dr, role de, environment e, asset a where rar.environment_id = e.id and rar.depender_id = dr.id and rar.dependee_id = de.id and rar.dependency_id = a.id;
  else
    select id into environmentId from environment where name = environmentName;
    select rgr.id id,e.name environment,dr.name depender,de.name dependee,'goal' dependencyType,g.name dependency,rgr.rationale from rolegoalrole_dependency rgr, role dr, role de, environment e, goal g where rgr.environment_id = environmentId and rgr.environment_id = e.id and rgr.depender_id = dr.id and rgr.dependee_id = de.id and rgr.dependency_id = g.id
    union
    select rtr.id id,e.name environment,dr.name depender,de.name dependee,'task' dependencyType,t.name dependency,rtr.rationale from roletaskrole_dependency rtr, role dr, role de, environment e, task t where rtr.environment_id = environmentId and rtr.environment_id = e.id and rtr.depender_id = dr.id and rtr.dependee_id = de.id and rtr.dependency_id = t.id
    union
    select rar.id id,e.name environment,dr.name depender,de.name dependee,'asset' dependencyType,a.name dependency,rar.rationale from roleassetrole_dependency rar, role dr, role de, environment e, asset a where rar.environment_id = environmentId and rar.environment_id = e.id and rar.depender_id = dr.id and rar.dependee_id = de.id and rar.dependency_id = a.id;
  end if;
end
//

create procedure dependencyTable(in environmentName text)
begin
  declare envId int;
  select id into envId from environment where name = environmentName;
  select dr.name depender,de.name dependenee,'goal' dependencyType, dy.name dependency, rgr.rationale rationale from rolegoalrole_dependency rgr, role dr, role de, goal dy where rgr.environment_id = envId and rgr.depender_id = dr.id and rgr.dependee_id = de.id and rgr.dependency_id = dy.id
  union
  select dr.name depender,de.name dependenee,'task' dependencyType, dy.name dependency, rtr.rationale rationale from roletaskrole_dependency rtr, role dr, role de, task dy where rtr.environment_id = envId and rtr.depender_id = dr.id and rtr.dependee_id = de.id and rtr.dependency_id = dy.id
  union
  select dr.name depender,de.name dependenee,'asset' dependencyType, dy.name dependency, rar.rationale rationale from roleassetrole_dependency rar, role dr, role de, asset dy where rar.environment_id = envId and rar.depender_id = dr.id and rar.dependee_id = de.id and rar.dependency_id = dy.id;
end
//

create procedure getColouredGoals(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,originator,goalColour(id) from goal;
  else
    select id,name,originator,goalColour(id) from goal where id = constraintId;
  end if;
end
//

create function goalColour(goalId int) 
returns varchar(50)
deterministic 
begin
  declare gColour varchar(50) default 'red';
  declare envId int;
  declare done int default 0;
  declare gCount int default 0;
  declare envCursor cursor for select distinct environment_id from environment_goal where goal_id = goalId;
  declare continue handler for not found set done = 1;

  open envCursor;
  env_loop: loop
    fetch envCursor into envId;
    if done = 1
    then
      leave env_loop;
    end if;
    select ifnull(count(id),0) into gCount from goaltask_goalassociation where environment_id = envId and goal_id = goalId and ref_type_id = 0;
    if gCount > 0
    then
      set gColour = 'black';
    end if;
    select ifnull(count(id),0) into gCount from goalusecase_goalassociation where environment_id = envId and goal_id = goalId and ref_type_id = 0;
    if gCount > 0
    then
      set gColour = 'black';
    end if;
    select ifnull(count(id),0) into gCount from goalgoal_goalassociation where environment_id = envId and goal_id = goalId and ref_type_id in (0,1);
    if gCount > 0
    then
      set gColour = 'green';
    end if;
    select ifnull(count(id),0) into gCount from goalrequirement_goalassociation where environment_id = envId and goal_id = goalId and ref_type_id in (0,1);
    if gCount > 0
    then
      set gColour = 'green';
    end if;
    select ifnull(count(id),0) into gCount from goaldomainproperty_goalassociation where environment_id = envId and goal_id = goalId and ref_type_id = 0;
    if gCount > 0
    then
      set gColour = 'green';
    end if;
    select ifnull(count(id),0) into gCount from goalobstacle_goalassociation where environment_id = envId and goal_id = goalId;
    if gCount > 0
    then
      set gColour = 'black';
    end if;
  end loop env_loop;
  close envCursor;
  return gColour;
end
//

create procedure goalTree(in goalName text, in envName text,in topLevelGoals int,in caseFilter int)
begin
  declare goalId int;
  declare sgId int;
  declare environmentId int;
  declare compositeCount int;
  declare done int default 0;
  declare sgCursor cursor for select subgoal_id from goalgoal_goalassociation where goal_id = goalId and environment_id = environmentId union select subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id = environmentId;
  declare gCursor cursor for select goal_id from goalgoal_goalassociation where subgoal_id = goalId and environment_id = environmentId union select goal_id from goalrequirement_goalassociation where subgoal_id = goalId and environment_id = environmentId;
  declare continue handler for not found set done = 1;
  
  drop table if exists temp_goaltree;
  create temporary table temp_goaltree (id int,environment varchar(50),goal_name varchar(200), goal_dim varchar(50), ref_type varchar(50), subgoal_name varchar(200), subgoal_dim varchar(50), alternative_id int, rationale varchar(1000));

  if caseFilter = 1
  then
    select id into goalId from usecase where name = goalName;
  else
    select id into goalId from goal where name = goalName;
  end if;

  select id into environmentId from environment where name = envName;

  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if caseFilter = 1
  then
    if compositeCount <= 0
    then
      insert into temp_goaltree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
      select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.subgoal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
      union
      select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name,tg.name subgoal_name,'usecase' subgoal_dim,'0' alternative_id,'' rationale from requirement_usecase ga, environment e, requirement hg, usecase tg,asset_requirement ar, asset a,environment_usecase eu, reference_type rt where ga.usecase_id = goalId and ga.requirement_id = hg.id and ga.usecase_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and ga.usecase_id = eu.usecase_id and eu.environment_id = environmentId and ga.ref_type_id = rt.id
      union
      select -1 id,envName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name,tg.name subgoal_name,'usecase' subgoal_dim,'0' alternative_id,'' rationale from requirement_usecase ga, requirement hg, usecase tg,environment_requirement er, environment e, environment_usecase eu, reference_type rt where ga.usecase_id = goalId and ga.requirement_id = hg.id and ga.usecase_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and ga.usecase_id = eu.usecase_id and eu.environment_id = environmentId and ga.ref_type_id = rt.id;
    else
      insert into temp_goaltree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
      select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.subgoal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
      union
      select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name,tg.name subgoal_name,'usecase' subgoal_dim,'0' alternative_id,'' rationale from requirement_usecase ga, environment e, requirement hg, usecase tg,asset_requirement ar, asset a,environment_usecase eu, reference_type rt where ga.requirement_id = hg.id and ga.usecase_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and ga.usecase_id = eu.usecase_id and eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.ref_type_id = rt.id
      union
      select -1 id,envName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,rt.name,tg.name subgoal_name,'usecase' subgoal_dim,'0' alternative_id,'' rationale from requirement_usecase ga, requirement hg, usecase tg,environment_requirement er, environment e, environment_usecase eu, reference_type rt where ga.requirement_id = hg.id and ga.usecase_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and ga.usecase_id = eu.usecase_id and eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.ref_type_id = rt.id;
    end if;
  else
  if compositeCount <= 0
  then
    insert into temp_goaltree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'task',ga.alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'domainproperty',ga.alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select -1,e.name,hg.name,'goal','and',tg.name,'goal','0','None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_threat_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id = environmentId and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1,e.name,hg.name,'goal','and',tg.name,'goal','0','None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_vulnerability_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id = environmentId and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id = environmentId
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id = environmentId;
  else
    insert into temp_goaltree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'task',ga.alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'domainproperty',ga.alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1,e.name,hg.name,'goal','and',tg.name,'goal','0','None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_threat_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1,e.name,hg.name,'goal','and',tg.name,'goal','0','None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_vulnerability_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);
  end if;
  end if;

  if topLevelGoals = 0
  then
    set done = 0;
    if caseFilter = 1
    then
      open gCursor;
      g_loop: loop
        fetch gCursor into sgId;
        if done = 1
        then
          leave g_loop;
        end if;
        call subGoalTree(sgId,environmentId,caseFilter);
      end loop g_loop;
    else
      open sgCursor;
      sg_loop: loop
        fetch sgCursor into sgId;
        if done = 1
        then
          leave sg_loop;
        end if;
        call subGoalTree(sgId,environmentId,caseFilter);
      end loop sg_loop;
    close sgCursor;
    end if;
  end if;

  select id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale from temp_goaltree;
end
//




create procedure subGoalTree(in goalId int, in environmentId int,in caseFilter int)
begin
  declare sgId int;
  declare compositeCount int;
  declare environmentName varchar(50);
  declare done int default 0;
  declare sgCursor cursor for select subgoal_id from goalgoal_goalassociation where goal_id = goalId and environment_id = environmentId union select subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id = environmentId;
  declare continue handler for not found set done = 1;

  select name into environmentName from environment where id = environmentId;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    insert into temp_goaltree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'task',ga.alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = goalId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'domainproperty',ga.alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select -1,e.name,hg.name,'goal','and',tg.name, 'goal','0', 'None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_threat_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id = environmentId and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1,e.name,hg.name,'goal','and',tg.name,'goal','0','None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_vulnerability_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id = environmentId and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1,e.name,concat(a.short_code,'-',r.label),'requirement','and',t.name,'task',0,'' from requirement_task rt, environment e, environment_task et, environment_asset ea, requirement r, task t, asset_requirement ar, asset a where rt.requirement_id = goalId and  et.environment_id = environmentId and et.environment_id = e.id and et.task_id = t.id and et.environment_id = ea.environment_id and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rt.requirement_id and rt.task_id = t.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id = environmentId
    union
    select -1 id,environmentName environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id = environmentId;
/*    union
    select -1 id,environmentName environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id; */
  else
    insert into temp_goaltree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'task',ga.alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,concat(rm.short_code,'-',tg.label),'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'domainproperty',ga.alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id,e.name,hg.name,'goal',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg where ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1,e.name,hg.name,'goal','and',tg.name, 'goal','0', 'None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_threat_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1,e.name,hg.name,'goal','and',tg.name,'goal','0','None' from goal tg, response_goal trg, reaction_detection_mechanism rdm, countermeasure_asset ca, countermeasure_vulnerability_response_target ctrt, response_goal hrg, goal hg, environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eg.environment_id = e.id and hg.id = hrg.goal_id and hrg.response_id = rdm.response_id and rdm.environment_id = eg.environment_id and rdm.asset_id = ca.asset_id and ca.countermeasure_id = ctrt.countermeasure_id and ctrt.environment_id = eg.environment_id and ctrt.response_id = trg.response_id and trg.goal_id = tg.id and tg.id = eg.goal_id
    union
    select -1,e.name,concat(a.short_code,'-',r.label),'requirement','and',t.name,'task',0,'' from requirement_task rt, environment e, environment_task et, environment_asset ea, requirement r, task t, asset_requirement ar, asset a where rt.requirement_id = goalId and  et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = e.id and et.task_id = t.id and et.environment_id = ea.environment_id and ea.asset_id = a.id and a.id = ar.asset_id and ar.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.id = rt.requirement_id and rt.task_id = t.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = goalId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, goalrequirement_goalassociation grga where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.goal_id = goalId and grga.environment_id = environmentId;
/*    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a where ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id;*/
  end if;

  set done = 0;
  open sgCursor;
  sg_loop: loop
    fetch sgCursor into sgId;
    if done = 1
    then
      leave sg_loop;
    end if;
    call subGoalTree(sgId,environmentId,caseFilter);
  end loop sg_loop;
  close sgCursor;
end
//

create procedure subTaskModel(in taskName text, in envName text)
begin
  declare taskId int;
  declare environmentId int;
  declare compositeCount int;
  select id into taskId from task where name = taskName limit 1;
  select id into environmentId from environment where name = envName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'task_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from task_persona tp, environment e, task t, persona p where tp.task_id = taskId and tp.environment_id = environmentId and tp.environment_id = e.id and tp.task_id = t.id and tp.persona_id = p.id
    union
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'taskasset_association' ref_type,a.name subgoal_name,'asset' subgoal_dim,'0' alternative_id, '&lt;&lt;uses&gt;&gt;' rationale from task_asset ta, environment e, task t, asset a where ta.task_id = taskId and ta.environment_id = environmentId and ta.environment_id = e.id and ta.task_id = t.id and ta.asset_id = a.id
    union
    select -1 id,e.name environment,u.name goal_name,'usecase' goal_dim,'usecasetask_association' ref_type,t.name subgoal_name,'task' subgoal_dim,'0' alternative_id, '&lt;&lt;consequence&gt;&gt;' rationale from usecase_task ut, environment e, usecase u, task t, environment_usecase eu, environment_task et where eu.environment_id = environmentId and eu.environment_id = e.id and eu.environment_id = et.environment_id and ut.usecase_id = eu.usecase_id and eu.usecase_id = u.id and ut.task_id = et.task_id and et.task_id = t.id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecase_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, risk r, threat_attacker ta,attacker a,environment e, asset_threat at, task_asset taa where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id = environmentId and ta.environment_id = e.id and ta.attacker_id = a.id and r.threat_id = at.threat_id and at.environment_id = environmentId and at.asset_id = taa.asset_id and taa.task_id = taskId and at.environment_id = taa.environment_id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasethreatasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;',t.name,' threatens&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_threat ta,asset a, threat t, environment_vulnerability ev, environment e,task_asset taa where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id = environmentId and ta.environment_id = e.id and ta.asset_id = a.id and r.threat_id = t.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = ta.environment_id and ta.asset_id = taa.asset_id and taa.task_id = taskId and ta.environment_id = taa.environment_id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasevulnerabilityasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;exploits ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_vulnerability va,asset a, vulnerability v, environment_threat et, environment e,task_asset taa where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = va.vulnerability_id and va.environment_id = environmentId and va.environment_id = e.id and r.threat_id = et.threat_id and et.environment_id = va.environment_id and va.asset_id = a.id and r.vulnerability_id = v.id and va.asset_id = taa.asset_id and taa.task_id = taskId and va.environment_id = taa.environment_id
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasethreat_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;',r.name,' threatens&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_threat tha, threat th, task_asset taa,task t, environment_task et, environment e where m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = tha.threat_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.threat_id = th.id and taa.task_id = taskId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, task_asset taa,task t, environment_task et, environment e, vulnerability v where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id and taa.task_id = taskId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = taskId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = taskId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, task tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = tas.id and ta.task_id = taskId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, task tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = tas.id and ta.task_id = taskId;
  else
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'task_association' ref_type,p.name subgoal_name,'persona' subgoal_dim,'0' alternative_id, '' rationale from task_persona tp, environment e, task t, persona p where tp.task_id = taskId and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.environment_id = e.id and tp.task_id = t.id and tp.persona_id = p.id
    union
    select -1 id,e.name environment,t.name goal_name,'task' goal_dim,'taskasset_association' ref_type,a.name subgoal_name,'asset' subgoal_dim,'0' alternative_id, '&lt;&lt;uses&gt;&gt;' rationale from task_asset ta, environment e, task t, asset a where ta.task_id = taskId and ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.environment_id = e.id and ta.task_id = t.id and ta.asset_id = a.id
    union
    select -1 id,e.name environment,u.name goal_name,'usecase' goal_dim,'usecasetask_association' ref_type,t.name subgoal_name,'task' subgoal_dim,'0' alternative_id, '&lt;&lt;consequence&gt;&gt;' rationale from usecase_task ut, environment e, usecase u, task t, environment_usecase eu, environment_task et where eu.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and eu.environment_id = e.id and eu.environment_id = et.environment_id and ut.usecase_id = eu.usecase_id and eu.usecase_id = u.id and ut.task_id = et.task_id and et.task_id = t.id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecase_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, risk r, threat_attacker ta,attacker a,environment e, asset_threat at, task_asset taa where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.environment_id = e.id and ta.attacker_id = a.id and r.threat_id = at.threat_id and at.environment_id = environmentId and at.asset_id = taa.asset_id and taa.task_id = taskId and at.environment_id = taa.environment_id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasethreatasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;',t.name,' threatens&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_threat ta,asset a, threat t, environment_vulnerability ev, environment e,task_asset taa where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.environment_id = e.id and ta.asset_id = a.id and r.threat_id = t.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = ta.environment_id and ta.asset_id = taa.asset_id and taa.task_id = taskId and ta.environment_id = taa.environment_id
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasevulnerabilityasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;exploits ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_vulnerability va,asset a, vulnerability v, environment_threat et, environment e,task_asset taa where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = va.vulnerability_id and va.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and va.environment_id = e.id and r.threat_id = et.threat_id and et.environment_id = va.environment_id and va.asset_id = a.id and r.vulnerability_id = v.id and va.asset_id = taa.asset_id and taa.task_id = taskId and va.environment_id = taa.environment_id
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasethreat_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;',r.name,' threatens&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_threat tha, threat th, task_asset taa,task t, environment_task et, environment e where m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = tha.threat_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.threat_id = th.id and taa.task_id = taskId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, task_asset taa,task t, environment_task et, environment e, vulnerability v where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id and taa.task_id = taskId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = taskId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = taskId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, task tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = tas.id and ta.task_id = taskId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, task tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = tas.id and ta.task_id = taskId;
  end if;
end
//


create procedure subMisuseCaseModel(in mcName text, in envName text)
begin
  declare mcId int;
  declare environmentId int;
  declare compositeCount int;
  select id into mcId from misusecase where name = mcName limit 1;
  select id into environmentId from environment where name = envName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecase_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, risk r, threat_attacker ta,attacker a,environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id = environmentId and ta.environment_id = e.id and ta.attacker_id = a.id and mc.id = mcId
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasethreatasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;',t.name,' threatens&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_threat ta,asset a, threat t, environment_vulnerability ev, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id = environmentId and ta.environment_id = e.id and ta.asset_id = a.id and r.threat_id = t.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = ta.environment_id and mc.id = mcId
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasevulnerabilityasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;exploits ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_vulnerability va,asset a, vulnerability v, environment_threat et, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = va.vulnerability_id and va.environment_id = environmentId and va.environment_id = e.id and r.threat_id = et.threat_id and et.environment_id = va.environment_id and va.asset_id = a.id and r.vulnerability_id = v.id and mc.id = mcId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasethreat_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;',r.name,' threatens&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_threat tha, threat th, task_asset taa,task t, environment_task et, environment e where m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = tha.threat_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.threat_id = th.id and m.id = mcId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, task_asset taa,task t, environment_task et, environment e, vulnerability v where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id = environmentId and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id and m.id = mcId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and mc.id = mcId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and mc.id = mcId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, task tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id = environmentId and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = tas.id and mc.id = mcId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, task tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id = environmentId and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = tas.id and mc.id = mcId;
  else
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecase_association' ref_type,a.name subgoal_name, 'attacker' subgoal_dim,'0' alternative_id, '' rationale from misusecase mc, misusecase_risk mr, risk r, threat_attacker ta,attacker a,environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ta.environment_id = e.id and ta.attacker_id = a.id and mc.id = mcId
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasethreatasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;',t.name,' threatens&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_threat ta,asset a, threat t, environment_vulnerability ev, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = ta.threat_id and ta.environment_id in (select environment_id from composite_environment where composite_environment_id  = environmentId) and ta.environment_id = e.id and ta.asset_id = a.id and r.threat_id = t.id and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = ta.environment_id and mc.id = mcId
    union
    select -1 id,e.name environment,mc.name goal,'misusecase' goal_dim,'misusecasevulnerabilityasset_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;exploits ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, risk r, asset_vulnerability va,asset a, vulnerability v, environment_threat et, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = va.vulnerability_id and va.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and va.environment_id = e.id and r.threat_id = et.threat_id and et.environment_id = va.environment_id and va.asset_id = a.id and r.vulnerability_id = v.id and mc.id = mcId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasethreat_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;',r.name,' threatens&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_threat tha, threat th, task_asset taa,task t, environment_task et, environment e where m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = tha.threat_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.threat_id = th.id and m.id = mcId
    union
    select -1 id,e.name environment,t.name goal_dim,'task' goal_dim,'taskmisusecasevulnerability_association' ref_type,m.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;exploits ',r.name,'&gt;&gt;') rationale from misusecase m,misusecase_risk mr, risk r, asset_vulnerability tha, task_asset taa,task t, environment_task et, environment e, vulnerability v where m.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = tha.vulnerability_id and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tha.asset_id = taa.asset_id and taa.task_id = t.id and t.id = et.task_id and et.environment_id = tha.environment_id and et.environment_id = taa.environment_id and et.environment_id = e.id and tha.vulnerability_id = v.id and m.id = mcId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasethreatmitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',t.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and mc.id = mcId
    union
    select -1 id,e.name environment,mc.name goal_name, 'misusecase' goal_dim,'misusecasevulnerabilitymitigation_association' ref_type,a.name subgoal_name, 'asset' subgoal_dim,'0' alternative_id, concat('&lt;&lt;mitigates ',v.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and mc.id = mcId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, threat t, task tas, countermeasure_threat_target ctt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and t.id = ctt.threat_id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ctt.environment_id = e.id and ctt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = ctt.environment_id and ta.task_id = tas.id and mc.id = mcId
    union
    select -1 id,e.name environment,tas.name goal_name, 'task' goal_dim,'taskmisusecasemitigation_association' ref_type,mc.name subgoal_name, 'misusecase' subgoal_dim,'1' alternative_id, concat('&lt;&lt;mitigates ',r.name,'&gt;&gt;') rationale from misusecase mc, misusecase_risk mr, vulnerability v, task tas, countermeasure_vulnerability_target cvt, countermeasure_asset ca, asset a, task_asset ta, risk r, environment e where mc.id = mr.misusecase_id and mr.risk_id = r.id and r.vulnerability_id = v.id and v.id = cvt.vulnerability_id and cvt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and cvt.environment_id = e.id and cvt.countermeasure_id = ca.countermeasure_id and ca.asset_id = a.id and a.id = ta.asset_id and ta.environment_id = cvt.environment_id and ta.task_id = tas.id and mc.id = mcId;
  end if;
end
//

create function propertyName(propertyId int) 
returns varchar(50)
deterministic 
begin
  declare pName varchar(50);
  select name into pName from security_property where id = propertyId;
  return pName;
end
//

create function valueName(valueId int) 
returns varchar(50)
deterministic 
begin
  declare vName varchar(50);
  select name into vName from security_property_value where id = valueId;
  return vName;
end
//

create procedure associationDependencyCheck(in fromAsset text, in toAsset text, in envName text)
begin
  declare fromAssetId int;
  declare toAssetId int;
  declare envId int;
  declare fromCValue int;
  declare fromIValue int;
  declare fromAvValue int;
  declare fromAcValue int;
  declare fromAnValue int;
  declare fromPanValue int;
  declare fromUnlValue int;
  declare fromUnoValue int;
  declare toCValue int;
  declare toIValue int;
  declare toAvValue int;
  declare toAcValue int;
  declare toAnValue int;
  declare toPanValue int;
  declare toUnlValue int;
  declare toUnoValue int;
  drop table if exists temp_dependencywarnings;
  create temporary table temp_dependencywarnings (warningtxt varchar(255));

  select id into fromAssetId from asset where name = fromAsset;
  select id into toAssetId from asset where name = toAsset;
  select id into envId from environment where name = envName;

  select property_value_id into fromCValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 0;
  select property_value_id into fromIValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 1;
  select property_value_id into fromAvValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 2;
  select property_value_id into fromAcValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 3;
  select property_value_id into fromAnValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 4;
  select property_value_id into fromPanValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 5;
  select property_value_id into fromUnlValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 6;
  select property_value_id into fromUnoValue from asset_property where asset_id = fromAssetId and environment_id = envId and property_id = 7;
  select property_value_id into toCValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 0;
  select property_value_id into toIValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 1;
  select property_value_id into toAvValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 2;
  select property_value_id into toAcValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 3;
  select property_value_id into toAnValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 4;
  select property_value_id into toPanValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 5;
  select property_value_id into toUnlValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 6;
  select property_value_id into toUnoValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 7;

  if fromCValue > toCValue
  then
    insert into temp_dependencywarnings 
    select concat('Confidentiality value of ',fromAsset,' in this context is ',valueName(fromCValue),', but for ',toAsset,' it is ',valueName(toCValue),'.');
  end if; 

  if fromIValue > toIValue
  then
    insert into temp_dependencywarnings 
    select concat('Integrity value of ',fromAsset,' in this context is ',valueName(fromIValue),', but for ',toAsset,' it is ',valueName(toIValue),'.');
  end if; 

  if fromAvValue > toAvValue
  then
    insert into temp_dependencywarnings 
    select concat('Availability value of ',fromAsset,' in this context is ',valueName(fromAvValue),', but for ',toAsset,' it is ',valueName(toAvValue),'.');
  end if; 

  if fromAcValue > toAcValue
  then
    insert into temp_dependencywarnings 
    select concat('Accountability value of ',fromAsset,' in this context is ',valueName(fromAcValue),', but for ',toAsset,' it is ',valueName(toAcValue),'.');
  end if; 

  if fromAnValue > toAnValue
  then
    insert into temp_dependencywarnings 
    select concat('Anonymity value of the current asset in this context is ',valueName(fromAnValue),', but for ',toAsset,' it is ',valueName(toAnValue),'.');
  end if; 
  
  if fromPanValue > toPanValue
  then
    insert into temp_dependencywarnings 
    select concat('Pseudonymity value of the current asset in this context is ',valueName(fromPanValue),', but for ',toAsset,' it is ',valueName(toPanValue),'.');
  end if; 
  
  if fromUnlValue > toUnlValue
  then
    insert into temp_dependencywarnings 
    select concat('Unlinkability value of the current asset in this context is ',valueName(fromUnlValue),', but for ',toAsset,' it is ',valueName(toUnlValue),'.');
  end if; 

  if fromUnoValue > toUnoValue
  then
    insert into temp_dependencywarnings 
    select concat('Unobservability value of the current asset in this context is ',valueName(fromUnoValue),', but for ',toAsset,' it is ',valueName(toUnoValue),'.');
  end if; 
  
  select warningtxt from temp_dependencywarnings;
end
//

create procedure associationTargetDependencyCheck(in fromCValue int, in fromIValue int, in fromAvValue int, in fromAcValue int, in fromAnValue int, in fromPanValue int, in fromUnlValue int, in fromUnoValue int, in toAsset text, in envName text)
begin
  declare toAssetId int;
  declare envId int;
  declare toCValue int;
  declare toIValue int;
  declare toAvValue int;
  declare toAcValue int;
  declare toAnValue int;
  declare toPanValue int;
  declare toUnlValue int;
  declare toUnoValue int;
  drop table if exists temp_dependencywarnings;
  create temporary table temp_dependencywarnings (warningtxt varchar(255));

  select id into toAssetId from asset where name = toAsset;
  select id into envId from environment where name = envName;

  select property_value_id into toCValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 0;
  select property_value_id into toIValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 1;
  select property_value_id into toAvValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 2;
  select property_value_id into toAcValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 3;
  select property_value_id into toAnValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 4;
  select property_value_id into toPanValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 5;
  select property_value_id into toUnlValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 6;
  select property_value_id into toUnoValue from asset_property where asset_id = toAssetId and environment_id = envId and property_id = 7;

  if fromCValue > toCValue
  then
    insert into temp_dependencywarnings 
    select concat('Confidentiality value of the current asset in this context is ',valueName(fromCValue),', but for ',toAsset,' it is ',valueName(toCValue),'.');
  end if; 

  if fromIValue > toIValue
  then
    insert into temp_dependencywarnings 
    select concat('Integrity value of the current asset in this context is ',valueName(fromIValue),', but for ',toAsset,' it is ',valueName(toIValue),'.');
  end if; 

  if fromAvValue > toAvValue
  then
    insert into temp_dependencywarnings 
    select concat('Availability value of the current asset in this context is ',valueName(fromAvValue),', but for ',toAsset,' it is ',valueName(toAvValue),'.');
  end if; 

  if fromAcValue > toAcValue
  then
    insert into temp_dependencywarnings 
    select concat('Accountability value of the current asset in this context is ',valueName(fromAcValue),', but for ',toAsset,' it is ',valueName(toAcValue),'.');
  end if; 

  if fromAnValue > toAnValue
  then
    insert into temp_dependencywarnings 
    select concat('Anonymity value of the current asset in this context is ',valueName(fromAnValue),', but for ',toAsset,' it is ',valueName(toAnValue),'.');
  end if; 
  
  if fromPanValue > toPanValue
  then
    insert into temp_dependencywarnings 
    select concat('Pseudonymity value of the current asset in this context is ',valueName(fromPanValue),', but for ',toAsset,' it is ',valueName(toPanValue),'.');
  end if; 
  
  if fromUnlValue > toUnlValue
  then
    insert into temp_dependencywarnings 
    select concat('Unlinkability value of the current asset in this context is ',valueName(fromUnlValue),', but for ',toAsset,' it is ',valueName(toUnlValue),'.');
  end if; 

  if fromUnoValue > toUnoValue
  then
    insert into temp_dependencywarnings 
    select concat('Unobservability value of the current asset in this context is ',valueName(fromUnoValue),', but for ',toAsset,' it is ',valueName(toUnoValue),'.');
  end if; 
  
  select warningtxt from temp_dependencywarnings;
end
//

create procedure criticalAssetThreatCheck(in threatId int, in envId int, inout detailsBuf text, inout preScore int, inout postScore int)
begin
  declare done int default 0;
  declare criticalId int default 0;
  declare threatName varchar(200);
  declare assetName varchar(200);
  declare criticalCursor cursor for select a.is_critical,a.name from asset a, environment_asset ea,environment_threat et where ea.environment_id = envId and ea.asset_id = a.id and ea.environment_id = et.environment_id and et.threat_id = threatId;
  declare continue handler for not found set done = 1;

  set done = 0;
  select name into threatName from threat where id = threatId;

  open criticalCursor;
  critical_loop: loop
    fetch criticalCursor into criticalId, assetName;
    if done = 1
    then
      leave critical_loop;
    end if;
    if criticalId = 1
    then
      set detailsBuf = concat(detailsBuf,'** ',threatName,' threatens critical asset ',assetName,': maximising score **\n');
      set preScore = 9;
      set postScore = 9;
    end if;
  end loop critical_loop;
  close criticalCursor;
end
//

create procedure criticalAssetVulnerabilityCheck(in vulId int, in envId int, inout detailsBuf text, inout preScore int, inout postScore int)
begin
  declare done int default 0;
  declare criticalId int default 0;
  declare vulName varchar(50);
  declare assetName varchar(50);
  declare criticalCursor cursor for select a.is_critical,a.name from asset a, environment_asset ea,environment_vulnerability ev where ea.environment_id = envId and ea.asset_id = a.id and ea.environment_id = ev.environment_id and ev.vulnerability_id = vulId;
  declare continue handler for not found set done = 1;

  set done = 0;
  select name into vulName from vulnerability where id = vulId;

  open criticalCursor;
  critical_loop: loop
    fetch criticalCursor into criticalId, assetName;
    if done = 1
    then
      leave critical_loop;
    end if;
    if criticalId = 1
    then
      set detailsBuf = concat(detailsBuf,'** ',vulName,' exploits critical asset ',assetName,': maximising score **\n');
      set preScore = 9;
      set postScore = 9;
    end if;
  end loop critical_loop;
  close criticalCursor;
end
//

create procedure addTemplateAsset(in assetId int,in assetName text, in shortCode text, in assetDesc text, in assetSignificance text,in assetType text,in sType text,in aRight text)
begin
  declare assetTypeId int;
  declare taCount int;
  declare stId int;
  declare arId int;

  select count(id) into taCount from template_asset where name = assetName;
  if taCount = 0
  then
    select id into assetTypeId from asset_type where name = assetType;
    select id into stId from surface_type where name = sType;
    select id into arId from access_right where name = aRight;
    insert into template_asset(id,name,short_code,description,significance,asset_type_id,surface_type_id,access_right_id) values (assetId,assetName,shortCode,assetDesc,assetSignificance,assetTypeId,stId,arId);
  end if;
end
//

create procedure updateTemplateAsset(in assetId int,in assetName text, in shortCode text, in assetDesc text, in assetSignificance text,in assetType text, in sType text, in aRight text)
begin
  declare assetTypeId int;
  declare stId int;
  declare arId int;
  select id into assetTypeId from asset_type where name = assetType;
  select id into stId from surface_type where name = sType;
  select id into arId from access_right where name = aRight;
  
  update template_asset set name = assetName, short_code = shortCode, description = assetDesc, significance = assetSignificance, asset_type_id = assetTypeId, surface_type_id = stId, access_right_id = arId where id = assetId;
end
//


create procedure delete_template_asset(in assetId int)
begin
  if assetId = -1
  then
    delete from securitypattern_asset_template_asset;
    delete from component_asset_template_asset;
    delete from template_asset_interface;
    delete from template_asset_tag;
    delete from template_asset;
  else
    delete from template_asset_interface where template_asset_id = assetId;
    delete from securitypattern_asset_template_asset where template_asset_id = assetId;
    delete from component_asset_template_asset where template_asset_id = assetId;
    delete from template_asset_tag where template_asset_id = assetId;
    delete from template_asset where id = assetId;
  end if;
end
//

create procedure getTemplateAssets(in constraintId int)
begin
  if constraintId = -1
  then
    select a.id,a.name,a.short_code,a.description,a.significance,at.name,st.name,ar.name from template_asset a, asset_type at,surface_type st, access_right ar where a.asset_type_id = at.id and a.surface_type_id = st.id and a.access_right_id = ar.id;
  else
    select a.id,a.name,a.short_code,a.description,a.significance,at.name,st.name,ar.name from template_asset a,asset_type at,surface_type st, access_right ar where a.id = constraintId and a.asset_type_id = at.id and a.surface_type_id = st.id and a.access_right_id = ar.id;
  end if;
end
//

create procedure addSecurityPattern(in patternId int, in pName text, in pContext text, in pProb text, in pSol text)
begin
  insert into securitypattern(id,name,context,problem,solution) values (patternId,pName,pContext,pProb,pSol);
end
//

create procedure updateSecurityPattern(in patternId int, in pName text, in pContext text, in pProb text, in pSol text)
begin
  update securitypattern set name = pName, context = pContext, problem = pProb, solution = pSol where id = patternId;
end
//

create procedure delete_securitypattern(in patternId int)
begin
  call deleteSecurityPatternComponents(patternId);
  if patternId = -1
  then
    delete from securitypattern;
  else
    delete from securitypattern where id = patternId;
  end if;
end
//

create procedure template_assetNames()
begin
  select name from template_asset;
end
//

create procedure deleteSecurityPatternComponents(in patternId int)
begin
  if patternId = -1
  then
    delete from securitypattern_requirement;
    delete from securitypattern_classassociation;
  else
    delete from securitypattern_requirement where pattern_id = patternId;
    delete from securitypattern_classassociation where pattern_id = patternId;
  end if;
end
//

create procedure addSecurityPatternRequirement(in reqLabel int, in patternId int, in reqName text)
begin
  declare reqTypeId int;
  declare reqId int;

  select id into reqId from template_requirement where name = reqName;
  insert into securitypattern_template_requirement(template_requirement_id,pattern_id,label) values (reqId,patternId,reqLabel);
end
//

create procedure getSecurityPatternRequirements(in patternId int)
begin
  select rt.name,spr.name,spr.description,spr.rationale,spr.fit_criterion,ta.name from securitypattern_requirement spr, requirement_type rt, template_asset ta where spr.pattern_id = patternId and spr.asset_id = ta.id and spr.type_id = rt.id order by spr.label;
end
//

create procedure addSecurityPatternStructure(in assocId int,in patternId int, in headAsset text, in headType text, in headMult text,in headRole text, in tailRole text, in tailMult text, in tailType text, in tailAsset text)
begin
  declare headAssetId int;
  declare headTypeId int;
  declare headMultId int;
  declare tailMultId int;
  declare tailTypeId int;
  declare tailAssetId int;

  select id into headAssetId from template_asset where name = headAsset limit 1;
  select id into headTypeId from association_type where name = headType limit 1;
  select id into headMultId from multiplicity_type where name = headMult limit 1;
  select id into tailMultId from multiplicity_type where name = tailMult limit 1;
  select id into tailTypeId from association_type where name = tailType limit 1;
  select id into tailAssetId from template_asset where name = tailAsset limit 1;

  insert into securitypattern_classassociation(id,pattern_id,head_id,head_association_type_id,head_multiplicity_id,head_role_name,tail_role_name,tail_multiplicity_id,tail_association_type_id,tail_id) values(assocId,patternId,headAssetId,headTypeId,headMultId,headRole,tailRole,tailMultId,tailTypeId,tailAssetId);
end
//

create procedure getSecurityPatternStructure(in patternId int)
begin
    select ha.name,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,ta.name from securitypattern_classassociation a, template_asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, template_asset ta where a.pattern_id = patternId and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
end
//

create procedure getSecurityPatterns(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,context,problem,solution from securitypattern;
  else
    select id,name,context,problem,solution from securitypattern where id = constraintId;
  end if;
end
//


create procedure securityPatternAssets(in patternId int)
begin
  select ta.name from securitypattern_classassociation spc, template_asset ta where spc.pattern_id = patternId and spc.head_id = ta.id
  union
  select ta.name from securitypattern_classassociation spc, template_asset ta where spc.pattern_id = patternId and spc.tail_id = ta.id;
end
//

create procedure newId1(out lastId int)
begin
  select id into lastId from attributes;
  set lastId = lastId + 1;
  update attributes set id = lastId where name = 'did';
  commit;
end
//

create procedure situatePatternAsset(in assetId int, in patternId int)
begin
  declare done int default 0;
  declare templateAssetId int;
  declare assetName varchar(50);
  declare typeName varchar(50);
  declare reqDesc varchar(255);
  declare reqName varchar(4000);
  declare reqRationale varchar(255);
  declare reqFc varchar(255);
  declare reqLabel int;
  declare reqId int;
  declare patternName varchar(50);
  declare assetTemplateAssetCount int;
  declare patternReqsCursor cursor for select spr.label,rt.name,spr.name,spr.description,spr.rationale,spr.fit_criterion from securitypattern_requirement spr, requirement_type rt where spr.pattern_id = patternId and spr.asset_id = templateAssetId and spr.type_id = rt.id order by spr.label;
  declare continue handler for not found set done = 1;

  select name into assetName from asset where id = assetId;
  select id into templateAssetId from template_asset where name = assetName;
  select name into patternName from securitypattern where id = patternId;

  set done = 0;

  open patternReqsCursor;
  reqs_loop: loop
    fetch patternReqsCursor into reqLabel,typeName,reqName,reqDesc,reqRationale,reqFc;
    if done = 1
    then
      leave reqs_loop;
    end if;
    call newId1(reqId);
    call addRequirement(reqLabel,reqId,1,reqName,reqDesc,reqRationale,concat(patternName,' security pattern'),reqFc,1,typeName,assetName,1);
  end loop reqs_loop;
  close patternReqsCursor;

  select count(*) into assetTemplateAssetCount from securitypattern_asset_template_asset where asset_id = assetId and template_asset_id = templateAssetId and pattern_id = patternId;
  if assetTemplateAssetCount = 0
  then
    insert into securitypattern_asset_template_asset(asset_id,template_asset_id,pattern_id) values (assetId,templateAssetId,patternId);
  end if;
end
//

create function isCountermeasureAssetGenerated(cmId int)
returns int
deterministic 
begin
  declare cmAssetCount int;
  declare isGenerated int; 
  select count(*) into cmAssetCount from countermeasure_asset where countermeasure_id = cmId;
  if cmAssetCount > 0
  then
    set isGenerated = 1;
  else
    set isGenerated = 0;
  end if;
  return isGenerated;
end
//

create function isCountermeasurePatternGenerated(cmId int)
returns int
deterministic 
begin
  declare cmPatternCount int;
  declare isGenerated int; 
  select count(*) into cmPatternCount from countermeasure_securitypattern where countermeasure_id = cmId;
  if cmPatternCount > 0
  then
    set isGenerated = 1;
  else
    set isGenerated = 0;
  end if;
  return isGenerated;
end
//
create procedure securitypatternNames(in environmentName text)
begin
  select name from securitypattern;
end
//

create procedure exposedCountermeasure(in envName text, in assetName text)
begin
  declare envId int;
  declare assetId int;

  select id into envId from environment where name = envName;
  select id into assetId from asset where name = assetName;

  select concat(c.name,'(vulnerability: ',v.name,')'),te.name from countermeasure_asset ca, countermeasure c, countermeasure_vulnerability_target cvt, target_effectiveness te, vulnerability v where ca.asset_id = assetId and ca.countermeasure_id = c.id and c.id = cvt.countermeasure_id and cvt.effectiveness_id = te.id and cvt.vulnerability_id = v.id and cvt.environment_id = envId
  union
  select concat(c.name,'(threat: ',t.name,')'),te.name from countermeasure_asset ca, countermeasure c, countermeasure_threat_target ctt, target_effectiveness te, threat t where ca.asset_id = assetId and ca.countermeasure_id = c.id and c.id = ctt.countermeasure_id and ctt.effectiveness_id = te.id and ctt.threat_id = t.id and ctt.environment_id = envId
  union
  select concat(c.name,'(vulnerability: ',v.name,')'),te.name from countermeasure_securitypattern csp, countermeasure c, countermeasure_vulnerability_target cvt, target_effectiveness te, vulnerability v, securitypattern_classassociation sc, securitypattern_asset_template_asset ata where csp.countermeasure_id = c.id and c.id = cvt.countermeasure_id and cvt.effectiveness_id = te.id and cvt.vulnerability_id = v.id and cvt.environment_id = envId and csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.head_id = ata.template_asset_id and ata.asset_id = assetId
  union
  select concat(c.name,'(vulnerability: ',v.name,')'),te.name from countermeasure_securitypattern csp, countermeasure c, countermeasure_vulnerability_target cvt, target_effectiveness te, vulnerability v, securitypattern_classassociation sc, securitypattern_asset_template_asset ata where csp.countermeasure_id = c.id and c.id = cvt.countermeasure_id and cvt.effectiveness_id = te.id and cvt.vulnerability_id = v.id and cvt.environment_id = envId and csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.tail_id = ata.template_asset_id and ata.asset_id = assetId
  union
  select concat(c.name,'(threat: ',t.name,')'),te.name from countermeasure_securitypattern csp, countermeasure c, countermeasure_threat_target ctt, target_effectiveness te, threat t, securitypattern_classassociation sc, securitypattern_asset_template_asset ata where csp.countermeasure_id = c.id and c.id = ctt.countermeasure_id and ctt.effectiveness_id = te.id and ctt.threat_id = t.id and ctt.environment_id = envId and csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.head_id = ata.template_asset_id and ata.asset_id = assetId
  union
  select concat(c.name,'(threat: ',t.name,')'),te.name from countermeasure_securitypattern csp, countermeasure c, countermeasure_threat_target ctt, target_effectiveness te, threat t, securitypattern_classassociation sc, securitypattern_asset_template_asset ata where csp.countermeasure_id = c.id and c.id = ctt.countermeasure_id and ctt.effectiveness_id = te.id and ctt.threat_id = t.id and ctt.environment_id = envId and csp.pattern_id = sc.pattern_id and csp.pattern_id = ata.pattern_id and sc.tail_id = ata.template_asset_id and ata.asset_id = assetId;
end
//

create procedure updateCountermeasureEffectiveness(in objtId int, in dimName text, in cmName text, in assetName text, in envName text, in cmEffectiveness text)
begin
  declare cmId int;
  declare assetId int;
  declare envId int;
  declare effectivenessId int;

  select id into cmId from countermeasure where name = cmName;
  select id into assetId from asset where name = assetName;
  select id into envId from environment where name = envName;
  select id into effectivenessId from target_effectiveness where name = cmEffectiveness;

  if dimName = 'vulnerability'
  then
    insert into vulnerability_asset_countermeasure_effect(vulnerability_id,asset_id,environment_id,countermeasure_id,effectiveness_id) values (objtId,assetId,envId,cmId,effectivenessId);
  else
    insert into threat_asset_countermeasure_effect(threat_id,asset_id,environment_id,countermeasure_id,effectiveness_id) values (objtId,assetId,envId,cmId,effectivenessId);
  end if;

end
//

create procedure countermeasureEffectiveness(in dimName text, in environmentId int,in cmId int, inout currentEffectivenessId int, inout effComments text)
begin
  declare objtName varchar(50);
  declare cmAssetName varchar(50);
  declare effectivenessId int;
  declare initComments varchar(1000);
  declare workingComments varchar(1000);
  declare cmName varchar(50);
  declare cmEffName varchar(50);
  declare envName varchar(50);
  declare currentEffName varchar(50);
  declare exploitingRiskElementCMNames varchar(1000) default '';
  declare done int default 0;
  declare explVulCursor cursor for select v.name,a.name,vace.effectiveness_id from vulnerability v, vulnerability_asset_countermeasure_effect vace, asset a where vace.vulnerability_id = v.id and vace.environment_id = environmentId and vace.countermeasure_id = cmId and vace.asset_id = a.id;
  declare explThrCursor cursor for select t.name,a.name,tace.effectiveness_id from threat t, threat_asset_countermeasure_effect tace, asset a where tace.threat_id = t.id and tace.environment_id = environmentId and tace.countermeasure_id = cmId and tace.asset_id = a.id;
  declare continue handler for not found set done = 1;

  select name into cmName from countermeasure where id = cmId;
  select name into cmEffName from target_effectiveness where id = currentEffectivenessId;
  select name into envName from environment where id = environmentId;
  set initComments = concat('The effectiveness of ',cmName,' is normally ',cmEffName,', however the following influences apply: ');
  set workingComments = initComments;
 
  if dimName = 'vulnerability'
  then
    open explVulCursor;
  else
    open explThrCursor;
  end if;

  expl_loop: loop
    if dimName = 'vulnerability'
    then
      fetch explVulCursor into objtName, cmAssetName, effectivenessId;
    else
      fetch explThrCursor into objtName, cmAssetName, effectivenessId;
    end if;
     
    if done = 1
    then
      leave expl_loop;
    end if;
    select name into currentEffName from target_effectiveness where id = effectivenessId;
    set workingComments = concat(workingComments,'\n* ', dimName ,' ',objtName,' influences countermeasure asset ',cmAssetName);

    call exploitingRiskElementCountermeasures(dimName,objtName,environmentId,exploitingRiskElementCMNames);
    if exploitingRiskElementCMNames != ''
    then
      set workingComments = concat(workingComments,', but this ',dimName,' is currently safeguarded by: ',exploitingRiskElementCMNames);
    else
      set workingComments = concat(workingComments,', overriding the effectiveness of ',cmName,' in the ',envName,' environment from ',cmEffName,' to ',currentEffName,'. ');
      set currentEffectivenessId = effectivenessId;
    end if;
  
  end loop expl_loop;

  if dimName = 'vulnerability'
  then
    close explVulCursor;
  else
    close explThrCursor;
  end if;

  if (workingComments != initComments)
  then
    set effComments = concat(effComments,ifnull(workingComments,''));
  end if;
end
//

create procedure countermeasurePatterns(in cmId int)
begin
  select sp.name from countermeasure_securitypattern csp, securitypattern sp where csp.countermeasure_id = cmId and csp.pattern_id = sp.id;
end
//

create procedure securityPatternDependents(in cmId int)
begin
  declare assetId int;
  declare assetName varchar(50);
  declare assetPatterns int;
  declare done int default 0;
  declare assetCursor cursor for select a.id,a.name from countermeasure_securitypattern csp, securitypattern_classassociation sc, securitypattern_asset_template_asset ata, asset a where csp.countermeasure_id = cmId and csp.pattern_id = sc.pattern_id and sc.head_id = ata.template_asset_id and ata.asset_id = a.id union select a.id,a.name from countermeasure_securitypattern csp, securitypattern_classassociation sc, securitypattern_asset_template_asset ata, asset a where csp.countermeasure_id = cmId and csp.pattern_id = sc.pattern_id and sc.tail_id = ata.template_asset_id and ata.asset_id = a.id and ata.pattern_id = sc.pattern_id;
  declare continue handler for not found set done = 1;

  set done = 0;

  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId,assetName;
    if done = 1
    then
      leave asset_loop;
    end if;
    select ifnull(count(id),0) into assetPatterns from temp_asset where id = assetId;
    if (assetPatterns = 0)
    then
      insert into temp_asset values(assetId,assetName);
      call assetDependents(assetId);
    end if;
  end loop asset_loop;
  close assetCursor;
end
//

create procedure deleteSituatedPattern(in cmId int, in patternName text)
begin
  declare patternId int;
  select id into patternId from securitypattern where name = patternName;
  delete from countermeasure_securitypattern where countermeasure_id = cmId and pattern_id = patternId;
end
//

create procedure exploitingRiskElementCountermeasures(in dimName text,in objtName text,in environmentId int,out exploitingRiskElementCMNames text)
begin
  declare done int default 0;
  declare isFirst int default 1;
  declare objtId int;
  declare ereCmName varchar(50);
  declare exploitingThrCMCursor cursor for select cm.name from countermeasure cm, countermeasure_threat_target ctt where ctt.threat_id = objtId and ctt.environment_id = environmentId and ctt.countermeasure_id = cm.id;
  declare exploitingVulCMCursor cursor for select cm.name from countermeasure cm, countermeasure_vulnerability_target cvt where cvt.vulnerability_id = objtId and cvt.environment_id = environmentId and cvt.countermeasure_id = cm.id;
  declare continue handler for not found set done = 1;

  set isFirst = 1;
  set done = 0;

  if dimName = 'threat'
  then
    select id into objtId from threat where name = objtName;
    open exploitingThrCMCursor;
  else
    select id into objtId from vulnerability where name = objtName;
    open exploitingVulCMCursor;
  end if;

  erec_loop: loop

    if dimName = 'threat'
    then
      fetch exploitingThrCMCursor into ereCmName;
    else
      fetch exploitingVulCMCursor into ereCmName;
    end if;
    if done = 1
    then
      if isFirst = 0
      then
        set exploitingRiskElementCMNames = concat(exploitingRiskElementCMNames,'. ');
      end if;
      leave erec_loop;
    end if;
    if isFirst = 1
    then
      set exploitingRiskElementCMNames = '';
      set isFirst = 0;
    else
      set exploitingRiskElementCMNames = concat(exploitingRiskElementCMNames,', ');
    end if;
    set exploitingRiskElementCMNames = concat(exploitingRiskElementCMNames,ereCmName);
  end loop erec_loop;

  if dimName = 'threat'
  then
    close exploitingThrCMCursor;
  else
    close exploitingVulCMCursor;
  end if;
end
//

create procedure candidateCountermeasurePatterns(in cmId int)
begin
  select distinct sp.name from securitypattern sp, securitypattern_classassociation spca, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata, environment_asset hea, environment_asset tea, environment_countermeasure ec where sp.id = spca.pattern_id and spca.head_id = hata.template_asset_id and spca.pattern_id = hata.pattern_id and spca.pattern_id = tata.pattern_id and spca.tail_id = tata.template_asset_id and hata.asset_id = hea.asset_id and tata.asset_id = tea.asset_id and hea.environment_id = tea.environment_id and hea.environment_id = ec.environment_id and ec.countermeasure_id = cmId;
end
//

create procedure associateCountermeasureToPattern(in cmId int, in patternName text)
begin
  declare patternId int;

  select id into patternId from securitypattern where name = patternName;

  insert into countermeasure_asset(countermeasure_id,asset_id)
  select cmId,ata.asset_id from securitypattern_asset_template_asset ata, securitypattern_classassociation sca where sca.pattern_id = patternId and sca.pattern_id = ata.pattern_id and sca.head_id = ata.template_asset_id 
  union 
  select cmId,ata.asset_id from securitypattern_asset_template_asset ata, securitypattern_classassociation sca where sca.pattern_id = patternId and sca.pattern_id = ata.pattern_id and sca.tail_id = ata.template_asset_id;
end
//

create procedure nameExists(in objtName text, in dimName text)
begin
  declare objtCount int;
  declare ncSql varchar(4000);

  set ncSql = concat('select count(id) into @objtCount from ',dimName,' where name = "',objtName,'" limit 1');
  set @sql = ncSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set objtCount = @objtCount;
  select objtCount;
end
//

create procedure addExternalDocument(in docId int, in docName text, in docVersion text, in pubDate text, in docAuthors text, in edDesc text)
begin
  declare edId int;
  select id into edId from external_document where name = docName;
  if edId is null
  then 
    insert into external_document(id,name,version,publication_date,authors,description) values(docId,docName,docVersion,pubDate,docAuthors,edDesc);
  end if;
end
//

create procedure updateExternalDocument(in docId int, in docName text, in docVersion text, in pubDate text, in docAuthors text, in edDesc text)
begin
  update external_document set name = docName, version = docVersion, publication_date = pubDate, authors = docAuthors, description = edDesc where id = docId;
end
//

create procedure addDocumentReference(in refId int, in refName text, in docName text, in cName text, refExc text)
begin
  declare docId int;
  declare drId int;

  select id into drId from document_reference where name = refName;
  if drId is null
  then 
    select id into docId from external_document where name = docName;
    insert into document_reference(id,name,document_id,contributor,excerpt) values (refId,refName,docId,cName,refExc);
  end if;
end
//

create procedure updateDocumentReference(in refId int, in refName text, in docName text, in cName text, in refExc text)
begin
  declare docId int;

  select id into docId from external_document where name = docName;
  update document_reference set name = refName, document_id = docId,contributor = cName, excerpt = refExc where id = refId;

end
//

create procedure getExternalDocuments(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,version,publication_date,authors,ifnull(description,'') from external_document;
  else
    select id,name,version,publication_date,authors,ifnull(description,'') from external_document where id = constraintId;
  end if;
end
//

create procedure getPersonaExternalDocuments(in pName text)
begin
  declare pId int;
  select id into pId from persona where name = pName;
  select distinct ed.name,ed.version,ed.authors,ed.publication_date,ed.description from external_document ed, document_reference dr, persona_characteristic_document pcd, persona_characteristic pc where ed.id = dr.document_id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = pId order by 1;
end
//

create procedure getDocumentReferences(in constraintId int)
begin
  if constraintId = -1
  then
    select dr.id,dr.name,ed.name,dr.contributor,dr.excerpt from document_reference dr, external_document ed where dr.document_id = ed.id;
  else
    select dr.id,dr.name,ed.name,dr.contributor,dr.excerpt from document_reference dr, external_document ed where dr.id = constraintId and dr.document_id = ed.id;
  end if;
end
//

create procedure getDocumentReferencesByExternalDocument(in docName text)
begin
  declare edId int;

  if docName = ''
  then
    select dr.id,dr.name,ed.name,dr.contributor,dr.excerpt from document_reference dr, external_document ed where dr.document_id = ed.id;
  else
    select id into edId from external_document where name = docName;
    select dr.id,dr.name,ed.name,dr.contributor,dr.excerpt from document_reference dr, external_document ed where ed.id = edId and dr.document_id = ed.id;
  end if;
end
//

create procedure getPersonaDocumentReferences(in pName text)
begin
  declare pId int;

  select id into pId from persona where name = pName;
  select distinct dr.name,ed.name,dr.excerpt from document_reference dr, external_document ed, persona_characteristic_document pcd, persona_characteristic pc where dr.document_id = ed.id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = pId order by 1;
end
//

create procedure getPersonaConceptReferences(in pName text)
begin
  declare personaId int;

  select id into personaId from persona where name = pName;
  select ar.name,'asset' dimension_name,a.name object_name,ar.description from asset_reference ar, asset a, persona_characteristic_asset pca, persona_characteristic pc where ar.asset_id = a.id and ar.id = pca.reference_id and pca.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select ar.name,'attacker' dimension_name,a.name object_name,ar.description from attacker_reference ar, attacker a, persona_characteristic_attacker pca, persona_characteristic pc where ar.attacker_id = a.id and ar.id = pca.reference_id and pca.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select cr.name,'countermeasure' dimension_name,c.name object_name,cr.description from countermeasure_reference cr, countermeasure c, persona_characteristic_countermeasure pcc, persona_characteristic pc where cr.countermeasure_id = c.id and cr.id = pcc.reference_id and pcc.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select dr.name,'domainproperty' dimension_name,d.name object_name,dr.description from domainproperty_reference dr, domainproperty d, persona_characteristic_domainproperty pcd, persona_characteristic pc where dr.domainproperty_id = d.id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select er.name,'environment' dimension_name,e.name object_name,er.description from environment_reference er, environment e, persona_characteristic_environment pce, persona_characteristic pc where er.environment_id = e.id and er.id = pce.reference_id and pce.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select gr.name,'goal' dimension_name,g.name object_name,gr.description from goal_reference gr, goal g, persona_characteristic_goal pcg, persona_characteristic pc where gr.goal_id = g.id and gr.id = pcg.reference_id and pcg.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select m.name,'misusecase' dimension_name,m.name object_name,mr.description from misusecase_reference mr, misusecase m, persona_characteristic_misusecase pcm, persona_characteristic pc where mr.misusecase_id = m.id and mr.id = pcm.reference_id and pcm.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select obr.name,'obstacle' dimension_name,o.name object_name,obr.description from obstacle_reference obr, obstacle o, persona_characteristic_obstacle pco, persona_characteristic pc where obr.obstacle_id = o.id and obr.id = pco.reference_id and pco.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select pr.name,'persona' dimension_name,p.name object_name,pr.description from persona_reference pr, persona p, persona_characteristic_persona pcp, persona_characteristic pc where pr.persona_id = p.id and pr.id = pcp.reference_id and pcp.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select rr.name,'requirement' dimension_name,concat(a.short_code,'-',r.label) object_name,rr.description from requirement_reference rr, requirement r, asset a, asset_requirement ar, persona_characteristic_requirement pcr, persona_characteristic pc where rr.requirement_id = r.id and r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rr.id = pcr.reference_id and pcr.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select rr.name,'requirement' dimension_name,concat(e.short_code,'-',r.label) object_name,rr.description from requirement_reference rr, requirement r, environment e, environment_requirement er, persona_characteristic_requirement pcr, persona_characteristic pc where rr.requirement_id = r.id and r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rr.id = pcr.reference_id and pcr.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select rr.name,'risk' dimension_name,r.name object_name,rr.description from risk_reference rr, risk r, persona_characteristic_risk pcr, persona_characteristic pc where rr.risk_id = r.id and rr.id = pcr.reference_id and pcr.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select rr.name,'response' dimension_name,r.name object_name,rr.description from response_reference rr, response r, persona_characteristic_response pcr, persona_characteristic pc where rr.response_id = r.id and rr.id = pcr.reference_id and pcr.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select rr.name,'role' dimension_name,r.name object_name,rr.description from role_reference rr, role r, persona_characteristic_role pcr, persona_characteristic pc where rr.role_id = r.id and rr.id = pcr.reference_id and pcr.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select tr.name,'task' dimension_name,t.name object_name,tr.description from task_reference tr, task t, persona_characteristic_task pct, persona_characteristic pc where tr.task_id = t.id and tr.id = pct.reference_id and pct.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select tr.name,'threat' dimension_name,t.name object_name,tr.description from threat_reference tr, threat t, persona_characteristic_threat pct, persona_characteristic pc where tr.threat_id = t.id and tr.id = pct.reference_id and pct.characteristic_id = pc.id and pc.persona_id = personaId
  union
  select vr.name,'vulnerability' dimension_name,v.name object_name,vr.description from vulnerability_reference vr, vulnerability v, persona_characteristic_vulnerability pcv, persona_characteristic pc where vr.vulnerability_id = v.id and vr.id = pcv.reference_id and pcv.characteristic_id = pc.id and pc.persona_id = personaId;
end
//

create procedure getConceptReferences(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,dimension_name,object_name,description from concept_reference;
  else
    select id,name,dimension_name,object_name,description from concept_reference where id = constraintId;
  end if;
end
//

create procedure delete_external_document(in docId int)
begin
  if docId != -1
  then
    delete from external_document where id = docId;
  else
    delete from external_document;
  end if;
end
//

create procedure delete_document_reference(in refId int)
begin
  if refId != -1
  then
    delete from persona_characteristic_document where reference_id = refId;
    delete from document_reference_synopsis where reference_id = refId;
    delete from document_reference where id = refId;
  else
    delete from persona_characteristic_document;
    delete from document_reference_synopsis;
    delete from document_reference;
  end if;
end
//



create procedure addPersonaCharacteristic(in pcId int, in pName text, in qualName text, in bvName text, in cDesc text)
begin
  declare personaId int;
  declare bvId int;

  select id into personaId from persona where name = pName;
  select id into bvId from behavioural_variable where name = bvName;

  insert into persona_characteristic(id,persona_id,variable_id,qualifier,description) values (pcId,personaId,bvId,qualName,cDesc);
end
//

create procedure updatePersonaCharacteristic(in pcId int, in pName text, in qualName text, in bvName text, in cDesc text)
begin
  declare personaId int;
  declare bvId int;

  select id into personaId from persona where name = pName;
  select id into bvId from behavioural_variable where name = bvName;

  update persona_characteristic set persona_id = personaId, variable_id = bvId, qualifier = qualName, description = cDesc where id = pcId;
end
//

create procedure addPersonaCharacteristicReference(in pcId int, in refName text, in crTypeName text, in refDesc text, in dimName text)
begin
  declare crTypeId int;
  declare refId int;

  select id into crTypeId from characteristic_reference_type where name = crTypeName;

  if dimName = 'document'
  then
    select id into refId from document_reference where name = refName;
    if (refDesc != '')
    then
      update document_reference set excerpt = refDesc where id = refId;
    end if;
    insert into persona_characteristic_document(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'asset'
  then
    select id into refId from asset_reference where name = refName;
    if (refDesc != '')
    then
      update asset_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_asset(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'attacker'
  then
    select id into refId from attacker_reference where name = refName;
    if (refDesc != '')
    then
      update attacker_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_attacker(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'countermeasure'
  then
    select id into refId from countermeasure_reference where name = refName;
    if (refDesc != '')
    then
      update countermeasure_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_countermeasure(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'domainproperty'
  then
    select id into refId from domainproperty_reference where name = refName;
    if (refDesc != '')
    then
      update domainproperty_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_domainproperty(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'environment'
  then
    select id into refId from environment_reference where name = refName;
    if (refDesc != '')
    then
      update environment_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_environment(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'goal'
  then
    select id into refId from goal_reference where name = refName;
    if (refDesc != '')
    then
      update goal_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_goal(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'misusecase'
  then
    select id into refId from misusecase_reference where name = refName;
    if (refDesc != '')
    then
      update misusecase_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_misusecase(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'obstacle'
  then
    select id into refId from obstacle_reference where name = refName;
    if (refDesc != '')
    then
      update obstacle_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_obstacle(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'persona'
  then
    select id into refId from persona_reference where name = refName;
    if (refDesc != '')
    then
      update persona_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_persona(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'requirement'
  then
    select id into refId from requirement_reference where name = refName;
    if (refDesc != '')
    then
      update requirement_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_requirement(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'response'
  then
    select id into refId from response_reference where name = refName;
    if (refDesc != '')
    then
      update response_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_response(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'risk'
  then
    select id into refId from risk_reference where name = refName;
    if (refDesc != '')
    then
      update risk_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_risk(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'role'
  then
    select id into refId from role_reference where name = refName;
    if (refDesc != '')
    then
      update role_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_role(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'task'
  then
    select id into refId from task_reference where name = refName;
    if (refDesc != '')
    then
      update task_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_task(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  elseif dimName = 'threat'
  then
    select id into refId from threat_reference where name = refName;
    if (refDesc != '')
    then
      update threat_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_threat(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  else
    select id into refId from vulnerability_reference where name = refName;
    if (refDesc != '')
    then
      update vulnerability_reference set description = refDesc where id = refId;
    end if;
    insert into persona_characteristic_vulnerability(characteristic_id,reference_id,characteristic_reference_type_id) values (pcId,refId,crTypeId);
  end if; 
end
//

create procedure getPersonaCharacteristics(in constraintId int)
begin
  if constraintId = -1
  then
    select pc.id,p.name,bv.name,pc.qualifier,pc.description from persona_characteristic pc, persona p, behavioural_variable bv where pc.persona_id = p.id and pc.variable_id = bv.id order by 2,3;
  else
    select pc.id,p.name,bv.name,pc.qualifier,pc.description from persona_characteristic pc, persona p, behavioural_variable bv where pc.id = constraintId and  pc.persona_id = p.id and pc.variable_id = bv.id order by 2,3;
  end if;
end
//

create procedure delete_persona_characteristic(in pcId int)
begin
  call deletePersonaCharacteristicComponents(pcId);

  if pcId != -1
  then
    delete from persona_characteristic_synopsis where characteristic_id = pcId;
    delete from persona_characteristic where id = pcId;
  else
    delete from persona_characteristic_synopsis;
    delete from persona_characteristic;
  end if;
end
//

create procedure external_documentNames(in eName text)
begin
  select name from external_document;
end
//

create procedure document_referenceNames(in eName text)
begin
  select name from document_reference;
end
//

create procedure behavioural_variableNames(in eName text)
begin
  select name from behavioural_variable;
end
//

create procedure personaBehaviouralCharacteristics(in pName text, in bvName text)
begin
  declare pId int;
  declare bvId int;
 
  select id into pId from persona where name = pName;
  select id into bvId from behavioural_variable where name = bvName;

  select id,qualifier,description from persona_characteristic where persona_id = pId and variable_id = bvId order by 2,3;
end
//

create procedure trace_dimensionNames(in environmentName text)
begin
  select name from trace_dimension order by 1;
end
//

create procedure addConceptReference(in refId int, in refName text, in dimName text, in objtName text, in cDesc text)
begin
  declare objtId int;
  declare shortCode varchar(50);
  declare reqLabel int;

  if dimName = 'asset'
  then
    select id into objtId from asset where name = objtName;
    insert into asset_reference(id,asset_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'attacker'
  then
    select id into objtId from attacker where name = objtName;
    insert into attacker_reference(id,attacker_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'countermeasure'
  then
    select id into objtId from countermeasure where name = objtName;
    insert into countermeasure_reference(id,countermeasure_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'domainproperty'
  then
    select id into objtId from domainproperty where name = objtName;
    insert into domainproperty_reference(id,domainproperty_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'environment'
  then
    select id into objtId from environment where name = objtName;
    insert into environment_reference(id,environment_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'goal'
  then
    select id into objtId from goal where name = objtName;
    insert into goal_reference(id,goal_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'misusecase'
  then
    select id into objtId from misusecase where name = objtName;
    insert into misusecase_reference(id,misusecase_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'obstacle'
  then
    select id into objtId from obstacle where name = objtName;
    insert into obstacle_reference(id,obstacle_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'persona'
  then
    select id into objtId from persona where name = objtName;
    insert into persona_reference(id,persona_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'requirement'
  then
    select o.id into objtId from requirement o where o.name = objtName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    insert into requirement_reference(id,requirement_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'response'
  then
    select id into objtId from response where name = objtName;
    insert into response_reference(id,response_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'risk'
  then
    select id into objtId from risk where name = objtName;
    insert into risk_reference(id,risk_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'role'
  then
    select id into objtId from role where name = objtName;
    insert into role_reference(id,role_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'task'
  then
    select id into objtId from task where name = objtName;
    insert into task_reference(id,task_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'threat'
  then
    select id into objtId from threat where name = objtName;
    insert into threat_reference(id,threat_id,name,description) values (refId,objtId,refName,cDesc);
  elseif dimName = 'usecase'
  then
    select id into objtId from usecase where name = objtName;
    insert into usecase_reference(id,usecase_id,name,description) values (refId,objtId,refName,cDesc);
  else
    select id into objtId from vulnerability where name = objtName;
    insert into vulnerability_reference(id,vulnerability_id,name,description) values (refId,objtId,refName,cDesc);
  end if;
end
//

create procedure updateConceptReference(in refId int, in refName text, in dimName text, in objtName text, in cDesc text)
begin
  declare objtId int;
  declare shortCode varchar(50);
  declare reqLabel int;

  if dimName = 'asset'
  then
    select id into objtId from asset where name = objtName;
    update asset_reference set asset_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'attacker'
  then
    select id into objtId from attacker where name = objtName;
    update attacker_reference set attacker_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'countermeasure'
  then
    select id into objtId from countermeasure where name = objtName;
    update countermeasure_reference set countermeasure_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'domainproperty'
  then
    select id into objtId from domainproperty where name = objtName;
    update domainproperty_reference set domainproperty_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'environment'
  then
    select id into objtId from environment where name = objtName;
    update environment_reference set environment_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'goal'
  then
    select id into objtId from goal where name = objtName;
    update goal_reference set goal_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'misusecase'
  then
    select id into objtId from misusecase where name = objtName;
    update misusecase_reference set misusecase_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'obstacle'
  then
    select id into objtId from obstacle where name = objtName;
    update obstacle_reference set obstacle_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'persona'
  then
    select id into objtId from persona where name = objtName;
    update persona_reference set persona_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'requirement'
  then
    select o.id into objtId from requirement o where o.name = objtName and o.version = (select max(i.version) from requirement i where i.id = o.id);
    update requirement_reference set requirement_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'response'
  then
    select id into objtId from response where name = objtName;
    update response_reference set response_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'risk'
  then
    select id into objtId from risk where name = objtName;
    update risk_reference set risk_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'role'
  then
    select id into objtId from role where name = objtName;
    update role_reference set role_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'task'
  then
    select id into objtId from task where name = objtName;
    update task_reference set task_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'threat'
  then
    select id into objtId from threat where name = objtName;
    update threat_reference set threat_id = objtId, name = refName, description = cDesc where id = refId;
  elseif dimName = 'usecase'
  then
    select id into objtId from usecase where name = objtName;
    update usecase_reference set usecase_id = objtId, name = refName, description = cDesc where id = refId;
  else
    select id into objtId from vulnerability where name = objtName;
    update vulnerability_reference set vulnerability_id = objtId, name = refName, description = cDesc where id = refId;
  end if;
end
//

create procedure concept_referenceNames(in eName text)
begin
  select name from concept_reference order by 1;
end
//

create procedure delete_concept_reference(in refId int, in dimName text)
begin
  if dimName = 'asset'
  then
    delete from persona_characteristic_asset where reference_id = refId;
    delete from asset_reference where id = refId;
  elseif dimName = 'attacker'
  then
    delete from persona_characteristic_attacker where reference_id = refId;
    delete from attacker_reference where id = refId;
  elseif dimName = 'countermeasure'
  then
    delete from persona_characteristic_countermeasure where reference_id = refId;
    delete from countermeasure_reference where id = refId;
  elseif dimName = 'domainproperty'
  then
    delete from persona_characteristic_domainproperty where reference_id = refId;
    delete from domainproperty_reference where id = refId;
  elseif dimName = 'environment'
  then
    delete from persona_characteristic_environment where reference_id = refId;
    delete from environment_reference where id = refId;
  elseif dimName = 'goal'
  then
    delete from persona_characteristic_goal where reference_id = refId;
    delete from goal_reference where id = refId;
  elseif dimName = 'misusecase'
  then
    delete from persona_characteristic_misusecase where reference_id = refId;
    delete from misusecase_reference where id = refId;
  elseif dimName = 'obstacle'
  then
    delete from persona_characteristic_obstacle where reference_id = refId;
    delete from obstacle_reference where id = refId;
  elseif dimName = 'persona'
  then
    delete from persona_characteristic_persona where reference_id = refId;
    delete from persona_reference where id = refId;
  elseif dimName = 'requirement'
  then
    delete from persona_characteristic_requirement where reference_id = refId;
    delete from requirement_reference where id = refId;
  elseif dimName = 'response'
  then
    delete from persona_characteristic_response where reference_id = refId;
    delete from response_reference where id = refId;
  elseif dimName = 'risk'
  then
    delete from persona_characteristic_risk where reference_id = refId;
    delete from risk_reference where id = refId;
  elseif dimName = 'role'
  then
    delete from persona_characteristic_role where reference_id = refId;
    delete from role_reference where id = refId;
  elseif dimName = 'task'
  then
    delete from persona_characteristic_task where reference_id = refId;
    delete from task_reference where id = refId;
  elseif dimName = 'threat'
  then
    delete from persona_characteristic_threat where reference_id = refId;
    delete from threat_reference where id = refId;
  else
    delete from persona_characteristic_vulnerability where reference_id = refId;
    delete from vulnerability_reference where id = refId;
  end if;

end
//
create procedure characteristicReferences(in pcId int)
begin
  select cr.name reference_name, crt.name characteristic_type_name, cr.excerpt description, 'document' dimension_name from persona_characteristic_document pc, document_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'asset' dimension_name from persona_characteristic_asset pc, asset_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'attacker' dimension_name from persona_characteristic_attacker pc, attacker_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'countermeasure' dimension_name from persona_characteristic_countermeasure pc, countermeasure_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'domainproperty' dimension_name from persona_characteristic_domainproperty pc, domainproperty_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'environment' dimension_name from persona_characteristic_environment pc, environment_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'goal' dimension_name from persona_characteristic_goal pc, goal_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'misusecase' dimension_name from persona_characteristic_misusecase pc, misusecase_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'obstacle' dimension_name from persona_characteristic_obstacle pc, obstacle_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'persona' dimension_name from persona_characteristic_persona pc, persona_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'requirement' dimension_name from persona_characteristic_requirement pc, requirement_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'risk' dimension_name from persona_characteristic_risk pc, risk_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'response' dimension_name from persona_characteristic_response pc, response_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'role' dimension_name from persona_characteristic_role pc, role_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'task' dimension_name from persona_characteristic_task pc, task_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'threat' dimension_name from persona_characteristic_threat pc, threat_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'vulnerability' dimension_name from persona_characteristic_vulnerability pc, vulnerability_reference cr, characteristic_reference_type crt where pc.characteristic_id = pcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id;
end
//


create procedure deletePersonaCharacteristicComponents(in pcId int)
begin
    if pcId != -1
    then
      delete from persona_characteristic_document where characteristic_id = pcId;
      delete from persona_characteristic_asset where characteristic_id = pcId;
      delete from persona_characteristic_attacker where characteristic_id = pcId;
      delete from persona_characteristic_countermeasure where characteristic_id = pcId;
      delete from persona_characteristic_domainproperty where characteristic_id = pcId;
      delete from persona_characteristic_environment where characteristic_id = pcId;
      delete from persona_characteristic_goal where characteristic_id = pcId;
      delete from persona_characteristic_misusecase where characteristic_id = pcId;
      delete from persona_characteristic_obstacle where characteristic_id = pcId;
      delete from persona_characteristic_persona where characteristic_id = pcId;
      delete from persona_characteristic_requirement where characteristic_id = pcId;
      delete from persona_characteristic_risk where characteristic_id = pcId;
      delete from persona_characteristic_response where characteristic_id = pcId;
      delete from persona_characteristic_role where characteristic_id = pcId;
      delete from persona_characteristic_task where characteristic_id = pcId;
      delete from persona_characteristic_threat where characteristic_id = pcId;
      delete from persona_characteristic_vulnerability where characteristic_id = pcId;
    else
      delete from persona_characteristic_document;
      delete from persona_characteristic_asset;
      delete from persona_characteristic_attacker;
      delete from persona_characteristic_countermeasure;
      delete from persona_characteristic_domainproperty;
      delete from persona_characteristic_environment;
      delete from persona_characteristic_goal;
      delete from persona_characteristic_misusecase;
      delete from persona_characteristic_obstacle;
      delete from persona_characteristic_persona;
      delete from persona_characteristic_requirement;
      delete from persona_characteristic_risk;
      delete from persona_characteristic_response;
      delete from persona_characteristic_role;
      delete from persona_characteristic_task;
      delete from persona_characteristic_threat;
      delete from persona_characteristic_vulnerability;
    end if;
end
//

create procedure asset_referenceNames(in eName text)
begin
  select name from asset_reference order by 1;
end
//

create procedure attacker_referenceNames(in eName text)
begin
  select name from attacker_reference order by 1;
end
//

create procedure countermeasure_referenceNames(in eName text)
begin
  select name from countermeasure_reference order by 1;
end
//

create procedure domainproperty_referenceNames(in eName text)
begin
  select name from domainproperty_reference order by 1;
end
//

create procedure environment_referenceNames(in eName text)
begin
  select name from environment_reference order by 1;
end
//

create procedure goal_referenceNames(in eName text)
begin
  select name from goal_reference order by 1;
end
//

create procedure misusecase_referenceNames(in eName text)
begin
  select name from misusecase_reference order by 1;
end
//

create procedure obstacle_referenceNames(in eName text)
begin
  select name from obstacle_reference order by 1;
end
//

create procedure persona_referenceNames(in eName text)
begin
  select name from persona_reference order by 1;
end
//

create procedure requirement_referenceNames(in eName text)
begin
  select name from requirement_reference order by 1;
end
//

create procedure response_referenceNames(in eName text)
begin
  select name from response_reference order by 1;
end
//

create procedure risk_referenceNames(in eName text)
begin
  select name from risk_reference order by 1;
end
//

create procedure role_referenceNames(in eName text)
begin
  select name from role_reference order by 1;
end
//

create procedure task_referenceNames(in eName text)
begin
  select name from task_reference order by 1;
end
//

create procedure threat_referenceNames(in eName text)
begin
  select name from threat_reference order by 1;
end
//

create procedure vulnerability_referenceNames(in eName text)
begin
  select name from vulnerability_reference order by 1;
end
//

create procedure referenceDescription(in dimName text, in refName text)
begin
  if dimName = 'document'
  then
    select excerpt from document_reference where name = refName;
  elseif dimName = 'asset'
  then
    select description from asset_reference where name = refName;
  elseif dimName = 'attacker'
  then
    select description from attacker_reference where name = refName;
  elseif dimName = 'countermeasure'
  then
    select description from countermeasure_reference where name = refName;
  elseif dimName = 'domainproperty'
  then
    select description from domainproperty_reference where name = refName;
  elseif dimName = 'environment'
  then
    select description from environment_reference where name = refName;
  elseif dimName = 'goal'
  then
    select description from goal_reference where name = refName;
  elseif dimName = 'misusecase'
  then
    select description from misusecase_reference where name = refName;
  elseif dimName = 'obstacle'
  then
    select description from obstacle_reference where name = refName;
  elseif dimName = 'persona'
  then
    select description from persona_reference where name = refName;
  elseif dimName = 'requirement'
  then
    select description from requirement_reference where name = refName;
  elseif dimName = 'response'
  then
    select description from response_reference where name = refName;
  elseif dimName = 'risk'
  then
    select description from risk_reference where name = refName;
  elseif dimName = 'role'
  then
    select description from role_reference where name = refName;
  elseif dimName = 'task'
  then
    select description from task_reference where name = refName;
  elseif dimName = 'threat'
  then
    select description from threat_reference where name = refName;
  else
    select description from vulnerability_reference where name = refName;
  end if;
end
//

create procedure documentReferenceNames(in docName text)
begin
  select dr.name from document_reference dr, external_document ed where ed.name = docName and dr.document_id = ed.id;
end
//

create procedure referenceUse(in refName text, in refType text)
begin
  if refType = 'document_reference'
  then
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_document pcd, document_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id;
  else
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_asset pcd, asset_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_attacker pcd, attacker_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_countermeasure pcd, countermeasure_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_domainproperty pcd, domainproperty_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_environment pcd, environment_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_goal pcd, goal_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_misusecase pcd, misusecase_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_obstacle pcd, obstacle_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_persona pcd, persona_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_requirement pcd, requirement_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_response pcd, response_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_risk pcd, risk_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_role pcd, role_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_task pcd, task_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_threat pcd, threat_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id
    union
    select p.name,bv.name,pc.description from persona_characteristic pc, persona_characteristic_vulnerability pcd, vulnerability_reference cr, persona p, behavioural_variable bv where cr.name = refName and cr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id = p.id and pc.variable_id = bv.id;
  end if;
end
//

create procedure characteristicBacking(in pcId int)
begin
  select ed.name,dr.name from external_document ed, document_reference dr, persona_characteristic_document pcd where pcd.characteristic_id = pcId and pcd.reference_id = dr.id and dr.document_id = ed.id and pcd.characteristic_reference_type_id = 1
  union
  select concat('asset ',c.name),cr.name from asset c, asset_reference cr, persona_characteristic_asset pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.asset_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('attacker ',c.name),cr.name from attacker c, attacker_reference cr, persona_characteristic_attacker pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.attacker_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('countermeasure ',c.name),cr.name from countermeasure c, countermeasure_reference cr, persona_characteristic_countermeasure pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.countermeasure_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('domainproperty ',c.name),cr.name from domainproperty c, domainproperty_reference cr, persona_characteristic_domainproperty pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.domainproperty_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('environment ',c.name),cr.name from environment c, environment_reference cr, persona_characteristic_environment pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.environment_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('goal ',c.name),cr.name from goal c, goal_reference cr, persona_characteristic_goal pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.goal_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('misusecase ',c.name),cr.name from misusecase c, misusecase_reference cr, persona_characteristic_misusecase pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.misusecase_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('obstacle ',c.name),cr.name from obstacle c, obstacle_reference cr, persona_characteristic_obstacle pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.obstacle_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('persona ',c.name),cr.name from persona c, persona_reference cr, persona_characteristic_persona pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.persona_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('requirement ',concat(a.short_code,'-',c.label)), cr.name from requirement c, asset a, asset_requirement ar, requirement_reference cr, persona_characteristic_requirement pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.requirement_id = c.id and pcc.characteristic_reference_type_id = 1 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id)
  union
  select concat('requirement ',concat(e.short_code,'-',c.label)), cr.name from requirement c, environment e, environment_requirement er, requirement_reference cr, persona_characteristic_requirement pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.requirement_id = c.id and pcc.characteristic_reference_type_id = 1 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id)
  union
  select concat('response ',c.name),cr.name from response c, response_reference cr, persona_characteristic_response pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.response_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('risk ',c.name),cr.name from risk c, risk_reference cr, persona_characteristic_risk pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.risk_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('role ',c.name),cr.name from role c, role_reference cr, persona_characteristic_role pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.role_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('task ',c.name),cr.name from task c, task_reference cr, persona_characteristic_task pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.task_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('threat ',c.name),cr.name from threat c, threat_reference cr, persona_characteristic_threat pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.threat_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('vulnerability ',c.name),cr.name from vulnerability c, vulnerability_reference cr, persona_characteristic_vulnerability pcc where pcc.characteristic_id = pcId and pcc.reference_id = cr.id and cr.vulnerability_id = c.id and pcc.characteristic_reference_type_id = 1;
end
//

create procedure assumptionPersonaModel(in personaName text, in bvName text, in pcName text)
begin
  if personaName = '' and bvName = '' and pcName = ''
  then
    call assumptionPersonaModel_all(personaName,bvName,pcName);
  elseif personaName  = '' and bvName = '' and pcName != ''
  then
    call assumptionPersonaModel_c(personaName,bvName,pcName);
  elseif personaName  = '' and bvName != '' and pcName = ''
  then
    call assumptionPersonaModel_b(personaName,bvName,pcName);
  elseif personaName  = '' and bvName != '' and pcName != ''
  then
    call assumptionPersonaModel_bc(personaName,bvName,pcName);
  elseif personaName != '' and bvName = '' and pcName = ''
  then
    call assumptionPersonaModel_p(personaName,bvName,pcName);
  elseif personaName != '' and bvName = '' and pcName != ''
  then
    call assumptionPersonaModel_pc(personaName,bvName,pcName);
  elseif personaName != '' and bvName != '' and pcName = ''
  then
    call assumptionPersonaModel_pb(personaName,bvName,pcName);
  else
    call assumptionPersonaModel_pbc(personaName,bvName,pcName);
  end if;
end
//

create procedure assumptionPersonaModel_all(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model;
end
//

create procedure assumptionPersonaModel_c(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where characteristic_name = pcName;
end
//

create procedure assumptionPersonaModel_b(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where bv_name = bvName;
end
//

create procedure assumptionPersonaModel_bc(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where bv_name = bvName and characteristic_name = pcName;
end
//

create procedure assumptionPersonaModel_p(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where persona_name = personaName;
end
//

create procedure assumptionPersonaModel_pc(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where persona_name = personaName and characteristic_name = pcName;
end
//

create procedure assumptionPersonaModel_pb(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where persona_name = personaName and bv_name = bvName;
end
//

create procedure assumptionPersonaModel_pbc(in personaName text, in bvName text, in pcName text)
begin
  select from_name, from_dim, to_name, to_dim, persona_name, bv_name, characteristic_name from assumption_persona_model where persona_name = personaName and bv_name = bvName and characteristic_name = pcName;
end
//

create procedure persona_characteristicNames(in envName text)
begin
  select description from persona_characteristic order by 1;
end
//

create procedure task_characteristicNames(in envName text)
begin
  select description from task_characteristic order by 1;
end
//

create procedure getGrounds(in constraintName text)
begin
  select name, dimension_name, object_name, description from documentconcept_reference where name = constraintName and reference_type = 'grounds'; 
end
//

create procedure getWarrant(in constraintName text)
begin
  select name, dimension_name, object_name, description from documentconcept_reference where name = constraintName and reference_type = 'warrant'; 
end
//

create procedure getRebuttal(in constraintName text)
begin
  select name, dimension_name, object_name, description from documentconcept_reference where name = constraintName and reference_type = 'rebuttal'; 
end
//

create procedure addThreatDirectoryEntry(in dLabel text, in dName text, in dDesc text, in dTypeId int, in dRef text)
begin
  declare dId int;
  call newId2(dId);
  insert into threat_directory(id,label,name,description,threat_type_id,reference) values (dId,dLabel,dName,dDesc,dTypeId,dRef);
end
//

create procedure addVulnerabilityDirectoryEntry(in dLabel text, in dName text, in dDesc text, in dTypeId int, in dRef text)
begin
  declare dId int;
  call newId2(dId);
  insert into vulnerability_directory(id,label,name,description,vulnerability_type_id,reference) values (dId,dLabel,dName,dDesc,dTypeId,dRef);
end
//

create procedure delete_threat_directory(in dId int)
begin
  if dId != -1
  then
    delete from threat_directory where id = dId;
  else
    delete from threat_directory;
  end if;
end
//

create procedure delete_vulnerability_directory(in dId int)
begin
  if dId != -1
  then
    delete from vulnerability_directory where id = dId;
  else
    delete from vulnerability_directory;
  end if;
end
//

create function lastRequirementLabel(assetName text) 
returns varchar(50)
deterministic 
begin
  declare reqId int;
  declare reqLabel int;
  declare assetId int;
  declare shortCode varchar(10) default 'INVALID';

  select id into assetId from asset where name = assetName;
  select short_code into shortCode from asset where id = assetId;
  select ifnull(max(r.label),0) into reqLabel from requirement r, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = assetId and r.version = (select max(i.version) from requirement i where i.id = r.id);
  return concat(shortCode,'-',reqLabel);
end
//

create procedure cleanGoalEnvironment(in envId int)
begin
  delete from environment_goal where environment_id = envId;
  delete from goal_definition where environment_id = envId;
  delete from goal_category where environment_id = envId;
  delete from goal_priority where environment_id = envId;
  delete from goal_fitcriterion where environment_id = envId;
  delete from goal_issue where environment_id = envId;
  delete from goal_concernassociation where environment_id = envId;
  delete from goalgoal_goalassociation where environment_id = envId;
  delete from goalrequirement_goalassociation where environment_id = envId;
  delete from requirementgoal_goalassociation where environment_id = envId;
  delete from goalrole_goalassociation where environment_id = envId;
  delete from goaldomainproperty_goalassociation where environment_id = envId;
end
//

create procedure duplicateGoalEnvironment(in fromId int, in toId int)
begin
  declare assocId int default 0;
  declare goalId int;
  declare done int default 0;
  declare idCursor cursor for select goal_id from environment_goal where environment_id = fromId;  
  declare continue handler for not found set done = 1;

  call cleanGoalEnvironment(toId);

  open idCursor;
  id_loop: loop
    fetch idCursor into goalId;
    if done = 1
    then
      leave id_loop;
    end if;
    insert into environment_goal(environment_id,goal_id) values (toId,goalId); 
    insert into goal_definition(goal_id,environment_id,definition)
      select goal_id,toId,definition from goal_definition where goal_id = goalId and environment_id = fromId;
    insert into goal_category(goal_id,environment_id,category_id)
      select goal_id,toId,category_id from goal_category where goal_id = goalId and environment_id = fromId;
    insert into goal_priority(goal_id,environment_id,priority_id)
      select goal_id,toId,priority_id from goal_priority where goal_id = goalId and environment_id = fromId;
    insert into goal_fitcriterion(goal_id,environment_id,fitcriterion)
      select goal_id,toId,fitcriterion from goal_fitcriterion where goal_id = goalId and environment_id = fromId;
    insert into goal_issue(goal_id,environment_id,issue)
      select goal_id,toId,issue from goal_issue where goal_id = goalId and environment_id = fromId;

    call newId2(assocId);
    insert into goalgoal_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale)
      select assocId,toId,goal_id,ref_type_id,subgoal_id,alternative_id,rationale from goalgoal_goalassociation where environment_id = fromId and goal_id = goalId;

    call newId2(assocId);
    insert into goalgoal_goalassociation(id,environment_id,goal_id,ref_type_id,subgoal_id,alternative_id,rationale)
      select assocId,toId,goal_id,ref_type_id,subgoal_id,alternative_id,rationale from goalgoal_goalassociation where environment_id = fromId and subgoal_id = goalId;

  end loop id_loop;
  close idCursor;
end
//

create procedure obstacleTree(in obsName text, in envName text,in topLevelGoals int,in caseFilter int)
begin
  declare obsId int;
  declare soId int;
  declare environmentId int;
  declare compositeCount int;
  declare done int default 0;
  declare soCursor cursor for select subgoal_id from obstacleobstacle_goalassociation where goal_id = obsId and environment_id = environmentId union select subgoal_id from obstaclerequirement_goalassociation where goal_id = obsId and environment_id = environmentId;
  declare continue handler for not found set done = 1;
  
  drop table if exists temp_obstacletree;
  create temporary table temp_obstacletree (id int,environment varchar(50),goal_name varchar(200), goal_dim varchar(50), ref_type varchar(50), subgoal_name varchar(200), subgoal_dim varchar(50), alternative_id int, rationale varchar(1000));

  select id into obsId from obstacle where name = obsName;
  select id into environmentId from environment where name = envName;

  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    insert into temp_obstacletree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ot.goal_id = obsId and et.environment_id = environmentId and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ov.goal_id = obsId and ev.environment_id = environmentId and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId and grga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId and grga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'misusecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclemisusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, misusecase tg where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id;
  else
    insert into temp_obstacletree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ot.goal_id = obsId and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ov.goal_id = obsId and ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and grga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and grga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'misusecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclemisusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, misusecase tg where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id;


  end if;

  if topLevelGoals = 0
  then
    set done = 0;
    open soCursor;
    so_loop: loop
      fetch soCursor into soId;
      if done = 1
      then
        leave so_loop;
      end if;
      call subObstacleTree(soId,environmentId);
    end loop so_loop;
    close soCursor;
  end if;

  select id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale from temp_obstacletree;
end
//

create procedure subObstacleTree(in obsId int, in environmentId int)
begin
  declare soId int;
  declare compositeCount int;
  declare environmentName varchar(50);
  declare done int default 0;
  declare soCursor cursor for select subgoal_id from obstacleobstacle_goalassociation where goal_id = obsId and environment_id = environmentId union select subgoal_id from obstaclerequirement_goalassociation where goal_id = obsId and environment_id = environmentId;
  declare continue handler for not found set done = 1;

  select name into environmentName from environment where id = environmentId;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    insert into temp_obstacletree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = environmentId and ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, domainproperty tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = environmentId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ot.goal_id = obsId and et.environment_id = environmentId and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ov.goal_id = obsId and ev.environment_id = environmentId and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId and grga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id = environmentId and grga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'misusecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclemisusecase_goalassociation ga, environment e, goal hg, reference_type rt, misusecase tg where ga.goal_id = obsId and ga.environment_id = environmentId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id;
  else
    insert into temp_obstacletree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, domainproperty tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId)
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'task' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'usecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ot.goal_id = obsId and et.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ov.goal_id = obsId and ev.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id
    union
    select -1 id,e.name environment,concat(a.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, environment e, requirement hg, role tg,asset_requirement ar, asset a,obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = ar.requirement_id and ar.asset_id = a.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and grga.environment_id = e.id
    union
    select -1 id,e.name environment,concat(e.short_code,'-',hg.label) goal_name,'requirement' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'' rationale from requirement_role ga, requirement hg, role tg,environment_requirement er, environment e, obstaclerequirement_goalassociation grga where grga.goal_id = obsId and ga.requirement_id = hg.id and ga.role_id = tg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and hg.id = er.requirement_id and er.environment_id = e.id and grga.subgoal_id = ga.requirement_id and grga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and grga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'misusecase' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclemisusecase_goalassociation ga, environment e, goal hg, reference_type rt, misusecase tg where ga.goal_id = obsId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id;
  end if;

  set done = 0;
  open soCursor;
  so_loop: loop
    fetch soCursor into soId;
    if done = 1
    then
      leave so_loop;
    end if;
    call subObstacleTree(soId,environmentId);
  end loop so_loop;
  close soCursor;
end
//

create procedure classTree(in assetName text, in envName text)
begin
  declare assetId int;
  declare saId int;
  declare environmentId int;
  declare compositeCount int;
  declare done int default 0;
  declare saCursor cursor for select tail_id from classassociation where head_id = assetId and environment_id = environmentId;
  declare continue handler for not found set done = 1;
  
  drop table if exists temp_classtree;
  create temporary table temp_classtree (id int,environment varchar(50),head_name varchar(50), head_dim varchar(50), head_nav int, head_assoc varchar(50), head_mult varchar(50), head_role varchar(50), tail_role varchar(50), tail_mult varchar(50), tail_assoc varchar(50), tail_nav int, tail_dim varchar(50), tail_name varchar(50), rationale varchar(1000));

  select id into assetId from asset where name = assetName;
  select id into environmentId from environment where name = envName;

  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    insert into temp_classtree(id,environment,head_name,head_dim,head_nav,head_assoc,head_mult,head_role,tail_role,tail_mult,tail_assoc,tail_nav,tail_dim,tail_name,rationale)
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.head_id = assetId and a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,concat('Concerns Security Pattern ',sp.name) rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata,securitypattern sp where a.head_id = assetId and hea.environment_id = environmentId and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = sp.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = sp.id and a.pattern_id = sp.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id = environmentId and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset', a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where ta.asset_id = assetId and p.id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,concat('Concerns goal ',g.name) rationale from goal_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,goal g where ta.id = assetId and ca.environment_id = environmentId and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.goal_id = g.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,concat('Concerns task ',t.name) rationale from task_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,task t where sa.id = assetId and ca.environment_id = environmentId and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.task_id = t.id
    union
    select -1,e.name,concat('Concerns goal ',g.name),'goalconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from goal_concern gc, goal g, environment_asset ea, asset a, environment e where ea.asset_id = assetId and ea.environment_id = environmentId and ea.environment_id = gc.environment_id and ea.asset_id = gc.asset_id and gc.goal_id = g.id and gc.asset_id = ea.asset_id and gc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns obstacle ',o.name),'obstacleconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from obstacle_concern oc, obstacle o, environment_asset ea, asset a, environment e where ea.asset_id = assetId and ea.environment_id = environmentId and ea.environment_id = oc.environment_id and ea.asset_id = oc.asset_id and oc.obstacle_id = o.id and oc.asset_id = ea.asset_id and oc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns task ',t.name),'taskconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from task_asset tc, task t, environment_asset ea, asset a, environment e where tc.asset_id = assetId and ea.environment_id = environmentId and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.task_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns usecase ',t.name),'usecaseconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from usecase_asset tc, usecase t, environment_asset ea, asset a, environment e where ea.asset_id = assetId and ea.environment_id = environmentId and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.usecase_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.tail_id = assetId and a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,concat('Concerns Security Pattern ',sp.name) rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata,securitypattern sp where a.tail_id = assetId and hea.environment_id = environmentId and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = sp.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = sp.id and a.pattern_id = sp.id;
  else
    insert into temp_classtree(id,environment,head_name,head_dim,head_nav,head_assoc,head_mult,head_role,tail_role,tail_mult,tail_assoc,tail_nav,tail_dim,tail_name,rationale)
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.head_id = assetId and a.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,concat('Concerns Security Pattern ',sp.name) rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata,securitypattern sp where a.head_id = assetId and hea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = sp.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = sp.id and a.pattern_id = sp.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id = environmentId and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset', a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where ta.asset_id = assetId and p.id = tp.persona_id and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select -1,e.name,sa.name,'asset',0,'Association',tmt.name,ca.link,'',smt.name,'Association',0,'asset',ta.name,concat('Concerns goal ',g.name) rationale from goal_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,goal g where ta.id = assetId and ca.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.goal_id = g.id
    union
    select -1,e.name,sa.name,'asset','Association',tmt.name,ca.link,'',smt.name,'Association','asset',ta.name,concat('Concerns task ',t.name) rationale from task_concernassociation ca, asset sa, multiplicity_type smt, asset ta, multiplicity_type tmt, environment e,task t where sa.id = assetId and ca.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ca.source_id = sa.id and ca.target_id = ta.id and ca.source_multiplicity_id = smt.id and ca.target_multiplicity_id = tmt.id and ca.environment_id = e.id and ca.task_id = t.id
    union
    select -1,e.name,concat('Concerns goal ',g.name),'goalconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from goal_concern gc, goal g, environment_asset ea, asset a, environment e where ea.asset_id = assetId and ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = gc.environment_id and ea.asset_id = gc.asset_id and gc.goal_id = g.id and gc.asset_id = ea.asset_id and gc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns obstacle ',o.name),'obstacleconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from obstacle_concern oc, obstacle o, environment_asset ea, asset a, environment e where ea.asset_id = assetId and ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = oc.environment_id and ea.asset_id = oc.asset_id and oc.obstacle_id = o.id and oc.asset_id = ea.asset_id and oc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns task ',t.name),'taskconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from task_asset tc, task t, environment_asset ea, asset a, environment e where tc.asset_id = assetId and ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.task_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select -1,e.name,concat('Concerns usecase ',t.name),'usecaseconcern',0,'Association','1','','','1','Association',0,'asset',a.name,'' from usecase_asset tc, usecase t, environment_asset ea, asset a, environment e where ea.asset_id = assetId and ea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ea.environment_id = tc.environment_id and ea.asset_id = tc.asset_id and tc.usecase_id = t.id and tc.asset_id = ea.asset_id and tc.asset_id = a.id and ea.environment_id = e.id
    union
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.tail_id = assetId and a.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,he.name,ha.name,'asset',0,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,0,'asset',ta.name,concat('Concerns Security Pattern ',sp.name) rationale from securitypattern_classassociation a, environment he, environment te, asset ha, template_asset hta, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta, template_asset tta, environment_asset hea, environment_asset tea, securitypattern_asset_template_asset hata, securitypattern_asset_template_asset tata,securitypattern sp where a.tail_id = assetId and hea.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and hea.environment_id = tea.environment_id and hea.environment_id = he.id and tea.environment_id = te.id and hea.asset_id = ha.id and tea.asset_id = ta.id and a.head_id = hta.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = tta.id and ha.id = hata.asset_id and hata.template_asset_id = hta.id and hata.pattern_id = sp.id and ta.id = tata.asset_id and tata.template_asset_id = tta.id and tata.pattern_id = sp.id and a.pattern_id = sp.id;
  end if;

  select id,environment,head_name,head_dim,head_nav,head_assoc,head_mult,head_role,tail_role,tail_mult,tail_assoc,tail_nav,tail_dim,tail_name,rationale from temp_classtree;
end
//

create procedure concernlessClassTree(in assetName text, in envName text)
begin
  declare assetId int;
  declare saId int;
  declare environmentId int;
  declare compositeCount int;
  declare done int default 0;
  declare saCursor cursor for select tail_id from classassociation where head_id = assetId and environment_id = environmentId;
  declare continue handler for not found set done = 1;
  
  drop table if exists temp_classtree;
  create temporary table temp_classtree (id int,environment varchar(50),head_name varchar(50), head_dim varchar(50), head_nav int, head_assoc varchar(50), head_mult varchar(50), head_role varchar(50), tail_role varchar(50), tail_mult varchar(50), tail_assoc varchar(50), tail_nav int, tail_dim varchar(50), tail_name varchar(50), rationale varchar(1000));

  select id into assetId from asset where name = assetName;
  select id into environmentId from environment where name = envName;

  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    insert into temp_classtree(id,environment,head_name,head_dim,head_nav,head_assoc,head_mult,head_role,tail_role,tail_mult,tail_assoc,tail_nav,tail_dim,tail_name,rationale)
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.head_id = assetId and a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id = environmentId and at.environment_id = environmentId and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id = environmentId and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset', a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where ta.asset_id = assetId and p.id = tp.persona_id and tp.environment_id = environmentId and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.tail_id = assetId and a.environment_id = environmentId and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
  else
    insert into temp_classtree(id,environment,head_name,head_dim,head_nav,head_assoc,head_mult,head_role,tail_role,tail_mult,tail_assoc,tail_nav,tail_dim,tail_name,rationale)
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.head_id = assetId and a.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id
    union
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e, countermeasure_asset ca, countermeasure_threat_target ctt, asset_threat at where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = ctt.countermeasure_id and ctt.threat_id = at.threat_id and at.asset_id = va.id and ctt.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and at.environment_id = environmentId and at.environment_id = e.id
    union 
    select -1,e.name,va.name,'asset',0,'Dependency','1','&lt;&lt;safeguards&gt;&gt;','','1','Association',0,'asset',ma.name,'' rationale from asset ma, asset va, environment e,countermeasure_asset ca, countermeasure_vulnerability_target cvt, asset_vulnerability av where ma.id = ca.asset_id and ca.asset_id = assetId and ca.countermeasure_id = cvt.countermeasure_id and cvt.vulnerability_id = av.vulnerability_id and av.asset_id = va.id and cvt.environment_id = environmentId and av.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and av.environment_id = e.id
    union
    select -1,e.name,p.name,'persona',0,'Association','1','','','1','Association',0,'asset', a.name,'' rationale from persona p, asset a, environment e, task_asset ta, task_persona tp where ta.asset_id = assetId and p.id = tp.persona_id and tp.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and tp.task_id = ta.task_id and ta.environment_id = tp.environment_id and ta.asset_id = a.id and ta.environment_id = e.id
    union
    select a.id,e.name,ha.name,'asset',a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,'asset',ta.name,'' rationale from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.tail_id = assetId and a.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
  end if;
  select id,environment,head_name,head_dim,head_nav,head_assoc,head_mult,head_role,tail_role,tail_mult,tail_assoc,tail_nav,tail_dim,tail_name,rationale from temp_classtree;
end
//

create procedure riskModel(in riskName text, in environmentName text)
begin
  declare environmentId int;
  declare riskId int;
  declare compositeCount int;
  select id into environmentId from environment where name = environmentName limit 1;
  select id into riskId from risk where name = riskName limit 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    select 'asset' from_objt,a.name from_name, 'threat' to_objt,t.name to_name from asset_threat at,asset a, threat t, risk r where at.environment_id = environmentId and at.asset_id = a.id and at.threat_id = t.id and t.id = r.threat_id and r.id = riskId
    union
    select 'asset' from_objt,a.name from_name,'vulnerability' to_objt, v.name to_name from asset_vulnerability av, asset a, vulnerability v, risk r where av.environment_id = environmentId and av.vulnerability_id = v.id and  av.asset_id = a.id and v.id = r.vulnerability_id and r.id = riskId
    union
    select 'attacker' from_objt, a.name from_name, 'threat' to_objt, t.name to_name from threat_attacker ta, threat t, attacker a, environment_attacker ea, environment_threat et, risk r where ta.environment_id = environmentId and ta.attacker_id = a.id and ta.threat_id = t.id and ta.environment_id = ea.environment_id and ta.environment_id = et.environment_id and ea.environment_id = environmentId and et.environment_id = environmentId and t.id = r.threat_id and r.id = riskId
    union
    select 'threat' from_objt, t.name from_name, 'risk' to_objt, r.name to_name from risk r, threat t, threat_likelihood tl, environment_vulnerability ev where r.threat_id = t.id and t.id = tl.threat_id and tl.environment_id = environmentId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = environmentId and r.id = riskId
    union
    select 'vulnerability' from_objt, v.name from_name, 'risk' to_objt, r.name to_name from risk r, vulnerability v, vulnerability_severity vs, environment_threat et where r.vulnerability_id = v.id and v.id = vs.vulnerability_id and vs.environment_id = environmentId and r.threat_id = et.threat_id and et.environment_id = environmentId and r.id = riskId
    union
    select 'risk' from_objt, ri.name from_name, 'response' to_objt, re.name to_name from response re, risk ri,environment_response er where er.environment_id = environmentId and er.response_id = re.id and re.risk_id = ri.id and ri.id = riskId
    union
    select 'risk' from_objt, r.name from_name, 'misusecase' to_objt, m.name to_name from risk r, misusecase m, misusecase_risk mr, environment_misusecase em where em.environment_id = environmentId and em.misusecase_id = mr.misusecase_id and mr.misusecase_id = m.id and mr.risk_id = r.id and r.id = riskId
    union
    select 'task' from_objt, t.name from_name, 'vulnerability' to_objt, v.name to_name from task_vulnerability tv, environment_vulnerability ev, environment_task et, vulnerability v, task t, risk r where ev.environment_id = environmentId and et.environment_id = environmentId and et.task_id = tv.task_id and tv.task_id = t.id and ev.vulnerability_id = tv.vulnerability_id and tv.vulnerability_id = v.id and v.id = r.vulnerability_id and r.id = riskId
    union
    select 'role' from_objt, ro.name from_name, 'response' to_objt, re.name to_name from responserole_goalassociation rr, response re, role ro, risk r where rr.environment_id = environmentId and rr.goal_id = re.id and rr.subgoal_id = ro.id and re.risk_id = r.id and r.id = riskId
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'vulnerability' to_objt, v.name to_name from requirement r, vulnerability v, environment_vulnerability cv, requirement_vulnerability rv,asset rm, asset_requirement rmr, risk ri where cv.environment_id = environmentId and rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id and v.id = cv.vulnerability_id and r.id = rmr.requirement_id and rmr.asset_id = rm.id and v.id = ri.vulnerability_id and ri.id = riskId
    union
    select 'requirement' from_objt, concat(rm.short_code,'-',r.label) from_name, 'vulnerability' to_objt, v.name to_name from requirement r, vulnerability v, environment_vulnerability cv, requirement_vulnerability rv,environment rm, environment_requirement rmr, risk ri where cv.environment_id = environmentId and rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id and v.id = cv.vulnerability_id and r.id = rmr.requirement_id and rmr.environment_id = rm.id and v.id = ri.vulnerability_id and ri.id = riskId
    union
    select 'obstacle' from_objt, o.name from_name, 'threat' to_objt, t.name to_name from obstacle o, threat t, risk r, obstaclethreat_goalassociation ot, environment_threat et where ot.goal_id = o.id and ot.subgoal_id = t.id and ot.subgoal_id = et.threat_id and et.environment_id = environmentId and et.environment_id = ot.environment_id and ot.subgoal_id = r.threat_id and r.id = riskId
    union
    select 'obstacle' from_objt, o.name from_name, 'vulnerability' to_objt, v.name to_name from obstacle o, vulnerability v, obstaclevulnerability_goalassociation ov, environment_vulnerability ev, risk r where ov.goal_id = o.id and ov.subgoal_id = v.id and ov.subgoal_id = ev.vulnerability_id and ev.environment_id = environmentId and ev.environment_id = ov.environment_id and ov.subgoal_id = r.vulnerability_id and r.id = riskId;
  else
    select 0;
  end if;
end
//

create function is_risk(riskName text)
returns bool
deterministic
begin
  declare riskCount int;

  select count(*) into riskCount from risk where name = riskName;
  return riskCount;
end
//

create procedure assumptionPersonaModel_textual(in pName text, in bvName text)
begin
  select from_dim,from_name,characteristic_name from assumption_persona_model where persona_name = pName and bv_name = bvName and from_dim in ('grounds','warrant','qualifier','rebuttal');
end
//

create procedure riskAnalysisToXml(in includeHeader int)
begin
  declare tagName varchar(255);
  declare roleName varchar(255);
  declare roleType varchar(50);
  declare roleShortCode varchar(100);
  declare roleDesc varchar(1000);
  declare roleCount int default 0;
  declare assetCount int default 0;
  declare rshipCount int default 0;
  declare assetId int;
  declare envId int;
  declare envName varchar(50);
  declare assetName varchar(50);
  declare assetShortCode varchar(10);
  declare assetDesc varchar(1000);
  declare assetSignif varchar(1000);
  declare assetType varchar(50);
  declare isCritical int;
  declare ifName varchar(255);
  declare reqId int;
  declare ifType varchar(50);
  declare assetCr varchar(1000);
  declare cProperty varchar(50);
  declare iProperty varchar(50);
  declare avProperty varchar(50);
  declare acProperty varchar(50);
  declare anProperty varchar(50);
  declare panProperty varchar(50);
  declare unlProperty varchar(50);
  declare unoProperty varchar(50);
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare vulId int;
  declare vulName varchar(200);
  declare vulDesc varchar(500);
  declare vulType varchar(100);
  declare vulCount int default 0;
  declare attackerId int;
  declare attackerName varchar(50);
  declare attackerDesc varchar(4000);
  declare attackerImage varchar(1000);
  declare attackerCount int default 0; 
  declare motivName varchar(50);
  declare capabilityName varchar(50);
  declare capabilityValue varchar(50);
  declare threatId int;
  declare threatName varchar(200);
  declare threatType varchar(100);
  declare threatMethod varchar(500);
  declare threatCount int default 0;
  declare riskId int;
  declare riskName varchar(200);
  declare riskCount int default 0;
  declare mcNarrative varchar(5000);
  declare responseId int;
  declare responseName varchar(50);
  declare responseType varchar(50);
  declare responseCount int default 0;
  declare roleCost varchar(50);
  declare mitType varchar(50);
  declare headName varchar(50);
  declare headAdornment varchar(50);
  declare headNry varchar(10);
  declare headRole varchar(50);
  declare tailRole varchar(50);
  declare tailNry varchar(10);
  declare tailAdornment varchar(50);
  declare tailName varchar(50);
  declare headNav int;
  declare tailNav int;
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE riskanalysis PUBLIC "-//CAIRIS//DTD RISKANALYSIS 1.0//EN" "http://cairis.org/dtd/riskanalysis.dtd">\n\n<riskanalysis>\n';
  declare done int default 0;
  declare assetIFCursor cursor for select i.name,ai.required_id from asset_interface ai, interface i where ai.asset_id = assetId and ai.interface_id = i.id;
  declare assetTagCursor cursor for select t.name from asset_tag at, tag t where at.asset_id = assetId and at.tag_id = t.id;
  declare attackerTagCursor cursor for select t.name from attacker_tag at, tag t where at.attacker_id = attackerId and at.tag_id = t.id;
  declare vulTagCursor cursor for select t.name from vulnerability_tag vt, tag t where vt.vulnerability_id = vulId and vt.tag_id = t.id;
  declare threatTagCursor cursor for select t.name from threat_tag tt, tag t where tt.threat_id = threatId and tt.tag_id = t.id;
  declare riskTagCursor cursor for select t.name from risk_tag rt, tag t where rt.risk_id = riskId and rt.tag_id = t.id;
  declare roleCursor cursor for  select r.name,rt.name,r.short_code,r.description from role r, role_type rt where r.role_type_id = rt.id;
  declare assetEnvCursor cursor for select ea.environment_id,e.name from environment_asset ea, environment e where ea.asset_id = assetId and ea.environment_id = e.id;
  declare vulEnvCursor cursor for select ev.environment_id,e.name from environment_vulnerability ev, environment e where ev.vulnerability_id = vulId and ev.environment_id = e.id;
  declare attackerEnvCursor cursor for select ea.environment_id,e.name from environment_attacker ea, environment e where ea.attacker_id = attackerId and ea.environment_id = e.id;
  declare threatEnvCursor cursor for select et.environment_id,e.name from environment_threat et, environment e where et.threat_id = threatId and et.environment_id = e.id;
  declare responseEnvCursor cursor for select er.environment_id,e.name from environment_response er, environment e where er.response_id = responseId and er.environment_id = e.id;
  declare assetCursor cursor for select a.id,a.name,a.short_code,a.description,a.significance,at.name,a.is_critical,ifnull(a.critical_rationale,'None') from asset a,asset_type at where a.asset_type_id = at.id;
  declare vulCursor cursor for select v.id,v.name,v.description,vt.name from vulnerability v,vulnerability_type vt where v.vulnerability_type_id = vt.id;
  declare attackerCursor cursor for select id,name,description,image from attacker;
  declare attackerRolesCursor cursor for select r.name from attacker_role ar, role r where ar.attacker_id = attackerId and ar.environment_id = envId and ar.role_id = r.id;
  declare motivCursor cursor for select m.name from attacker_motivation am, motivation m where am.attacker_id = attackerId and am.environment_id = envId and am.motivation_id = m.id;
  declare capabilityCursor cursor for select c.name,cv.name from attacker_capability ac, capability c, capability_value cv where ac.attacker_id = attackerId and ac.environment_id = envId and ac.capability_id = c.id and ac.capability_value_id = cv.id;
  declare vulAssetsCursor cursor for select a.name from asset a, asset_vulnerability av where av.vulnerability_id = vulId and av.environment_id = envId and av.asset_id = a.id;
  declare threatCursor cursor for select t.id, t.name, tt.name, t.method from threat t, threat_type tt where t.threat_type_id = tt.id;
  declare threatAttackerCursor cursor for select a.name from threat_attacker ta, attacker a where ta.threat_id = threatId and ta.environment_id = envId and ta.attacker_id = a.id;
  declare threatAssetCursor cursor for select a.name from asset a, asset_threat at where at.threat_id = threatId and at.asset_id = a.id and at.environment_id = envId;
  declare riskCursor cursor for select r.id, r.name,t.name,v.name from risk r, threat t, vulnerability v where r.threat_id = t.id and r.vulnerability_id = v.id;
  declare mcCursor cursor for select e.name,mn.narrative from misusecase_risk mr, misusecase_narrative mn, environment e where mr.risk_id = riskId and mr.misusecase_id = mn.misusecase_id and mn.environment_id = e.id;
  declare responseCursor cursor for select re.id,re.name,rt.name,r.name from response re,goal_category_type rt, risk r where re.goal_category_type_id = rt.id and re.risk_id = r.id;
  declare responseRoleCursor cursor for select r.name,c.name from responserole_goalassociation rr, role r, cost c where rr.goal_id = responseId and rr.environment_id = envId and rr.subgoal_id = r.id and rr.cost_id = c.id;
  declare detMechCursor cursor for select a.name from asset a, reaction_detection_mechanism rdm where rdm.response_id = responseId and rdm.environment_id = envId and rdm.asset_id = a.id;
  declare assocCursor cursor for select e.name, ha.name,a.head_navigation,hat.name,hm.name,a.head_role_name,a.tail_role_name,tm.name,tat.name,a.tail_navigation,ta.name from classassociation a, environment e, asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, asset ta where a.environment_id = e.id and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
  declare continue handler for not found set done = 1;

  if includeHeader = 0
  then
    set buf = '<riskanalysis>\n';
  end if;

  open roleCursor;
  role_loop: loop
    fetch roleCursor into roleName, roleType, roleShortCode,roleDesc;
    if done = 1
    then
      leave role_loop;
    end if;
    set buf = concat(buf,'<role name=\"',roleName,'\" type=\"',roleType,'\" short_code=\"',roleShortCode,'\" >\n  <description>',roleDesc,'</description>\n</role>\n');
    set roleCount = roleCount + 1;
  end loop role_loop;
  close roleCursor;
  set done = 0;

  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId, assetName, assetShortCode, assetDesc, assetSignif, assetType, isCritical, assetCr;
    if done = 1
    then
      leave asset_loop;
    end if;
    set buf = concat(buf,'<asset name=\"',assetName,'\" short_code=\"',assetShortCode,'\" type=\"',assetType,'\" is_critical=\"',isCritical,'\">\n  <description>',assetDesc,'</description>\n');

    open assetTagCursor;
    assetTag_loop: loop
      fetch assetTagCursor into tagName;
      if done = 1
      then
        leave assetTag_loop;
      end if;
      set buf = concat(buf,'  <tag name=\"',tagName,'\" />\n'); 
    end loop assetTag_loop;
    close assetTagCursor;
    set done = 0;

    set buf = concat(buf,'  <significance>',assetSignif,'</significance>\n  <critical_rationale>',assetCr,'</critical_rationale>\n');

    open assetIFCursor;
    assetIF_loop: loop
      fetch assetIFCursor into ifName,reqId;
      if done = 1
      then
        leave assetIF_loop;
      end if;
      if reqId = 1
      then
        set ifType = 'required';
      else
        set ifType = 'provided';
      end if;
      set buf = concat(buf,'  <interface name=\"',ifName,'\" type=\"',ifType,'\" />\n');
    end loop assetIF_loop;
    close assetIFCursor;
    set done = 0;

    open assetEnvCursor;
    assetEnv_loop: loop
      fetch assetEnvCursor into envId, envName;
      if done = 1
      then
        leave assetEnv_loop;
      end if;
      select spv.name,ap.property_rationale into cProperty,cRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 0 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into iProperty,iRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 1 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into avProperty,avRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 2 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into acProperty,acRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 3 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into anProperty,anRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 4 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into panProperty,panRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 5 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into unlProperty,unlRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 6 and ap.environment_id = envId and ap.property_value_id = spv.id;
      select spv.name,ap.property_rationale into unoProperty,unoRationale from asset_property ap, security_property_value spv where ap.asset_id = assetId and ap.property_id = 7 and ap.environment_id = envId and ap.property_value_id = spv.id;
      if cProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="confidentiality" value=\"',cProperty,'\">\n    <rationale>',cRationale,'</rationale>\n  </security_property>\n');
      end if;
      if iProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="integrity" value=\"',iProperty,'\">\n    <rationale>',iRationale,'</rationale>\n  </security_property>\n');
      end if;
      if avProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="availability" value=\"',avProperty,'\">\n    <rationale>',avRationale,'</rationale>\n  </security_property>\n');
      end if;
      if acProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="accountability" value=\"',acProperty,'\">\n    <rationale>',acRationale,'</rationale>\n  </security_property>\n');
      end if;
      if anProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="anonymity" value=\"',anProperty,'\">\n    <rationale>',anRationale,'</rationale>\n  </security_property>\n');
      end if;
      if panProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="pseudonymity" value=\"',panProperty,'\">\n    <rationale>',panRationale,'</rationale>\n  </security_property>\n');
      end if;
      if unlProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="unlinkability" value=\"',unlProperty,'\">\n    <rationale>',unlRationale,'</rationale>\n  </security_property>\n');
      end if;
      if unoProperty != 'None'
      then
        set buf = concat(buf,'  <security_property environment=\"',envName,'\" property="unobservability" value=\"',unoProperty,'\">\n    <rationale>',unoRationale,'</rationale>\n  </security_property>\n');
      end if;
    end loop assetEnv_loop;
    close assetEnvCursor;
    set done = 0;
    set buf = concat(buf,'</asset>\n');
    set assetCount = assetCount + 1;
  end loop asset_loop;
  close assetCursor;

  set done = 0;
  open vulCursor;
  vul_loop: loop
    fetch vulCursor into vulId, vulName, vulDesc, vulType;
    if done = 1
    then
      leave vul_loop;
    end if;
    set buf = concat(buf,'<vulnerability name=\"',vulName,'\" type=\"',vulType,'\">\n  <description>',vulDesc,'</description>\n');
    set vulCount = vulCount + 1;

    open vulTagCursor;
    vulTag_loop: loop
      fetch vulTagCursor into tagName;
      if done = 1
      then
        leave vulTag_loop;
      end if;
      set buf = concat(buf,'  <tag name=\"',tagName,'\" />\n'); 
    end loop vulTag_loop;
    close vulTagCursor;
    set done = 0;

    open vulEnvCursor;
    vulEnv_loop: loop
      fetch vulEnvCursor into envId, envName;
      if done = 1
      then
        leave vulEnv_loop;
      end if;
      set buf = concat(buf,'  <vulnerability_environment name=\"',envName,'\" severity=\"',vulnerability_severity(vulId,envId),'\">\n');

      open vulAssetsCursor;
      vulAssets_loop: loop
        fetch vulAssetsCursor into assetName;
        if done = 1
        then
          leave vulAssets_loop;
        end if;
        set buf = concat(buf,'    <vulnerable_asset name=\"',assetName,'\" />\n');
      end loop vulAssets_loop;
      close vulAssetsCursor;
      set done = 0;

      set buf = concat(buf,'  </vulnerability_environment>\n');

    end loop vulEnv_loop;
    close vulEnvCursor;
    set done = 0;

    set buf = concat(buf,'</vulnerability>\n');
  end loop vul_loop;
  close vulCursor;

  set done = 0;
  open attackerCursor;
  attacker_loop: loop
    fetch attackerCursor into attackerId, attackerName, attackerDesc, attackerImage;
    if done = 1
    then
      leave attacker_loop;
    end if;
    set buf = concat(buf,'<attacker name=\"',attackerName,'\" image=\"',attackerImage,'\">\n  <description>',attackerDesc,'</description>\n');
    set attackerCount = attackerCount + 1;

    open attackerTagCursor;
    attackerTag_loop: loop
      fetch attackerTagCursor into tagName;
      if done = 1
      then
        leave attackerTag_loop;
      end if;
      set buf = concat(buf,'  <tag name=\"',tagName,'\" />\n'); 
    end loop attackerTag_loop;
    close attackerTagCursor;
    set done = 0;

    open attackerEnvCursor;
    attackerEnv_loop: loop
      fetch attackerEnvCursor into envId, envName;
      if done = 1
      then
        leave attackerEnv_loop;
      end if;
      set buf = concat(buf,'  <attacker_environment name=\"',envName,'\">\n');

      open attackerRolesCursor;
      attackerRoles_loop: loop
        fetch attackerRolesCursor into roleName;
        if done = 1
        then
          leave attackerRoles_loop;
        end if;
        set buf = concat(buf,'    <attacker_role name=\"',roleName,'\" />\n');
      end loop attackerRoles_loop;
      close attackerRolesCursor;
      set done = 0;

      open motivCursor;
      motiv_loop: loop
        fetch motivCursor into motivName;
        if done = 1
        then
          leave motiv_loop;
        end if;
        set buf = concat(buf,'    <motivation name=\"',motivName,'\" />\n');
      end loop motiv_loop;
      close motivCursor;
      set done = 0;

      open capabilityCursor;
      capability_loop: loop
        fetch capabilityCursor into capabilityName,capabilityValue;
        if done = 1
        then
          leave capability_loop;
        end if;
        set buf = concat(buf,'    <capability name=\"',capabilityName,'\" value=\"',capabilityValue,'\" />\n');
      end loop capability_loop;
      close capabilityCursor;
      set done = 0;

      set buf = concat(buf,'  </attacker_environment>\n');
    end loop attackerEnv_loop;
    close attackerEnvCursor;
    set done = 0;

    set buf = concat(buf,'</attacker>\n');
  end loop attacker_loop;
  close attackerCursor;

  set done = 0;
  open threatCursor;
  threat_loop: loop
    fetch threatCursor into threatId, threatName, threatType, threatMethod;
    if done = 1
    then
      leave threat_loop;
    end if;
    set buf = concat(buf,'<threat name=\"',threatName,'\" type=\"',threatType,'\">\n  <method>',threatMethod,'</method>\n');
    set threatCount = threatCount + 1;

    open threatTagCursor;
    threatTag_loop: loop
      fetch threatTagCursor into tagName;
      if done = 1
      then
        leave threatTag_loop;
      end if;
      set buf = concat(buf,'  <tag name=\"',tagName,'\" />\n'); 
    end loop threatTag_loop;
    close threatTagCursor;
    set done = 0;

    open threatEnvCursor;
    threatEnv_loop: loop
      fetch threatEnvCursor into envId, envName;
      if done = 1
      then
        leave threatEnv_loop;
      end if;
      set buf = concat(buf,'  <threat_environment name=\"',envName,'\" likelihood=\"',threat_likelihood(threatId,envId),'\" >\n');

      open threatAttackerCursor;
      threatAttacker_loop: loop
        fetch threatAttackerCursor into attackerName;
        if done = 1
        then
          leave threatAttacker_loop;
        end if;
        set buf = concat(buf,'    <threat_attacker name=\"',attackerName,'\" />\n');
      end loop threatAttacker_loop;
      close threatAttackerCursor;
      set done = 0;

      open threatAssetCursor;
      threatAsset_loop: loop
        fetch threatAssetCursor into assetName;
        if done = 1
        then
          leave threatAsset_loop;
        end if;
        set buf = concat(buf,'    <threatened_asset name=\"',assetName,'\" />\n');
      end loop threatAsset_loop;
      close threatAssetCursor;
      set done = 0;

      select spv.name,tp.property_rationale into cProperty,cRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 0 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into iProperty,iRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 1 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into avProperty,avRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 2 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into acProperty,acRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 3 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into anProperty,anRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 4 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into panProperty,panRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 5 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into unlProperty,unlRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 6 and tp.environment_id = envId and tp.property_value_id = spv.id;
      select spv.name,tp.property_rationale into unoProperty,unoRationale from threat_property tp, security_property_value spv where tp.threat_id = threatId and tp.property_id = 7 and tp.environment_id = envId and tp.property_value_id = spv.id;
      if cProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="confidentiality" value=\"',cProperty,'\">\n      <rationale>',cRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if iProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="integrity" value=\"',iProperty,'\">\n      <rationale>',iRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if avProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="availability" value=\"',avProperty,'\">\n      <rationale>',avRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if acProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="accountability" value=\"',acProperty,'\">\n      <rationale>',acRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if anProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="anonymity" value=\"',anProperty,'\">\n      <rationale>',anRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if panProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="pseudonymity" value=\"',panProperty,'\">\n      <rationale>',panRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if unlProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="unlinkability" value=\"',unlProperty,'\">\n      <rationale>',unlRationale,'</rationale>\n    </threatened_property>\n');
      end if;
      if unoProperty != 'None'
      then
        set buf = concat(buf,'    <threatened_property name="unobservability" value=\"',unoProperty,'\">\n      <rationale>',unoRationale,'</rationale>\n    </threatened_property>\n');
      end if;

      set buf = concat(buf,'  </threat_environment>\n');
    end loop threatEnv_loop;
    close threatEnvCursor;
    set done = 0;

    set buf = concat(buf,'</threat>\n');
  end loop threat_loop;
  close threatCursor;

  set done = 0;
  open riskCursor;
  risk_loop: loop
    fetch riskCursor into riskId, riskName, threatName, vulName;
    if done = 1
    then
      leave risk_loop;
    end if;
    set buf = concat(buf,'<risk name=\"',riskName,'\" vulnerability=\"',vulName,'\" threat=\"',threatName,'\">\n');
    set riskCount = riskCount + 1;

    open riskTagCursor;
    riskTag_loop: loop
      fetch riskTagCursor into tagName;
      if done = 1
      then
        leave riskTag_loop;
      end if;
      set buf = concat(buf,'  <tag name=\"',tagName,'\" />\n'); 
    end loop riskTag_loop;
    close riskTagCursor;
    set done = 0;

    open mcCursor;
    mc_loop: loop
      fetch mcCursor into envName, mcNarrative;
      if done = 1
      then
        leave mc_loop;
      end if;
      set buf = concat(buf,'  <misusecase environment=\"',envName,'\">\n    <narrative>',mcNarrative,'</narrative>\n  </misusecase>\n');
    end loop mc_loop;
    close mcCursor;
    set done = 0;

    set buf = concat(buf,'</risk>\n');
  end loop risk_loop;
  close riskCursor;

  set done = 0;
  open responseCursor;
  response_loop: loop
    fetch responseCursor into responseId, responseName, responseType, riskName;
    if done = 1
    then
      leave response_loop;
    end if;
    set buf = concat(buf,'<response risk=\"',riskName,'\" type=\"',responseType,'\" >\n');
    set responseCount = responseCount + 1;
    open responseEnvCursor;
    responseEnv_loop: loop
      fetch responseEnvCursor into envId, envName;
      if done = 1
      then
        leave responseEnv_loop;
      end if;
      if responseType = 'Accept'
      then
        set buf = concat(buf,'  <accept_environment name=\"',envName,'\" cost=\"',responseCost(responseId,envId),'\">\n    <rationale>',responseDescription(responseId,envId),'</rationale>\n  </accept_environment>\n');
      elseif responseType = 'Transfer'
      then
        set buf = concat(buf,'  <transfer_environment name=\"',envName,'\">\n');
        open responseRoleCursor;
        responseRole_loop: loop
          fetch responseRoleCursor into roleName,roleCost;
          if done = 1
          then
            leave responseRole_loop;
          end if;
          set buf = concat(buf,'    <response_role name=\"',roleName,'\" cost=\"',roleCost,'\" />\n');
        end loop responseRole_loop;
        close responseRoleCursor;
        set done = 0;
        set buf = concat(buf,'    <rationale>',responseDescription(responseId,envId),'</rationale>\n  </transfer_environment>\n'); 
      else
        set mitType = mitigationType(responseId,envId);
        if mitType = 'Deter'
        then
          set buf = concat(buf,'  <deter_environment name=\"',envName,'\" />\n');
        elseif mitType = 'Prevent'
        then
          set buf = concat(buf,'  <prevent_environment name=\"',envName,'\" />\n');
        elseif mitType = 'Detect'
        then
          set buf = concat(buf,'  <detect_environment name=\"',envName,'\" point=\"',mitigatePoint(responseId,envId),'\" />\n');
        else
          set buf = concat(buf,'  <react_environment name=\"',envName,'\" >\n');
          open detMechCursor;
          detMech_loop: loop
            fetch detMechCursor into assetName;
            if done = 1
            then
              leave detMech_loop;
            end if;
            set buf = concat(buf,'    <detection_mechanism name=\"',assetName,'\" />\n');
          end loop detMech_loop;
          close detMechCursor;
          set done = 0;
          set buf = concat(buf,'  </react_environment>\n');
        end if;
      end if;
    end loop responseEnv_loop;
    close responseEnvCursor;
    set done = 0;

    set buf = concat(buf,'</response>\n');
  end loop response_loop;
  close responseCursor;

  set done = 0;
  open assocCursor;
  assoc_loop: loop
    fetch assocCursor into envName, headName, headNav, headAdornment, headNry, headRole, tailRole, tailNry, tailAdornment, tailNav, tailName;
    if done = 1
    then
      leave assoc_loop;
    end if;
    set buf = concat(buf,'<asset_association environment=\"',envName,'\"  head_name=\"',headName,'\" head_nav=\"',headNav,'\" head_adornment=\"',headAdornment,'\" head_nry=\"',s2a(headNry),'\" head_role=\"',headRole,'\" tail_role=\"',tailRole,'\" tail_nry=\"',s2a(tailNry),'\" tail_adornment=\"',tailAdornment,'\" tail_nav=\"',tailNav,'\" tail_name=\"',tailName,'\" />\n');
    set rshipCount = rshipCount + 1;
  end loop assoc_loop;
  close assocCursor;


  set buf = concat(buf,'\n</riskanalysis>');
  select buf,roleCount,assetCount,vulCount,attackerCount,threatCount,riskCount,responseCount,rshipCount;
end
//

create function s2a(sStr text)
returns varchar(10)
deterministic
begin
  if sStr = '*'
  then
    return 'a';
  elseif sStr = '1..*'
  then
    return '1..a';
  else
    return sStr;
  end if;
end
//

create function b2a(bInt text)
returns varchar(10)
deterministic
begin
  if bInt = 1
  then
    return 'TRUE';
  else
    return 'FALSE';
  end if;
end
//

create procedure goalsToXml(in includeHeader int)
begin
  declare dpName varchar(255);
  declare dpDesc varchar(1000);
  declare dpType varchar(50);
  declare dpOrig varchar(100);
  declare dpCount int default 0;
  declare goalId int;
  declare goalName varchar(100);
  declare goalOrig varchar(50);
  declare obsId int;
  declare obsName varchar(100);
  declare obsOrig varchar(50);
  declare envId int;
  declare envName varchar(50);
  declare concernName varchar(50);
  declare sourceName varchar(50);
  declare sourceNry varchar(10);
  declare concernLink varchar(50);
  declare targetNry varchar(10);
  declare targetName varchar(50);
  declare refName varchar(50);
  declare refType varchar(50);
  declare reqLabel int;
  declare reqType varchar(255);
  declare reqPriority int;
  declare reqName varchar(4000);
  declare reqDesc varchar(4000);
  declare reqRat varchar(255);
  declare reqFc varchar(255);
  declare reqOrig varchar(255);
  declare cmId int;
  declare cmName varchar(50);
  declare cmDesc varchar(4000);
  declare cmType varchar(50);
  declare effValue varchar(50);
  declare roleName varchar(50);
  declare taskName varchar(50);
  declare personaName varchar(50);
  declare durValue varchar(50);
  declare freqValue varchar(50);
  declare demValue varchar(50);
  declare gcValue varchar(50);
  declare cProperty varchar(50);
  declare iProperty varchar(50);
  declare avProperty varchar(50);
  declare acProperty varchar(50);
  declare anProperty varchar(50);
  declare panProperty varchar(50);
  declare unlProperty varchar(50);
  declare unoProperty varchar(50);
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);
  declare cmRationale varchar(4000);
  declare trName varchar(50);

  declare goalCount int default 0;
  declare obsCount int default 0;
  declare reqCount int default 0;
  declare cmCount int default 0;
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE goals PUBLIC "-//CAIRIS//DTD REQUIREMENTS 1.0//EN" "http://cairis.org/dtd/goals.dtd">\n\n<goals>\n';
  declare done int default 0;
  declare dpCursor cursor for select dp.name,dp.description,dpt.name,dp.originator from domainproperty dp, domainproperty_type dpt where dp.domainproperty_type_id = dpt.id;
  declare goalCursor cursor for select id,name,originator from goal;
  declare goalEnvCursor cursor for select eg.environment_id,e.name from environment_goal eg, environment e where eg.goal_id = goalId and eg.environment_id = e.id;
  declare goalConcernCursor cursor for select a.name from goal_concern gc, asset a where gc.goal_id = goalId and gc.environment_id = envId and gc.asset_id = a.id;
  declare goalConcernAssocCursor cursor for select sa.name,smt.name,ca.link,ta.name,tmt.name from goal_concernassociation ca, asset sa, asset ta, multiplicity_type smt, multiplicity_type tmt where ca.goal_id = goalId and ca.environment_id = envId and ca.source_id = sa.id and ca.source_multiplicity_id = smt.id and ca.target_id = ta.id and ca.target_multiplicity_id = tmt.id;
  declare obsCursor cursor for select id,name,originator from obstacle;
  declare obsEnvCursor cursor for select eo.environment_id,e.name from environment_obstacle eo, environment e where eo.obstacle_id = obsId and eo.environment_id = e.id;
  declare obsConcernCursor cursor for select a.name from obstacle_concern oc, asset a where oc.obstacle_id = obsId and oc.environment_id = envId and oc.asset_id = a.id;
  declare reqCursor cursor for
    select a.name,'asset',o.label,rt.name,o.priority,o.name,o.description,o.rationale,o.fit_criterion,o.originator from requirement o, asset_requirement ar, asset a, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = ar.requirement_id and ar.asset_id = a.id 
    union
    select e.name,'environment',o.label,rt.name,o.priority,o.name,o.description,o.rationale,o.fit_criterion,o.originator from requirement o, environment_requirement er, environment e, requirement_type rt where o.version = (select max(i.version) from requirement i where i.id = o.id) and o.type = rt.id and o.id = er.requirement_id and er.environment_id = e.id; 
  declare cmCursor cursor for select c.id,c.name,c.description,at.name from countermeasure c,asset_type at where c.countermeasure_type_id = at.id;
  declare cmEnvCursor cursor for select ec.environment_id,e.name from environment_countermeasure ec, environment e where ec.countermeasure_id = cmId and ec.environment_id = e.id;
  declare cmReqsCursor cursor for
    select distinct r.name from requirement_countermeasure rc, requirement r where rc.countermeasure_id = cmId and rc.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rc.environment_id = envId;

  declare cmTargetsCursor cursor for
    select t.name,te.name,ctt.effectiveness_rationale from countermeasure_threat_target ctt, countermeasure_threat_response_target ctrt, threat t, target_effectiveness te,response r where ctt.countermeasure_id = cmId and ctt.environment_id = envId and ctt.threat_id = t.id and ctt.countermeasure_id = ctrt.countermeasure_id and ctt.environment_id = ctrt.environment_id and ctt.threat_id = ctrt.threat_id and ctrt.response_id = r.id and ctt.effectiveness_id = te.id
    union
    select v.name,ve.name,cvt.effectiveness_rationale from countermeasure_vulnerability_target cvt, countermeasure_vulnerability_response_target cvrt, vulnerability v, target_effectiveness ve,response r where cvt.countermeasure_id = cmId and cvt.environment_id = envId and cvt.vulnerability_id = v.id and cvt.countermeasure_id = cvrt.countermeasure_id and cvt.environment_id = cvrt.environment_id and cvt.vulnerability_id = cvrt.vulnerability_id and cvrt.response_id = r.id and cvt.effectiveness_id = ve.id;

  declare cmRolesCursor cursor for select r.name from countermeasure_role cr, role r where cr.countermeasure_id = cmId and cr.environment_id = envId and cr.role_id = r.id;

  declare cmPersonasCursor cursor for select t.name,p.name,duv.name,fv.name,dev.name,gv.name from countermeasure_task_persona ctp, task t, persona p,securityusability_property_value duv, securityusability_property_value fv, securityusability_property_value dev, securityusability_property_value gv where ctp.countermeasure_id = cmId and ctp.environment_id = envId and ctp.task_id = t.id and ctp.persona_id = p.id and ctp.duration_id = duv.id and ctp.frequency_id = fv.id and ctp.demands_id = dev.id and ctp.goalsupport_id = gv.id;
  declare targetResponseCursor cursor for 
     select r.name from response r, countermeasure_vulnerability_response_target cvrt, environment_response er, vulnerability v where cvrt.countermeasure_id = cmId and cvrt.environment_id = envId and cvrt.response_id = er.response_id and cvrt.environment_id = er.environment_id and er.response_id = r.id and cvrt.vulnerability_id = v.id and v.name = targetName
     union
     select r.name from response r, countermeasure_threat_response_target ctrt, environment_response er, threat t where ctrt.countermeasure_id = cmId and ctrt.environment_id = envId and ctrt.response_id = er.response_id and ctrt.environment_id = er.environment_id and er.response_id = r.id and ctrt.threat_id = t.id and t.name = targetName;

  declare continue handler for not found set done = 1;

  if includeHeader = 0
  then
    set buf = '<goals>\n';
  end if;

  open dpCursor;
  dp_loop: loop
    fetch dpCursor into dpName, dpDesc, dpType,dpOrig;
    if done = 1
    then
      leave dp_loop;
    end if;
    set buf = concat(buf,'<domainproperty name=\"',dpName,'\" type=\"',dpType,'\" originator=\"',dpOrig,'\" >\n  <definition>',dpDesc,'</definition>\n</domainproperty>\n');
    set dpCount = dpCount + 1;
  end loop dp_loop;
  close dpCursor;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId, goalName, goalOrig;
    if done = 1
    then
      leave goal_loop;
    end if;
    set buf = concat(buf,'<goal name=\"',goalName,'\" originator=\"',goalOrig,'\">\n');
    set goalCount = goalCount + 1;

    open goalEnvCursor;
    goalEnv_loop: loop
      fetch goalEnvCursor into envId, envName;
      if done = 1
      then
        leave goalEnv_loop;
      end if;
      set buf = concat(buf,'  <goal_environment name=\"',envName,'\" category=\"',goal_category(goalId,envId),'\" priority=\"',goal_priority(goalId,envId),'\" >\n    <definition>',goal_definition(goalId,envId),'</definition>\n    <fit_criterion>',goal_fitcriterion(goalId,envId),'</fit_criterion>\n    <issue>',goal_issue(goalId,envId),'</issue>\n');

      open goalConcernCursor;
      goalConcern_loop: loop
        fetch goalConcernCursor into concernName;
        if done = 1
        then
          leave goalConcern_loop;
        end if;
        set buf = concat(buf,'    <concern name=\"',concernName,'\" />\n');
      end loop goalConcern_loop;
      close goalConcernCursor;
      set done = 0;

      open goalConcernAssocCursor;
      goalConcernAssoc_loop: loop
        fetch goalConcernAssocCursor into sourceName,sourceNry,concernLink,targetName,targetNry;
        if done = 1
        then
          leave goalConcernAssoc_loop;
        end if;
        set buf = concat(buf,'    <concern_association source_name=\"',sourceName,'\" source_nry=\"',s2a(sourceNry),'\" link_name=\"',concernLink,'\" target_nry=\"',s2a(targetNry),'\" target_name=\"',targetName,'\" />\n');
      end loop goalConcernAssoc_loop;
      close goalConcernAssocCursor;
      set done = 0;

      set buf = concat(buf,'  </goal_environment>\n');
    end loop goalEnv_loop;
    close goalEnvCursor;
    set done = 0;


    set buf = concat(buf,'</goal>\n');
  end loop goal_loop;
  close goalCursor;
  set done = 0;

  open obsCursor;
  obs_loop: loop
    fetch obsCursor into obsId, obsName,obsOrig;
    if done = 1
    then
      leave obs_loop;
    end if;
    set buf = concat(buf,'<obstacle name=\"',obsName,'\" originator=\"',obsOrig,'\" >\n');
    set obsCount = obsCount + 1;

    open obsEnvCursor;
    obsEnv_loop: loop
      fetch obsEnvCursor into envId, envName;
      if done = 1
      then
        leave obsEnv_loop;
      end if;
      set buf = concat(buf,'  <obstacle_environment name=\"',envName,'\" category=\"',replace(obstacle_category(obsId,envId),' ','_'),'\" >\n    <definition>',obstacle_definition(obsId,envId),'</definition>\n');

      open obsConcernCursor;
      obsConcern_loop: loop
        fetch obsConcernCursor into concernName;
        if done = 1
        then
          leave obsConcern_loop;
        end if;
        set buf = concat(buf,'    <concern name=\"',concernName,'\" />\n');
      end loop obsConcern_loop;
      close obsConcernCursor;
      set done = 0;

      set buf = concat(buf,'  </obstacle_environment>\n');
    end loop obsEnv_loop;
    close obsEnvCursor;
    set done = 0;

    set buf = concat(buf,'</obstacle>\n');
  end loop obs_loop;
  close obsCursor;
  set done = 0;

  open reqCursor;
  req_loop: loop
    fetch reqCursor into refName,refType,reqLabel,reqType,reqPriority,reqName,reqDesc,reqRat,reqFc,reqOrig;
    if done = 1
    then
      leave req_loop;
    end if;
    set buf = concat(buf,'<requirement name=\"',reqName,'\" reference=\"',refName,'\" reference_type=\"',refType,'\" label=\"',reqLabel,'\" type=\"',replace(reqType,' ','_'),'\" priority=\"',reqPriority,'\" >\n  <description>',reqDesc,'</description>\n  <rationale>',reqRat,'</rationale>\n  <fit_criterion>',reqFc,'</fit_criterion>\n  <originator>',reqOrig,'</originator>\n</requirement>\n');
    set reqCount = reqCount + 1;
  end loop req_loop;
  close reqCursor;
  set done = 0;

  open cmCursor;
  cm_loop: loop
    fetch cmCursor into cmId, cmName, cmDesc, cmType;
    if done = 1
    then
      leave cm_loop;
    end if;
    set buf = concat(buf,'<countermeasure name=\"',cmName,'\" type=\"',cmType,'\" >\n  <description>',cmDesc,'</description>\n');
    set cmCount = cmCount + 1;

    open cmEnvCursor;
    cmEnv_loop: loop
      fetch cmEnvCursor into envId, envName;
      if done = 1
      then
        leave cmEnv_loop;
      end if;
      set buf = concat(buf,'  <countermeasure_environment name=\"',envName,'\" cost=\"',countermeasureCost(cmId,envId),'\" >\n');

      open cmReqsCursor;
      cmReqs_loop: loop
        fetch cmReqsCursor into reqName;
        if done = 1
        then
          leave cmReqs_loop;
        end if;
        set buf = concat(buf,'    <countermeasure_requirement name=\"',reqName,'\" />\n');
      end loop cmReqs_loop;
      close cmReqsCursor;
      set done = 0;

      open cmTargetsCursor;
      cmTargets_loop: loop
        fetch cmTargetsCursor into targetName,effValue,cmRationale;
        if done = 1
        then
          leave cmTargets_loop;
        end if;
        set buf = concat(buf,'    <target name=\"',targetName,'\" effectiveness=\"',effValue,'\" >\n');

        open targetResponseCursor;
        tr_loop: loop
          fetch targetResponseCursor into trName;
          if done = 1
          then
            leave tr_loop;
          end if;
          set buf = concat(buf,'      <target_response name=\"',trName,'\" />\n');
        end loop tr_loop;
        close targetResponseCursor;
        set done = 0;        

        set buf = concat(buf,'      <rationale>',cmRationale,'</rationale>\n    </target>\n');
      end loop cmTargets_loop;
      close cmTargetsCursor;
      set done = 0;

      select spv.name,cp.property_rationale into cProperty,cRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 0 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into iProperty,iRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 1 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into avProperty,avRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 2 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into acProperty,acRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 3 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into anProperty,anRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 4 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into panProperty,panRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 5 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into unlProperty,unlRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 6 and cp.environment_id = envId and cp.property_value_id = spv.id;
      select spv.name,cp.property_rationale into unoProperty,unoRationale from countermeasure_property cp, security_property_value spv where cp.countermeasure_id = cmId and cp.property_id = 7 and cp.environment_id = envId and cp.property_value_id = spv.id;
      if cProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="confidentiality" value=\"',cProperty,'\">\n      <rationale>',cRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if iProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="integrity" value=\"',iProperty,'\">\n      <rationale>',iRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if avProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="availability" value=\"',avProperty,'\">\n      <rationale>',avRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if acProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="accountability" value=\"',acProperty,'\">\n      <rationale>',acRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if anProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="anonymity" value=\"',anProperty,'\">\n      <rationale>',anRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if panProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="pseudonymity" value=\"',panProperty,'\">\n      <rationale>',panRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if unlProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="unlinkability" value=\"',unlProperty,'\">\n      <rationale>',unlRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
      if unoProperty != 'None'
      then
        set buf = concat(buf,'    <mitigating_property name="unobservability" value=\"',unoProperty,'\">\n      <rationale>',unoRationale,'</rationale>\n    </mitigating_property>\n');
      end if;
   
      open cmRolesCursor;
      cmRoles_loop: loop
        fetch cmRolesCursor into roleName;
        if done = 1
        then
          leave cmRoles_loop;
        end if;
        set buf = concat(buf,'    <responsible_role name=\"',roleName,'\" />\n');
      end loop cmRoles_loop;
      close cmRolesCursor;
      set done = 0;

      open cmPersonasCursor;
      cmPersonas_loop: loop
        fetch cmPersonasCursor into taskName,personaName,durValue,freqValue,demValue,gcValue;
        if done = 1
        then
          leave cmPersonas_loop;
        end if;
        set buf = concat(buf,'    <responsible_persona task=\"',taskName,'\" persona=\"',personaName,'\" duration=\"',replace(durValue,' ','_'),'\" frequency=\"',replace(freqValue,' ','_'),'\" demands=\"',replace(demValue,' ','_'),'\" goals=\"',replace(gcValue,' ','_'),'\" />\n');
      end loop cmPersonas_loop;
      close cmPersonasCursor;
      set done = 0;

      set buf = concat(buf,'  </countermeasure_environment>\n');
    end loop cmEnv_loop;
    close cmEnvCursor;
    set done = 0;

    set buf = concat(buf,'</countermeasure>\n');
  end loop cm_loop;
  close cmCursor;

  set buf = concat(buf,'</goals>');
  select buf,dpCount,goalCount,obsCount,reqCount,cmCount;
end
//

create function durationLabel(dVal text)
returns varchar(50)
deterministic
begin
  if dVal = 'Low'
  then
    return 'Seconds';
  elseif dVal = 'Medium'
  then
    return 'Minutes';
  else
    return 'Hours_or_longer';
  end if;
end
//

create function frequencyLabel(fVal text)
returns varchar(50)
deterministic
begin
  if fVal = 'Low'
  then
    return 'Hourly_or_more';
  elseif fVal = 'Medium'
  then
    return 'Daily_-_Weekly';
  else
    return 'Monthly_or_less';
  end if;
end
//


create procedure usabilityToXml(in includeHeader int)
begin
  declare envId int;
  declare envName varchar(50);
  declare personaId int;
  declare personaName varchar(50);
  declare pActivities varchar(4000);
  declare pAttitudes varchar(4000);
  declare pAptitudes varchar(4000);
  declare pMotivations varchar(4000);
  declare pSkills varchar(4000);
  declare pIntrinsic varchar(4000);
  declare pContextual varchar(4000);
  declare pImage varchar(2000);
  declare isAssumption int;
  declare pType varchar(50);
  declare roleName varchar(50);
  declare personaCount int default 0;
  declare edName varchar(2000);
  declare edVersion varchar(20);
  declare edDate varchar(100);
  declare edAuthors varchar(200);
  declare edDesc varchar(2000);
  declare edCount int default 0;
  declare drName varchar(200);
  declare drCount int default 0;
  declare drCont varchar(200);
  declare drExcerpt varchar(2000);
  declare pcId int;
  declare tcId int;
  declare bvName varchar(50);
  declare modQual varchar(50);
  declare pcDesc varchar(2000);
  declare pcCount int default 0;
  declare gwrType varchar(20);
  declare gwrRef varchar(200);
  declare gwrConcept varchar(50);
  declare taskId int;
  declare taskName varchar(50);
  declare taskCode varchar(100);
  declare taskAuthor varchar(255);
  declare taskObjective varchar(255);
  declare isTaskAssumption int;
  declare taskCount int default 0;
  declare durationValue varchar(50);
  declare frequencyValue varchar(50);
  declare demandsValue varchar(50);
  declare gcValue varchar(50);
  declare concernName varchar(50);
  declare sourceName varchar(50);
  declare sourceNry varchar(10);
  declare concernLink varchar(50);
  declare targetNry varchar(10);
  declare targetName varchar(50);
  declare ucId int;
  declare ucName varchar(50);
  declare ucAuthor varchar(255);
  declare ucShortCode varchar(100);
  declare ucDesc varchar(2000);
  declare ucPreCond varchar(2000);
  declare ucPostCond varchar(2000);
  declare stepNo int;
  declare stepDesc varchar(2000);
  declare ucExcName varchar(200);
  declare excDim varchar(20);
  declare ucExcRelValue varchar(50);
  declare ucExcCategory varchar(50);
  declare ucExcDesc varchar(2000);
  declare ucCount int default 0;
  declare tagName varchar(255);
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE usability PUBLIC "-//CAIRIS//DTD USABILITY 1.0//EN" "http://cairis.org/dtd/usability.dtd">\n\n<usability>\n';
  declare done int default 0;
  declare personaCursor cursor for select p.id,p.name,p.activities,p.attitudes,p.aptitudes,p.motivations,p.skills,p.intrinsic,p.contextual,p.image,p.assumption_id,pt.name from persona p, persona_type pt where p.persona_type_id = pt.id;
  declare personaEnvCursor cursor for select ep.environment_id,e.name from environment_persona ep, environment e where ep.persona_id = personaId and ep.environment_id = e.id;
  declare personaRolesCursor cursor for select r.name from persona_role sr, role r where sr.persona_id = personaId and sr.environment_id = envId and sr.role_id = r.id;
  declare edCursor cursor for select name,version,publication_date,authors,description from external_document;
  declare drCursor cursor for select distinct dr.name,ed.name,dr.contributor,dr.excerpt from document_reference dr, external_document ed where dr.document_id = ed.id;
  declare crCursor cursor for select name,dimension_name,object_name,description from concept_reference; 
  declare pcCursor cursor for select pc.id,p.name,bv.name,pc.qualifier,pc.description from persona_characteristic pc, persona p, behavioural_variable bv where pc.persona_id = p.id and pc.variable_id = bv.id order by 2,3;
  declare tcCursor cursor for select tc.id,t.name,tc.qualifier,tc.description from task_characteristic tc, task t where tc.task_id = t.id order by 2;

  declare taskGroundsCursor cursor for
    select 'document',dr.name,'' from task_characteristic_document pc, document_reference dr where pc.characteristic_id = tcId and pc.reference_id = dr.id and pc.characteristic_reference_type_id = 0
    union
    select 'persona',cr.name,c.name from task_characteristic_persona pc, persona_reference cr, persona c where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.persona_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'usecase',cr.name,c.name from task_characteristic_usecase pc, usecase_reference cr, usecase c where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.usecase_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'requirement',cr.name,concat(a.short_code,'-',c.label) from task_characteristic_requirement pc, requirement_reference cr, requirement c, asset_requirement ar, asset a where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 0 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'requirement',cr.name,concat(e.short_code,'-',c.label) from task_characteristic_requirement pc, requirement_reference cr, requirement c, environment_requirement er, environment e where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 0 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id); 

  declare taskWarrantCursor cursor for
    select 'document',dr.name,'' from task_characteristic_document pc, document_reference dr where pc.characteristic_id = tcId and pc.reference_id = dr.id and pc.characteristic_reference_type_id = 1
    union
    select 'persona',cr.name,c.name from task_characteristic_persona pc, persona_reference cr, persona c where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.persona_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'usecase',cr.name,c.name from task_characteristic_usecase pc, usecase_reference cr, usecase c where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.usecase_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'requirement',cr.name,concat(a.short_code,'-',c.label) from task_characteristic_requirement pc, requirement_reference cr, requirement c, asset_requirement ar, asset a where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 1 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'requirement',cr.name,concat(e.short_code,'-',c.label) from task_characteristic_requirement pc, requirement_reference cr, requirement c, environment_requirement er, environment e where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 1 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id); 


  declare taskRebuttalCursor cursor for
    select 'document',dr.name,'' from task_characteristic_document pc, document_reference dr where pc.characteristic_id = tcId and pc.reference_id = dr.id and pc.characteristic_reference_type_id = 2
    union
    select 'persona',cr.name,c.name from task_characteristic_persona pc, persona_reference cr, persona c where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.persona_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'usecase',cr.name,c.name from task_characteristic_usecase pc, usecase_reference cr, usecase c where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.usecase_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'requirement',cr.name,concat(a.short_code,'-',c.label) from task_characteristic_requirement pc, requirement_reference cr, requirement c, asset_requirement ar, asset a where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 2 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'requirement',cr.name,concat(e.short_code,'-',c.label) from task_characteristic_requirement pc, requirement_reference cr, requirement c, environment_requirement er, environment e where pc.characteristic_id = tcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 2 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id); 

  declare groundsCursor cursor for
    select 'document',dr.name,'' from persona_characteristic_document pc, document_reference dr where pc.characteristic_id = pcId and pc.reference_id = dr.id and pc.characteristic_reference_type_id = 0
    union
    select 'asset',cr.name,c.name from persona_characteristic_asset pc, asset_reference cr, asset c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.asset_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'attacker',cr.name,c.name from persona_characteristic_attacker pc, attacker_reference cr, attacker c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.attacker_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'countermeasure',cr.name,c.name from persona_characteristic_countermeasure pc, countermeasure_reference cr, countermeasure c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.countermeasure_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'domainproperty',cr.name,c.name from persona_characteristic_domainproperty pc, domainproperty_reference cr, domainproperty c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.domainproperty_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'environment',cr.name,c.name from persona_characteristic_environment pc, environment_reference cr, environment c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.environment_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'goal',cr.name,c.name from persona_characteristic_goal pc, goal_reference cr, goal c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.goal_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'misusecase',cr.name,c.name from persona_characteristic_misusecase pc, misusecase_reference cr, misusecase c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.misusecase_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'obstacle',cr.name,c.name from persona_characteristic_obstacle pc, obstacle_reference cr, obstacle c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.obstacle_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'persona',cr.name,c.name from persona_characteristic_persona pc, persona_reference cr, persona c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.persona_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'requirement',cr.name,concat(a.short_code,'-',c.label) from persona_characteristic_requirement pc, requirement_reference cr, requirement c, asset_requirement ar, asset a where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 0 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'requirement',cr.name,concat(e.short_code,'-',c.label) from persona_characteristic_requirement pc, requirement_reference cr, requirement c, environment_requirement er, environment e where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 0 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'response',cr.name,c.name from persona_characteristic_response pc, response_reference cr, response c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.response_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'risk',cr.name,c.name from persona_characteristic_risk pc, risk_reference cr, risk c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.risk_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'role',cr.name,c.name from persona_characteristic_role pc, role_reference cr, role c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.role_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'task',cr.name,c.name from persona_characteristic_task pc, task_reference cr, task c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.task_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'threat',cr.name,c.name from persona_characteristic_threat pc, threat_reference cr, threat c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.threat_id = c.id and pc.characteristic_reference_type_id = 0
    union
    select 'vulnerability',cr.name,c.name from persona_characteristic_vulnerability pc, vulnerability_reference cr, vulnerability c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.vulnerability_id = c.id and pc.characteristic_reference_type_id = 0;
  declare warrantCursor cursor for
    select 'document',dr.name,'' from persona_characteristic_document pc, document_reference dr where pc.characteristic_id = pcId and pc.reference_id = dr.id and pc.characteristic_reference_type_id = 1
    union
    select 'asset',cr.name,c.name from persona_characteristic_asset pc, asset_reference cr, asset c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.asset_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'attacker',cr.name,c.name from persona_characteristic_attacker pc, attacker_reference cr, attacker c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.attacker_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'countermeasure',cr.name,c.name from persona_characteristic_countermeasure pc, countermeasure_reference cr, countermeasure c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.countermeasure_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'domainproperty',cr.name,c.name from persona_characteristic_domainproperty pc, domainproperty_reference cr, domainproperty c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.domainproperty_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'environment',cr.name,c.name from persona_characteristic_environment pc, environment_reference cr, environment c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.environment_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'goal',cr.name,c.name from persona_characteristic_goal pc, goal_reference cr, goal c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.goal_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'misusecase',cr.name,c.name from persona_characteristic_misusecase pc, misusecase_reference cr, misusecase c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.misusecase_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'obstacle',cr.name,c.name from persona_characteristic_obstacle pc, obstacle_reference cr, obstacle c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.obstacle_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'persona',cr.name,c.name from persona_characteristic_persona pc, persona_reference cr, persona c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.persona_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'requirement',cr.name,concat(a.short_code,'-',c.label) from persona_characteristic_requirement pc, requirement_reference cr, requirement c, asset_requirement ar, asset a where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 1 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'requirement',cr.name,concat(e.short_code,'-',c.label) from persona_characteristic_requirement pc, requirement_reference cr, requirement c, environment_requirement er, environment e where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 1 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'response',cr.name,c.name from persona_characteristic_response pc, response_reference cr, response c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.response_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'risk',cr.name,c.name from persona_characteristic_risk pc, risk_reference cr, risk c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.risk_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'role',cr.name,c.name from persona_characteristic_role pc, role_reference cr, role c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.role_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'task',cr.name,c.name from persona_characteristic_task pc, task_reference cr, task c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.task_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'threat',cr.name,c.name from persona_characteristic_threat pc, threat_reference cr, threat c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.threat_id = c.id and pc.characteristic_reference_type_id = 1
    union
    select 'vulnerability',cr.name,c.name from persona_characteristic_vulnerability pc, vulnerability_reference cr, vulnerability c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.vulnerability_id = c.id and pc.characteristic_reference_type_id = 1;
  declare rebuttalCursor cursor for
    select 'document',dr.name,'' from persona_characteristic_document pc, document_reference dr where pc.characteristic_id = pcId and pc.reference_id = dr.id and pc.characteristic_reference_type_id = 2
    union
    select 'asset',cr.name,c.name from persona_characteristic_asset pc, asset_reference cr, asset c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.asset_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'attacker',cr.name,c.name from persona_characteristic_attacker pc, attacker_reference cr, attacker c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.attacker_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'countermeasure',cr.name,c.name from persona_characteristic_countermeasure pc, countermeasure_reference cr, countermeasure c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.countermeasure_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'domainproperty',cr.name,c.name from persona_characteristic_domainproperty pc, domainproperty_reference cr, domainproperty c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.domainproperty_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'environment',cr.name,c.name from persona_characteristic_environment pc, environment_reference cr, environment c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.environment_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'goal',cr.name,c.name from persona_characteristic_goal pc, goal_reference cr, goal c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.goal_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'misusecase',cr.name,c.name from persona_characteristic_misusecase pc, misusecase_reference cr, misusecase c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.misusecase_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'obstacle',cr.name,c.name from persona_characteristic_obstacle pc, obstacle_reference cr, obstacle c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.obstacle_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'persona',cr.name,c.name from persona_characteristic_persona pc, persona_reference cr, persona c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.persona_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'requirement',cr.name,concat(a.short_code,'-',c.label) from persona_characteristic_requirement pc, requirement_reference cr, requirement c, asset_requirement ar, asset a where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 2 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'requirement',cr.name,concat(e.short_code,'-',c.label) from persona_characteristic_requirement pc, requirement_reference cr, requirement c, environment_requirement er, environment e where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.requirement_id = c.id and pc.characteristic_reference_type_id = 2 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id) 
    union
    select 'response',cr.name,c.name from persona_characteristic_response pc, response_reference cr, response c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.response_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'risk',cr.name,c.name from persona_characteristic_risk pc, risk_reference cr, risk c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.risk_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'role',cr.name,c.name from persona_characteristic_role pc, role_reference cr, role c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.role_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'task',cr.name,c.name from persona_characteristic_task pc, task_reference cr, task c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.task_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'threat',cr.name,c.name from persona_characteristic_threat pc, threat_reference cr, threat c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.threat_id = c.id and pc.characteristic_reference_type_id = 2
    union
    select 'vulnerability',cr.name,c.name from persona_characteristic_vulnerability pc, vulnerability_reference cr, vulnerability c where pc.characteristic_id = pcId and pc.reference_id = cr.id and cr.vulnerability_id = c.id and pc.characteristic_reference_type_id = 2;
  declare taskCursor cursor for select id,name,short_code,author,objective,assumption_id from task;
  declare taskPersonaCursor cursor for select p.name,duv.name,fv.name,dev.name,gv.name from persona p, task_persona tp, security_property_value duv, security_property_value fv, security_property_value dev, security_property_value gv where tp.task_id = taskId and tp.environment_id = envId and tp.persona_id = p.id and tp.duration_id = duv.id and tp.frequency_id = fv.id and tp.demands_id = dev.id and tp.goalsupport_id = gv.id;
  declare taskConcernCursor cursor for select a.name from task_asset tc, asset a where tc.task_id = taskId and tc.environment_id = envId and tc.asset_id = a.id;
  declare taskConcernAssocCursor cursor for select sa.name,smt.name,ca.link,ta.name,tmt.name from task_concernassociation ca, asset sa, asset ta, multiplicity_type smt, multiplicity_type tmt where ca.task_id = taskId and ca.environment_id = envId and ca.source_id = sa.id and ca.source_multiplicity_id = smt.id and ca.target_id = ta.id and ca.target_multiplicity_id = tmt.id;
  declare ucCursor cursor for select id,name,author,short_code,description from usecase;
  declare ucStepCursor cursor for select step_no,description from usecase_step where usecase_id = ucId and environment_id = envId order by 1;
  declare ucStepExceptionCursor cursor for
    select usge.name, 'Goal', g.name, oct.name, usge.description from usecase_step_goal_exception usge, goal g, obstacle_category_type oct where usge.usecase_id = ucId and usge.environment_id = envId and usge.step_no = stepNo and usge.goal_id = g.id and usge.category_type_id = oct.id
    union
    select usge.name, 'Requirement', concat(a.short_code,'-',r.label), oct.name, usge.description from usecase_step_requirement_exception usge, requirement r, asset_requirement ar, asset a, obstacle_category_type oct where usge.usecase_id = ucId and usge.environment_id = envId and usge.step_no = stepNo and usge.goal_id = r.id and r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and usge.category_type_id = oct.id
    union
    select usge.name, 'Requirement', concat(e.short_code,'-',r.label), oct.name, usge.description from usecase_step_requirement_exception usge, requirement r, environment_requirement er, environment e, obstacle_category_type oct where usge.usecase_id = ucId and usge.environment_id = envId and usge.step_no = stepNo and usge.goal_id = r.id and r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and usge.category_type_id = oct.id;
  declare taskEnvCursor cursor for select et.environment_id,e.name from environment_task et, environment e where et.task_id = taskId and et.environment_id = e.id;
  
  declare ucEnvCursor cursor for select eu.environment_id,e.name from environment_usecase eu, environment e where eu.usecase_id = ucId and eu.environment_id = e.id;
  declare ucActorCursor cursor for select r.name from usecase_role ur, role r where ur.usecase_id = ucId and ur.role_id = r.id;
  declare ucStepTagCursor cursor for select t.name from usecase_step_tag ust, tag t where ust.usecase_id = ucId and ust.environment_id = envId and ust.step_no = stepNo and ust.tag_id = t.id order by 1;
  declare continue handler for not found set done = 1;


  if includeHeader = 0
  then
    set buf = '<usability>\n';
  end if;

  open personaCursor;
  persona_loop: loop
    fetch personaCursor into personaId,personaName,pActivities,pAttitudes,pAptitudes,pMotivations,pSkills,pIntrinsic,pContextual,pImage,isAssumption,pType;
    if done = 1
    then
      leave persona_loop;
    end if;
    set buf = concat(buf,'<persona name=\"',personaName,'\" type=\"',pType,'\" assumption_persona=\"',b2a(isAssumption),'\" image=\"',pImage,'\" >\n  <activities>',pActivities,'</activities>\n  <attitudes>',pAttitudes,'</attitudes>\n  <aptitudes>',pAptitudes,'</aptitudes>\n  <motivations>',pMotivations,'</motivations>\n  <skills>',pSkills,'</skills>\n  <intrinsic>',pIntrinsic,'</intrinsic>\n  <contextual>',pContextual,'</contextual>\n');
    set personaCount = personaCount + 1;
    open personaEnvCursor;
    personaEnv_loop: loop
      fetch personaEnvCursor into envId, envName;
      if done = 1
      then
        leave personaEnv_loop;
      end if;
      set buf = concat(buf,'  <persona_environment name=\"',envName,'\" is_direct=\"',b2a(personaDirect(personaId,envId)),'\" >\n');

      open personaRolesCursor;
      personaRoles_loop: loop
        fetch personaRolesCursor into roleName;
        if done = 1
        then
          leave personaRoles_loop;
        end if;
        set buf = concat(buf,'    <persona_role name=\"',roleName,'\" />\n');
      end loop personaRoles_loop;
      close personaRolesCursor;
      set done = 0;

      set buf = concat(buf,'    <narrative>',personaNarrative(personaId,envId),'</narrative>\n');
      set buf = concat(buf,'  </persona_environment>\n');
    end loop personaEnv_loop;
    close personaEnvCursor;
    set done = 0;
    set buf = concat(buf,'</persona>\n');
  end loop persona_loop;
  close personaCursor;

  set done = 0;
  open edCursor;
  ed_loop : loop
    fetch edCursor into edName,edVersion,edDate,edAuthors,edDesc;
    if done = 1
    then
      leave ed_loop;
    end if;
    set buf = concat(buf,'<external_document name=\"',edName,'\" version=\"',edVersion,'\" date=\"',edDate,'\" authors=\"',edAuthors,'\" >\n  <description>',edDesc,'</description>\n</external_document>\n');
    set edCount = edCount + 1; 
  end loop ed_loop;
  close edCursor;

  set done = 0;
  open drCursor;
  dr_loop : loop
    fetch drCursor into drName,edName,drCont,drExcerpt;
    if done = 1
    then
      leave dr_loop;
    end if;
    set buf = concat(buf,'<document_reference name=\"',drName,'\" contributor=\"',drCont,'\" document=\"',edName,'\" >\n  <excerpt>',drExcerpt,'</excerpt>\n</document_reference>\n');
    set drCount = drCount + 1; 
  end loop dr_loop;
  close drCursor;

  set done = 0;
  open crCursor;
  cr_loop : loop
    fetch crCursor into drName,gwrType,gwrConcept,drExcerpt;
    if done = 1
    then
      leave cr_loop;
    end if;
    set buf = concat(buf,'<concept_reference name=\"',drName,'\" concept=\"',gwrType,'\" object=\"',gwrConcept,'\" >\n  <description>',drExcerpt,'</description>\n</concept_reference>\n');
    set drCount = drCount + 1; 
  end loop cr_loop;
  close crCursor;

  set done = 0;
  open pcCursor;
  pc_loop : loop
    fetch pcCursor into pcId, personaName, bvName, modQual, pcDesc;
    if done = 1
    then 
      leave pc_loop;
    end if;
    set buf = concat(buf,'<persona_characteristic persona=\"',personaName,'\" behavioural_variable=\"',replace(bvName,' ','_'),'\" modal_qualifier=\"',modQual,'\" >\n  <definition>',pcDesc,'</definition>\n');
    set pcCount = pcCount + 1;
      open groundsCursor;
      grounds_loop: loop
        fetch groundsCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave grounds_loop;
        end if;
        if gwrType = 'document'
        then
          set buf = concat(buf,'  <grounds type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
        else
          set buf = concat(buf,'  <grounds type=\"',gwrType,'\" artifact=\"',gwrConcept,'\" reference=\"',gwrRef,'\" />\n');
        end if;
      end loop grounds_loop;
      close groundsCursor;
      set done = 0;

      open warrantCursor;
      warrant_loop: loop
        fetch warrantCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave warrant_loop;
        end if;
        if gwrType = 'document'
        then
          set buf = concat(buf,'  <warrant type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
        else
          set buf = concat(buf,'  <warrant type=\"',gwrType,'\" artifact=\"',gwrConcept,'\" reference=\"',gwrRef,'\" />\n');
        end if;
      end loop warrant_loop;
      close warrantCursor;
      set done = 0;

      open rebuttalCursor;
      rebuttal_loop: loop
        fetch rebuttalCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave rebuttal_loop;
        end if;
        if gwrType = 'document'
        then
          set buf = concat(buf,'  <rebuttal type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
        else
          set buf = concat(buf,'  <rebuttal type=\"',gwrType,'\" artifact=\"',gwrConcept,'\" reference=\"',gwrRef,'\" />\n');
        end if;
   
      end loop rebuttal_loop;
      close rebuttalCursor;
      set done = 0;

    set buf = concat(buf,'</persona_characteristic>\n');
  end loop pc_loop;
  close pcCursor;

  set done = 0;
  open tcCursor;
  tc_loop : loop
    fetch tcCursor into tcId, taskName, modQual, pcDesc;
    if done = 1
    then 
      leave tc_loop;
    end if;
    set buf = concat(buf,'<task_characteristic task=\"',taskName,'\" modal_qualifier=\"',modQual,'\" >\n  <definition>',pcDesc,'</definition>\n');
    set pcCount = pcCount + 1;
      open taskGroundsCursor;
      taskGrounds_loop: loop
        fetch taskGroundsCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave taskGrounds_loop;
        end if;
        if gwrType = 'document'
        then
          set buf = concat(buf,'  <grounds type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
        else
          set buf = concat(buf,'  <grounds type=\"',gwrType,'\" artifact=\"',gwrConcept,'\" reference=\"',gwrRef,'\" />\n');
        end if;
      end loop taskGrounds_loop;
      close taskGroundsCursor;
      set done = 0;

      open taskWarrantCursor;
      taskWarrant_loop: loop
        fetch taskWarrantCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave taskWarrant_loop;
        end if;
        if gwrType = 'document'
        then
          set buf = concat(buf,'  <warrant type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
        else
          set buf = concat(buf,'  <warrant type=\"',gwrType,'\" artifact=\"',gwrConcept,'\" reference=\"',gwrRef,'\" />\n');
        end if;
      end loop taskWarrant_loop;
      close taskWarrantCursor;
      set done = 0;

      open taskRebuttalCursor;
      taskRebuttal_loop: loop
        fetch taskRebuttalCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave taskRebuttal_loop;
        end if;
        if gwrType = 'document'
        then
          set buf = concat(buf,'  <rebuttal type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
        else
          set buf = concat(buf,'  <rebuttal type=\"',gwrType,'\" artifact=\"',gwrConcept,'\" reference=\"',gwrRef,'\" />\n');
        end if;
      end loop taskRebuttal_loop;
      close taskRebuttalCursor;
      set done = 0;

    set buf = concat(buf,'</task_characteristic>\n');
  end loop tc_loop;
  close tcCursor;

  set done = 0;
  open taskCursor;
  task_loop : loop
    fetch taskCursor into taskId,taskName,taskCode,taskAuthor,taskObjective,isTaskAssumption;
    if done = 1
    then
      leave task_loop;
    end if;
    set buf = concat(buf,'<task name=\"',taskName,'\" code=\"',taskCode,'\" author=\"',taskAuthor,'\" assumption_task=\"',b2a(isTaskAssumption),'\" >\n  <objective>',taskObjective,'</objective>\n');
    set taskCount = taskCount + 1; 

    open taskEnvCursor;
    taskEnv_loop: loop
      fetch taskEnvCursor into envId,envName;
      if done = 1
      then
        leave taskEnv_loop;
      end if;
      set buf = concat(buf,'  <task_environment name=\"',envName,'\" >\n    <dependencies>',taskDependencies(taskId,envId),'</dependencies>\n');

      open taskPersonaCursor;
      taskPersona_loop: loop
        fetch taskPersonaCursor into personaName,durationValue,frequencyValue,demandsValue,gcValue;
        if done = 1
        then
          leave taskPersona_loop;
        end if;
        set buf = concat(buf,'    <task_persona persona=\"',personaName,'\" duration=\"',durationLabel(durationValue),'\" frequency=\"',frequencyLabel(frequencyValue),'\" demands=\"',demandsValue,'\" goal_conflict=\"',gcValue,'\" />\n');
      end loop taskPersona_loop;
      close taskPersonaCursor;
      set done = 0;

      open taskConcernCursor;
      taskConcern_loop: loop
        fetch taskConcernCursor into concernName;
        if done = 1
        then
          leave taskConcern_loop;
        end if;
        set buf = concat(buf,'    <task_concern asset=\"',concernName,'\" />\n');
      end loop taskConcern_loop;
      close taskConcernCursor;
      set done = 0;

      set buf = concat(buf,'    <narrative>',taskNarrative(taskId,envId),'</narrative>\n');
      set buf = concat(buf,'    <consequences>',taskConsequences(taskId,envId),'</consequences>\n');
      set buf = concat(buf,'    <benefits>',taskBenefits(taskId,envId),'</benefits>\n');

      open taskConcernAssocCursor;
      taskConcernAssoc_loop: loop
        fetch taskConcernAssocCursor into sourceName,sourceNry,concernLink,targetName,targetNry;
        if done = 1
        then
          leave taskConcernAssoc_loop;
        end if;
        set buf = concat(buf,'    <task_concern_association source_name=\"',sourceName,'\" source_nry=\"',s2a(sourceNry),'\" link_name=\"',concernLink,'\" target_nry=\"',s2a(targetNry),'\" target_name=\"',targetName,'\" />\n');
      end loop taskConcernAssoc_loop;
      close taskConcernAssocCursor;
      set done = 0;

      set buf = concat(buf,  '  </task_environment>\n');
    end loop taskEnv_loop;
    close taskEnvCursor;
    set done = 0;

    set buf = concat(buf,'</task>\n');
  end loop task_loop;
  close taskCursor;

  set done = 0;
  open ucCursor;
  uc_loop: loop
    fetch ucCursor into ucId,ucName,ucAuthor,ucShortCode,ucDesc;
    if done = 1
    then
      leave uc_loop;
    end if;
    set buf = concat(buf,'<usecase name=\"',ucName,'\" author=\"',ucAuthor,'\" code=\"',ucShortCode,'\" >\n  <description>',ucDesc,'</description>\n');
    set ucCount = ucCount + 1;

    open ucActorCursor;
    ucActor_loop: loop
      fetch ucActorCursor into roleName;
      if done = 1
      then
        leave ucActor_loop;
      end if;
      set buf = concat(buf,'  <actor name=\"',roleName,'\" />\n');
    end loop ucActor_loop;
    close ucActorCursor;
    set done = 0;

    open ucEnvCursor;
    ucEnv_loop: loop
      fetch ucEnvCursor into envId,envName;
      if done = 1
      then
        leave ucEnv_loop;
      end if;
      select preconditions into ucPreCond from usecase_conditions where usecase_id = ucId and environment_id = envId;
      set buf = concat(buf,'  <usecase_environment name=\"',envName,'\" >\n    <preconditions>',ucPreCond,'</preconditions>\n    <flow>\n');

      open ucStepCursor;
      ucStep_loop: loop
        fetch ucStepCursor into stepNo, stepDesc;
        if done = 1
        then
          leave ucStep_loop;
        end if; 
        set buf = concat(buf,'      <step number=\"',stepNo,'\" description=\"',stepDesc,'\" >\n');


        open ucStepTagCursor;
        ucStepTag_loop: loop
          fetch ucStepTagCursor into tagName;
          if done = 1
          then
            leave ucStepTag_loop;
          end if;
          set buf = concat(buf,'        <tag name=\"',tagName,'\" />\n'); 
        end loop ucStepTag_loop;
        close ucStepTagCursor;
        set done = 0;

        open ucStepExceptionCursor;
        ucStepException_loop: loop
          fetch ucStepExceptionCursor into ucExcName,excDim,ucExcRelValue,ucExcCategory,ucExcDesc;
          if done = 1
          then
            leave ucStepException_loop;
          end if;
          set buf = concat(buf,'        <exception name=\"',ucExcName,'\" type=\"',excDim,'\" value=\"',ucExcRelValue,'\" category=\"',replace(ucExcCategory,' ','_'),'\" >\n          <definition>',ucExcDesc,'</definition>\n        </exception>\n');
        end loop ucStepException_loop;
        close ucStepExceptionCursor;
        set done = 0;

        set buf = concat(buf,'      </step>\n');
      end loop ucStep_loop;
      close ucStepCursor;
      set done = 0;
   
      set buf = concat(buf,'    </flow>\n');
      select postconditions into ucPostCond from usecase_conditions where usecase_id = ucId and environment_id = envId;
      set buf = concat(buf,'    <postconditions>',ucPostCond,'</postconditions>\n');
      set buf = concat(buf,'  </usecase_environment>\n');
    end loop ucEnv_loop;
    close ucEnvCursor;
    set done = 0;

    set buf = concat(buf,'</usecase>\n');
  end loop uc_loop;
  close ucCursor;

  set buf = concat(buf,'</usability>');
  select buf,personaCount,edCount,drCount,pcCount,taskCount,ucCount;
end
//

create procedure associationsToXml(in includeHeader int)
begin
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE associations PUBLIC "-//CAIRIS//DTD ASSOCIATIONS 1.0//EN" "http://cairis.org/dtd/associations.dtd">\n\n<associations>\n';
  declare fromDim varchar(50);
  declare fromName varchar(50);
  declare toDim varchar(50);
  declare toName varchar(50);
  declare refType varchar(50);
  declare envName varchar(50);
  declare goalName varchar(100);
  declare goalDim varchar(50);
  declare subGoalName varchar(50);
  declare subGoalDim varchar(50);
  declare alternativeId int;
  declare altRationale varchar(1000);
  declare cmName varchar(50);
  declare reqName varchar(50);
  declare responseName varchar(50);
  declare roleName varchar(50);
  declare costName varchar(50);
  declare dependerName varchar(50);
  declare dependeeName varchar(50);
  declare depType varchar(50);
  declare dependencyName varchar(50);
  declare maCount int default 0;
  declare gaCount int default 0;
  declare rrCount int default 0;
  declare depCount int default 0;
  declare done int default 0;
  declare maCursor cursor for
    select 'requirement',r.name,'task', t.name,rty.name from task t, requirement r, requirement_task rt, reference_type rty where rt.task_id = t.id and rt.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rt.ref_type_id = rty.id
    union
    select 'requirement',r.name,'usecase', u.name,rty.name from usecase u, requirement r, requirement_usecase ru, reference_type rty where ru.usecase_id = u.id and ru.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and ru.ref_type_id = rty.id
    union
    select 'usecase', u.name, 'task', t.name, '' from usecase_task ut, usecase u, task t where ut.usecase_id = u.id and ut.task_id = t.id
    union
    select 'task', t.name, 'vulnerability', v.name, '' from task_vulnerability tv, vulnerability v, task t where tv.task_id = t.id and tv.vulnerability_id = v.id
    union
    select 'requirement', r.name, 'vulnerability', v.name, '' from requirement r, vulnerability v, requirement_vulnerability rv where rv.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rv.vulnerability_id = v.id
    union
    select 'domainproperty', dp.name, 'asset', a.name, '' from domainproperty dp, domainproperty_asset da, asset a where da.asset_id = a.id and da.domainproperty_id = dp.id
    union
    select 'requirement', r.name, 'role', ro.name, '' from requirement r, role ro, requirement_role rr where rr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and rr.role_id = ro.id
    union
    select 'countermeasure', c.name, 'asset', a.name, '' from countermeasure_asset ca, countermeasure c, asset a where ca.countermeasure_id = c.id and ca.asset_id = a.id
    union
    select 'response', r.name, 'goal', g.name, '' from response_goal rg, response r, goal g where rg.response_id = r.id and rg.goal_id = g.id;

  declare goalAssocCursor cursor for
    select e.name,hg.name,'goal',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from goalgoal_goalassociation ga, environment e, goal hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'goal',rt.name,tg.name,'requirement',ga.alternative_id,ga.rationale from goalrequirement_goalassociation ga, environment e, goal hg, reference_type rt, requirement tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'requirement',ga.alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id
    union
    select e.name,hg.name,'goal',rt.name,tg.name,'task',ga.alternative_id,ga.rationale from goaltask_goalassociation ga, environment e, goal hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'task',ga.alternative_id,ga.rationale from obstacletask_goalassociation ga, environment e, obstacle hg, reference_type rt, task tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from obstacleusecase_goalassociation ga, environment e, obstacle hg, reference_type rt, usecase tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'goal',rt.name,tg.name,'usecase',ga.alternative_id,ga.rationale from goalusecase_goalassociation ga, environment e, goal hg, reference_type rt, usecase tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'goal',rt.name,tg.name,'role',ga.alternative_id,ga.rationale from goalrole_goalassociation ga, environment e, goal hg, reference_type rt, role tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'goal',rt.name,tg.name,'domainproperty',ga.alternative_id alternative_id,ga.rationale from goaldomainproperty_goalassociation ga, environment e, goal hg, reference_type rt, domainproperty tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'goal',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from goalobstacle_goalassociation ga, environment e, goal hg, reference_type rt, obstacle tg, environment_goal eg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = eg.environment_id and ga.goal_id = eg.goal_id
    union
    select e.name,hg.name,'domainproperty',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from domainpropertyobstacle_goalassociation ga, environment e, domainproperty hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'requirement',rt.name,tg.name,'obstacle',ga.alternative_id,ga.rationale from requirementobstacle_goalassociation ga, environment e, requirement hg, reference_type rt, obstacle tg where ga.goal_id = hg.id and hg.version = (select max(i.version) from requirement i where i.id = hg.id) and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'goal',ga.alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'threat',ga.alternative_id,ga.rationale from obstaclethreat_goalassociation ga, environment_obstacle eo, environment e, obstacle hg, threat tg, reference_type rt where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id 
    union
    select e.name,hg.name,'obstacle',rt.name,tg.name,'vulnerability',ga.alternative_id,ga.rationale from obstaclevulnerability_goalassociation ga, environment_obstacle eo, environment e, obstacle hg, vulnerability tg, reference_type rt where ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select e.name,hg.name,'countermeasure', rt.name,tg.name,'task',ga.alternative_id,ga.rationale from countermeasure hg, task tg, countermeasuretask_goalassociation ga, environment_countermeasure ec, environment_obstacle eo, reference_type rt, environment e where ga.goal_id = hg.id and ga.subgoal_id = tg.id and ga.ref_type_id = rt.id and ga.environment_id = ec.environment_id and ec.environment_id = eo.environment_id and eo.environment_id = e.id;

  declare depCursor cursor for
    select e.name,dr.name,de.name,'goal',g.name,rgr.rationale from rolegoalrole_dependency rgr, role dr, role de, environment e, goal g where rgr.environment_id = e.id and rgr.depender_id = dr.id and rgr.dependee_id = de.id and rgr.dependency_id = g.id
    union
    select e.name,dr.name,de.name,'task',t.name,rtr.rationale from roletaskrole_dependency rtr, role dr, role de, environment e, task t where rtr.environment_id = e.id and rtr.depender_id = dr.id and rtr.dependee_id = de.id and rtr.dependency_id = t.id
    union
    select e.name,dr.name,de.name,'asset',a.name,rar.rationale from roleassetrole_dependency rar, role dr, role de, environment e, asset a where rar.environment_id = e.id and rar.depender_id = dr.id and rar.dependee_id = de.id and rar.dependency_id = a.id;

  declare continue handler for not found set done = 1;
    
  if includeHeader = 0
  then
    set buf = '<associations>\n';
  end if;

  open maCursor;
  ma_loop: loop
    fetch maCursor into fromDim,fromName,toDim,toName,refType;
    if done = 1
    then
      leave ma_loop;
    end if;
    set buf = concat(buf,'<manual_association from_name=\"',fromName,'\" from_dim=\"',fromDim,'\" to_name=\"',toName,'\" to_dim=\"',toDim,'\"');
    if (fromDim = 'requirement' and toDim = 'usecase') or (fromDim = 'requirement' and toDim = 'task')
    then
      set buf = concat(buf,' ref_type=\"',refType,'\"');
    end if;
    set buf = concat(buf,' />\n');
    set maCount = maCount + 1;
  end loop ma_loop;
  close maCursor;
  set done = 0;

  open goalAssocCursor;
  goalAssoc_loop: loop
    fetch goalAssocCursor into envName, goalName, goalDim, refType, subGoalName, subGoalDim, alternativeId, altRationale;
    if done = 1
    then
      leave goalAssoc_loop;
    end if;
    set buf = concat(buf,'<goal_association environment=\"',envName,'\"  goal_name=\"',goalName,'\" goal_dim=\"',goalDim,'\" ref_type=\"',refType,'\" subgoal_name=\"',subGoalName,'\" subgoal_dim=\"',subGoalDim,'\" alternative_id=\"',alternativeId,'\" >\n  <rationale>',altRationale,'</rationale>\n</goal_association>\n');
    set gaCount = gaCount + 1;
  end loop goalAssoc_loop;
  close goalAssocCursor;
  set done = 0;

  open depCursor;
  dep_loop: loop
    fetch depCursor into envName,dependerName,dependeeName,depType,dependencyName,altRationale;
    if done = 1
    then
      leave dep_loop;
    end if;
    set buf = concat(buf,'<dependency depender=\"',dependerName,'\" dependee=\"',dependeeName,'\" dependency_type=\"',depType,'\" dependency=\"',dependencyName,'\" environment=\"',envName,'\" >\n  <rationale>',altRationale,'</rationale>\n</dependency>\n');

    set depCount = depCount + 1;
  end loop dep_loop;
  close depCursor;
  set done = 0;

  set buf = concat(buf,'</associations>');
  select buf,maCount,gaCount,rrCount,depCount;
end
//

create procedure projectToXml(in includeHeader int)
begin
  declare buf varchar(900000000) default '<?xml version="1.0"?>\n<!DOCTYPE cairis PUBLIC "-//CAIRIS//DTD PROJECT 1.0//EN" "http://cairis.org.org/dtd/cairis.dtd">\n\n<cairis>\n'; 
  declare projName varchar(4000) default 'None';
  declare background varchar(4000) default '';
  declare strategicGoals varchar(4000) default '';
  declare richPic varchar(1000) default '';
  declare scope varchar(4000) default '';
  declare ncName varchar(100);
  declare ncEntry varchar(4000);
  declare firstName varchar(100);
  declare surName varchar(100);
  declare affil varchar(100);
  declare projRole varchar(50);
  declare revNo int;
  declare revDate varchar(50);
  declare revRemarks varchar(1000);
  declare envId int;
  declare envName varchar(50);
  declare envShortCode varchar(10);
  declare envDesc varchar(4000);
  declare duplicatePolicy varchar(50);
  declare overridingEnvName varchar(50);
  declare subEnvName varchar(50);
  declare noneValue varchar(4000);
  declare lowValue varchar(4000);
  declare medValue varchar(4000);
  declare highValue varchar(4000);
  declare ncCount int default 0;
  declare contributorCount int default 0;
  declare revCount int default 0;
  declare compositeCount int default 0;
  declare done int default 0;
  declare ncCursor cursor for select name,description from project_dictionary order by name;
  declare contribCursor cursor for select * from project_contributor order by 2;
  declare revCursor cursor for select revision_no,revision_date,revision_remarks from project_revision order by 1;
  declare envCursor cursor for select id,name,short_code,description from environment;
  declare ceCursor cursor for select e.name from composite_environment ce, environment e where ce.composite_environment_id = envId and ce.environment_id = e.id;
  declare continue handler for not found set done = 1;

  select description into projName from project_setting where name = 'Project Name';
  select description into background from project_setting where name = 'Project Background';
  select description into strategicGoals from project_setting where name = 'Project Goals';
  select description into richPic from project_setting where name = 'Rich Picture';
  select description into scope from project_setting where name = 'Project Scope';

  if includeHeader = 0
  then
    set buf = '<cairis>\n';
  end if;

  set buf = concat(buf,'<project_settings name=\"',projName,'\" >\n  <background>',background,'</background>\n  <strategic_goals>',strategicGoals,'</strategic_goals>\n  <rich_picture image=\"',richPic,'\" />\n  <scope>',scope,'</scope>\n');

  select count(name) into ncCount from project_dictionary limit 1;
  if ncCount > 0
  then
    set buf = concat(buf,'  <naming_conventions>\n');
    open ncCursor;
    nc_loop: loop
      fetch ncCursor into ncName,ncEntry;
      if done = 1
      then
        leave nc_loop;
      end if;
      set buf = concat(buf,'    <entry name=\"',ncName,'\" >\n      <definition>',ncEntry,'</definition>\n    </entry>\n');
    end loop nc_loop;
    close ncCursor;
    set buf = concat(buf,'  </naming_conventions>\n');
  end if;
  set done = 0;

  select count(affiliation) into contributorCount from project_contributor limit 1;
  if contributorCount > 0
  then 
    set buf = concat(buf,'  <contributors>\n'); 
    open contribCursor;
    contrib_loop: loop
      fetch contribCursor into firstName,surName,affil,projRole;
      if done = 1
      then
        leave contrib_loop;
      end if;
      set buf = concat(buf,'    <contributor first_name=\"',firstName,'\" surname=\"',surName,'\" affiliation=\"',affil,'\" role=\"',projRole,'\" />\n');
    end loop contrib_loop;
    close contribCursor;
    set buf = concat(buf,'  </contributors>\n');
  end if; 
  set done = 0;

  select count(revision_no) into revCount from project_revision limit 1;
  if revCount > 0
  then
    set buf = concat(buf,'  <revisions>\n');
    open revCursor;
    rev_loop: loop
      fetch revCursor into revNo,revDate,revRemarks;
      if done = 1
      then
        leave rev_loop;
      end if;
      set buf = concat(buf,'    <revision number=\"',revNo,'\" date=\"',revDate,'\" >\n      <remarks>',revRemarks,'</remarks>\n    </revision>\n');
    end loop rev_loop;
    close revCursor;
    set buf = concat(buf,'  </revisions>\n');
  end if;
  set done = 0;
  set buf = concat(buf,'</project_settings>\n');

  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName,envShortCode,envDesc;
    if done = 1
    then
      leave env_loop;
    end if;
    set buf = concat(buf,'<environment name=\"',envName,'\" short_code=\"',envShortCode,'\" >\n  <definition>',envDesc,'</definition>\n');

    select description into noneValue from asset_value where id = 0 and environment_id = envId;
    if isnull(noneValue)
    then
      set noneValue = 'None';
    end if;
    select description into lowValue from asset_value where id = 1 and environment_id = envId;
    if isnull(lowValue)
    then
      set lowValue = 'None';
    end if;
    select description into medValue from asset_value where id = 2 and environment_id = envId;
    if isnull(medValue)
    then
      set medValue = 'None';
    end if;
    select description into highValue from asset_value where id = 3 and environment_id = envId;
    if isnull(highValue)
    then
      set highValue = 'None';
    end if;
    set buf = concat(buf,'  <asset_values>\n    <none>',noneValue,'</none>\n    <low>',lowValue,'</low>\n    <medium>',medValue,'</medium>\n    <high>',highValue,'</high>\n  </asset_values>\n');

    select count(environment_id) into compositeCount from composite_environment where composite_environment_id = envId limit 1;
    if compositeCount > 0
    then
      select dp.name into duplicatePolicy from duplicate_property dp, composite_environment_property ccp where ccp.composite_environment_id = envId and ccp.duplicate_property_id = dp.id limit 1;
      set buf = concat(buf,'  <composite_properties duplication=\"',duplicatePolicy,'\" ');
      if duplicatePolicy = 'Override'
      then
        select e.name into overridingEnvName from composite_environment_override ceo, environment e where ceo.composite_environment_id = envId and ceo.overriding_environment_id = e.id limit 1;
        set buf = concat(buf,'overriding_environment=\"',overridingEnvName,'\" ');
      end if;
      set buf = concat(buf,'>\n');
      open ceCursor;
      ce_loop: loop
        fetch ceCursor into subEnvName;
        if done = 1
        then
          leave ce_loop;
        end if;
        set buf = concat(buf,'    <sub_environment name=\"',subEnvName,'\" />\n');
      end loop ce_loop;
      close ceCursor;
      set done = 0;
      set buf = concat(buf,'  </composite_properties>\n');
    end if;

    set buf = concat(buf,'</environment>\n');
  end loop env_loop; 
  close envCursor;
  set done = 0;

  set buf = concat(buf,'</cairis>');
  select buf;
end
//

create procedure assumptionTaskModel(in taskName text, in tcName text)
begin
  if taskName = '' and tcName = ''
  then
    call assumptionTaskModel_all(taskName,tcName);
  elseif taskName  = '' and tcName != ''
  then
    call assumptionTaskModel_c(taskName,tcName);
  elseif taskName != '' and tcName = ''
  then
    call assumptionTaskModel_t(taskName,tcName);
  else
    call assumptionTaskModel_tc(taskName,tcName);
  end if;
end
//

create procedure assumptionTaskModel_all(in taskName text, in tcName text)
begin
  select from_name, from_dim, to_name, to_dim, task_name, characteristic_name from assumption_task_model;
end
//

create procedure assumptionTaskModel_c(in taskName text, in tcName text)
begin
  select from_name, from_dim, to_name, to_dim, task_name, characteristic_name from assumption_task_model where characteristic_name = tcName;
end
//

create procedure assumptionTaskModel_t(in taskName text, in tcName text)
begin
  select from_name, from_dim, to_name, to_dim, task_name, characteristic_name from assumption_task_model where task_name = taskName
  union
  select atm.from_name, atm.from_dim, atm.to_name, atm.to_dim, atm.task_name, atm.characteristic_name from assumption_task_model atm where from_name = taskName and from_dim = 'task';
end
//

create procedure assumptionTaskModel_tc(in taskName text, in tcName text)
begin
  select from_name, from_dim, to_name, to_dim, task_name, characteristic_name from assumption_task_model where task_name = taskName and characteristic_name = tcName
  union
  select atm.from_name, atm.from_dim, atm.to_name, atm.to_dim, atm.task_name, atm.characteristic_name from assumption_task_model atm where from_name = taskName and from_dim = 'task';
end
//

create procedure getTaskGrounds(in constraintName text)
begin
  select name, dimension_name, object_name, description from task_documentconcept_reference where name = constraintName and reference_type = 'grounds'; 
end
//

create procedure getTaskWarrant(in constraintName text)
begin
  select name, dimension_name, object_name, description from task_documentconcept_reference where name = constraintName and reference_type = 'warrant'; 
end
//

create procedure getTaskRebuttal(in constraintName text)
begin
  select name, dimension_name, object_name, description from task_documentconcept_reference where name = constraintName and reference_type = 'rebuttal'; 
end
//

create procedure taskCharacteristicReferences(in tcId int)
begin
  select cr.name reference_name, crt.name characteristic_type_name, cr.excerpt description, 'document' dimension_name from task_characteristic_document pc, document_reference cr, characteristic_reference_type crt where pc.characteristic_id = tcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'persona' dimension_name from task_characteristic_persona pc, persona_reference cr, characteristic_reference_type crt where pc.characteristic_id = tcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'usecase' dimension_name from task_characteristic_usecase pc, usecase_reference cr, characteristic_reference_type crt where pc.characteristic_id = tcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id
  union
  select cr.name reference_name, crt.name characteristic_type_name, cr.description, 'requirement' dimension_name from task_characteristic_requirement pc, requirement_reference cr, characteristic_reference_type crt where pc.characteristic_id = tcId and pc.reference_id = cr.id and pc.characteristic_reference_type_id = crt.id;
end
//

create procedure taskCharacteristicBacking(in tcId int)
begin
  select ed.name,dr.name from external_document ed, document_reference dr, task_characteristic_document pcd where pcd.characteristic_id = tcId and pcd.reference_id = dr.id and dr.document_id = ed.id and pcd.characteristic_reference_type_id = 1
  union
  select concat('persona ',c.name),cr.name from persona c, persona_reference cr, task_characteristic_persona pcc where pcc.characteristic_id = tcId and pcc.reference_id = cr.id and cr.persona_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('usecase ',c.name),cr.name from usecase c, usecase_reference cr, task_characteristic_usecase pcc where pcc.characteristic_id = tcId and pcc.reference_id = cr.id and cr.usecase_id = c.id and pcc.characteristic_reference_type_id = 1
  union
  select concat('requirement ',concat(a.short_code,'-',c.label)),cr.name from requirement c, asset a, asset_requirement ar, requirement_reference cr, task_characteristic_requirement pcc where pcc.characteristic_id = tcId and pcc.reference_id = cr.id and cr.requirement_id = c.id and pcc.characteristic_reference_type_id = 1 and c.id = ar.requirement_id and ar.asset_id = a.id and c.version = (select max(i.version) from requirement i where i.id = c.id)
  union
  select concat('requirement ',concat(e.short_code,'-',c.label)),cr.name from requirement c, environment e, environment_requirement er, requirement_reference cr, task_characteristic_requirement pcc where pcc.characteristic_id = tcId and pcc.reference_id = cr.id and cr.requirement_id = c.id and pcc.characteristic_reference_type_id = 1 and c.id = er.requirement_id and er.environment_id = e.id and c.version = (select max(i.version) from requirement i where i.id = c.id);
end
//

create procedure addTaskCharacteristic(in tcId int, in tName text, in qualName text, in cDesc text)
begin
  declare taskId int;
  select id into taskId from task where name = tName;
  insert into task_characteristic(id,task_id,qualifier,description) values (tcId,taskId,qualName,cDesc);
end
//

create procedure updateTaskCharacteristic(in tcId int, in tName text, in qualName text, in cDesc text)
begin
  declare taskId int;
  select id into taskId from task where name = tName;
  update task_characteristic set task_id = taskId, qualifier = qualName, description = cDesc where id = tcId;
end
//

create procedure getTaskCharacteristics(in constraintId int)
begin
  if constraintId = -1
  then
    select pc.id,p.name,pc.qualifier,pc.description from task_characteristic pc, task p where pc.task_id = p.id order by 2;
  else
    select pc.id,p.name,pc.qualifier,pc.description from task_characteristic pc, task p where pc.id = constraintId and  pc.task_id = p.id order by 2;
  end if;
end
//

create procedure delete_task_characteristic(in tcId int)
begin
  call deleteTaskCharacteristicComponents(tcId);

  if tcId != -1
  then
    delete from task_characteristic_synopsis where characteristic_id = tcId;
    delete from task_characteristic where id = tcId;
  else
    delete from task_characteristic_synopsis;
    delete from task_characteristic;
  end if;
end
//

create procedure deleteTaskCharacteristicComponents(in tcId int)
begin
    if tcId != -1
    then
      delete from task_characteristic_document where characteristic_id = tcId;
      delete from task_characteristic_persona where characteristic_id = tcId;
      delete from task_characteristic_usecase where characteristic_id = tcId;
      delete from task_characteristic_requirement where characteristic_id = tcId;
    else
      delete from task_characteristic_document;
      delete from task_characteristic_persona;
      delete from task_characteristic_usecase;
      delete from task_characteristic_requirement;
    end if;
end
//

create procedure addTaskCharacteristicReference(in tcId int, in refName text, in crTypeName text, in refDesc text, in dimName text)
begin
  declare crTypeId int;
  declare refId int;

  select id into crTypeId from characteristic_reference_type where name = crTypeName;

  if dimName = 'document'
  then
    select id into refId from document_reference where name = refName;
    if (refDesc != '')
    then
      update document_reference set excerpt = refDesc where id = refId;
    end if;
    insert into task_characteristic_document(characteristic_id,reference_id,characteristic_reference_type_id) values (tcId,refId,crTypeId);
  elseif dimName = 'persona'
  then
    select id into refId from persona_reference where name = refName;
    if (refDesc != '')
    then
      update persona_reference set description = refDesc where id = refId;
    end if;
    insert into task_characteristic_persona(characteristic_id,reference_id,characteristic_reference_type_id) values (tcId,refId,crTypeId);
  elseif dimName = 'requirement'
  then
    select id into refId from requirement_reference where name = refName;
    if (refDesc != '')
    then
      update requirement_reference set description = refDesc where id = refId;
    end if;
    insert into task_characteristic_requirement(characteristic_id,reference_id,characteristic_reference_type_id) values (tcId,refId,crTypeId);
  else
    select id into refId from usecase_reference where name = refName;
    if (refDesc != '')
    then
      update usecase_reference set description = refDesc where id = refId;
    end if;
    insert into task_characteristic_usecase(characteristic_id,reference_id,characteristic_reference_type_id) values (tcId,refId,crTypeId);
  end if; 
end
//

create procedure taskSpecificCharacteristics(in tName text)
begin
  declare tId int;
 
  select id into tId from task where name = tName;

  select id,qualifier,description from task_characteristic where task_id = tId order by 2,3;
end
//

create function ppReqLabel(currentIdx text,shortCode text,orgPrefix text,goalId int,envId int)
returns varchar(2000)
deterministic 
begin
  declare done int default 0;
  declare isFirst int default 1;
  declare ucId int;
  declare roleCode varchar(100);
  declare actorLabel varchar(200) default '';
  declare reqLabel varchar(2000) default '';
  declare ucCursor cursor for select ga.subgoal_id from goalusecase_goalassociation ga where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = envId);
  declare actorCursor cursor for select r.short_code from usecase_role ur, role r where ur.usecase_id = ucId and ur.role_id = r.id;
  declare continue handler for not found set done = 1;

  open ucCursor;
  uc_loop: loop
    fetch ucCursor into ucId;
    if done = 1
    then
      leave uc_loop;
    end if;
    open actorCursor;
    actor_loop: loop
      fetch actorCursor into roleCode;
      if done = 1
      then
        leave actor_loop;
      end if;
      if isFirst = 1
      then
        set isFirst = 0;
      else
        set actorLabel = concat(actorLabel,'_');
      end if;
      set actorLabel = concat(actorLabel,roleCode);
    end loop actor_loop;
    close actorCursor;
    set done = 0;
  end loop uc_loop;
  close ucCursor;
  set done = 0;
  set reqLabel = concat(shortCode,'-',actorLabel,'-',orgPrefix,'-',currentIdx);
  return reqLabel;
end
//

create function ppUcRefs(goalId int,envId int)
returns varchar(2000)
deterministic 
begin
  declare done int default 0;
  declare ucRefs varchar(4000) default '';
  declare ucRef varchar(400) default '';
  declare ucCursor cursor for select concat(uc.short_code,': ',uc.name) from usecase uc, goalusecase_goalassociation ga where ga.goal_id = goalId and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = envId) and ga.subgoal_id = uc.id;
  declare continue handler for not found set done = 1;

  open ucCursor;
  uc_loop: loop
    fetch ucCursor into ucRef;
    if done = 1
    then
      leave uc_loop;
    else
      set ucRefs = concat(ucRefs,'* ');
    end if;
    set ucRefs = concat(ucRefs,ucRef,'  ');
  end loop uc_loop;
  close ucCursor;
  set done = 0;
  return ucRefs;
end
//

create procedure goalsPrettyPrint(in catName text)
begin
/*  declare buf varchar(90000000) default ''; */
  declare buf varchar(90000) default '|_ReqID |_.Requirement |_.Notes |_. Use Case Refs|\n'; 
  declare idx int default 0;
  declare catId int;
  declare envId int;
  declare catShortCode varchar(10);
  declare goalId int;
  declare goalDef varchar(1000);
  declare goalIssue varchar(1000);
  declare goalLabel varchar(100);
  declare orgPrefix varchar(100);
  declare done int default 0;

  declare goalCursor cursor for select id, label, goal_definition, goal_issue, goal_originator from temp_labeltree;
  declare continue handler for not found set done = 1;

  select id into catId from asset where short_code = catName;
  select id into envId from environment where name = 'All';

  call goalLabels('All');

  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId,goalLabel,goalDef,goalIssue,orgPrefix;
    if done = 1
    then
      leave goal_loop;
    end if;
    set buf = concat(buf,'|',ppReqLabel(goalLabel,catName,orgPrefix,goalId,envId),' | ',goalDef,' | ',goalIssue,' | ',ppUcRefs(goalId,envId),'|\n'); 
  end loop goal_loop;


  close goalCursor;
  set done = 0;

  select buf;

end
//

create procedure goalLabels(in envName text)
begin
  declare buf varchar(90000) default '|_ReqID |_.Requirement |_.Notes |_. Use Case Refs|\n'; 
  declare goalId int;
  declare sgId int;
  declare goalDefinition varchar(1000);
  declare goalIssue varchar(1000);
  declare goalOrig varchar(100);
  declare environmentId int;
  declare compositeCount int;
  declare done int default 0;
  declare lastParentLabel varchar(100) default '';
  declare lastLabel int default 0;
  declare sgLabel int default 0;
  declare tgCursor cursor for 
    select g.id,gd.definition,gi.issue,g.originator from goal g, goal_definition gd, goal_issue gi where g.id not in (select subgoal_id from goalgoal_goalassociation) and g.id = gd.goal_id and gd.environment_id = environmentId and gd.goal_id = gi.goal_id and gd.environment_id = gi.environment_id; 

  declare ctgCursor cursor for 
    select g.id,gd.definition,gi.issue,g.originator from goal g, goal_definition gd, goal_issue gi where g.id not in (select subgoal_id from goalgoal_goalassociation) and g.id = gd.goal_id and gd.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and gd.goal_id = gi.goal_id and gd.environment_id = gi.environment_id; 

  declare sgCursor cursor for 
    select subgoal_id from goalgoal_goalassociation where goal_id = goalId and environment_id = environmentId union select subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id = environmentId;

  declare csgCursor cursor for 
    select subgoal_id from goalgoal_goalassociation where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) union select subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);

  declare continue handler for not found set done = 1;
  
  drop table if exists temp_labeltree;
  create temporary table temp_labeltree (id int,label varchar(100),goal_definition varchar(1000), goal_issue varchar(1000), goal_originator varchar(100));
  select id into environmentId from environment where name = envName;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    set done = 0;
    open tgCursor;
    tg_loop: loop
      fetch tgCursor into goalId,goalDefinition,goalIssue,goalOrig;
      if done = 1
      then
        leave tg_loop;
      end if;
      set lastLabel = lastLabel + 1;
      insert into temp_labeltree(id,label,goal_definition,goal_issue,goal_originator) values(goalId,lastLabel,goalDefinition,goalIssue,goalOrig);
      set sgLabel = 0;
      open sgCursor;
      sg_loop: loop
        fetch sgCursor into sgId;
        if done = 1
        then
          leave sg_loop;
        end if;
        set sgLabel = sgLabel + 1;
        call subGoalLabels(sgId,environmentId,concat(lastLabel,'.',sgLabel));
        set done = 0;
      end loop sg_loop;
      close sgCursor;
      set done = 0;
    end loop tg_loop;
    close tgCursor;
  else
    set done = 0;
    open ctgCursor;
    ctg_loop: loop
      fetch ctgCursor into goalId,goalDefinition,goalIssue,goalOrig;
      if done = 1
      then
        leave ctg_loop;
      end if;
      set lastLabel = lastLabel + 1;
      insert into temp_labeltree(id,label,goal_definition,goal_issue,goal_originator) values(goalId,lastLabel,goalDefinition,goalIssue,goalOrig);
      set sgLabel = 0;
      open csgCursor;
      csg_loop: loop
        fetch csgCursor into sgId;
        if done = 1
        then
          leave csg_loop;
        end if;
        set sgLabel = sgLabel + 1;
        call subGoalLabels(sgId,environmentId,concat(lastLabel,'.',sgLabel));
        set done = 0;
      end loop csg_loop;
      close csgCursor;
      set done = 0;
    end loop ctg_loop;
    close ctgCursor;
  end if; 
end
//

create procedure subGoalLabels(in parentId int, in environmentId int, in lastParentLabel text)
begin
  declare sgId int;
  declare goalId int;
  declare goalDefinition varchar(1000);
  declare goalIssue varchar(1000);
  declare goalOrig varchar(100);
  declare compositeCount int;
  declare done int default 0;
  declare gpFlag int;
  declare newLabel varchar(100) default '';
  declare sLabel int default 0;
  declare tgCursor cursor for 
    select ga.subgoal_id,gd.definition,gi.issue,g.originator from goal g, goal_definition gd, goal_issue gi, goalgoal_goalassociation ga where ga.subgoal_id = parentId and ga.subgoal_id = g.id and ga.environment_id = environmentId and ga.subgoal_id = gd.goal_id and ga.environment_id = gd.environment_id and gd.goal_id = gi.goal_id and gd.environment_id = gi.environment_id; 

  declare ctgCursor cursor for 
    select ga.subgoal_id,gd.definition,gi.issue,g.originator from goal g, goal_definition gd, goal_issue gi, goalgoal_goalassociation ga where ga.subgoal_id = parentId and ga.subgoal_id = g.id and ga.environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) and ga.subgoal_id = gd.goal_id and ga.environment_id = gd.environment_id and gd.goal_id = gi.goal_id and gd.environment_id = gi.environment_id; 

  declare sgCursor cursor for 
    select subgoal_id from goalgoal_goalassociation where goal_id = goalId and environment_id = environmentId union select subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id = environmentId;

  declare csgCursor cursor for 
    select subgoal_id from goalgoal_goalassociation where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId) union select subgoal_id from goalrequirement_goalassociation where goal_id = goalId and environment_id in (select environment_id from composite_environment where composite_environment_id = environmentId);

  declare continue handler for not found set done = 1;
  select count(*) into compositeCount from composite_environment where composite_environment_id = environmentId;

  if compositeCount <= 0
  then
    set done = 0;
    open tgCursor;
    tg_loop: loop
      fetch tgCursor into goalId,goalDefinition,goalIssue,goalOrig;
      if done = 1
      then
        leave tg_loop;
      end if;
      select count(id) into gpFlag from temp_labeltree where id = goalId;
      if gpFlag <= 0
      then
        insert into temp_labeltree(id,label,goal_definition,goal_issue,goal_originator) values(goalId,lastParentLabel,goalDefinition,goalIssue,goalOrig);
        open sgCursor;
        sg_loop: loop
          fetch sgCursor into sgId;
          if done = 1
          then
            leave sg_loop;
          end if;
          set sLabel = sLabel + 1;
          set newLabel = concat(lastParentLabel,'.',sLabel);
          call subGoalLabels(sgId,environmentId,newLabel);
          set done = 0;
        end loop sg_loop;
        close sgCursor;
        set done = 0;
      end if;
    end loop tg_loop;
    close tgCursor;
  else
    set done = 0;
    open ctgCursor;
    ctg_loop: loop
      fetch ctgCursor into goalId,goalDefinition,goalIssue,goalOrig;
      if done = 1
      then
        leave ctg_loop;
      end if;
      select count(id) into gpFlag from temp_labeltree where id = goalId;
      if gpFlag <= 0
      then
        insert into temp_labeltree(id,label,goal_definition,goal_issue,goal_originator) values(goalId,lastParentLabel,goalDefinition,goalIssue,goalOrig);
        open csgCursor;
        csg_loop: loop
          fetch csgCursor into sgId;
          if done = 1
          then
            leave csg_loop;
          end if;
          set sLabel = sLabel + 1;
          set newLabel = concat(lastParentLabel,'.',sLabel);
          call subGoalLabels(sgId,environmentId,newLabel);
          set done = 0;
        end loop csg_loop;
        close csgCursor;
        set done = 0;
      end if;
    end loop ctg_loop;
    close ctgCursor;
  end if;
end
//

create procedure grepUseCases(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_step us where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and u.short_code like concat('%',inTxt,'%')
  union
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_step us where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and u.description like concat('%',inTxt,'%')
  union
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_step us where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and u.author like concat('%',inTxt,'%')
  union
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_step us where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and us.description like concat('%',inTxt,'%')
  union
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_conditions us where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and us.preconditions like concat('%',inTxt,'%')
  union
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_conditions us where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and us.preconditions like concat('%',inTxt,'%');
end
//

create procedure grepTasks(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Task',t.name from environment e, environment_task et, task t where et.environment_id = e.id and et.task_id = t.id and t.objective like concat('%',inTxt,'%')
  union
  select e.name,'Task',t.name from environment e, environment_task et, task t where et.environment_id = e.id and et.task_id = t.id and t.short_code like concat('%',inTxt,'%')
  union
  select e.name,'Task',t.name from environment e, environment_task et, task t, task_dependencies td where et.environment_id = e.id and et.task_id = t.id and et.task_id = td.task_id and et.environment_id = td.environment_id and td.dependencies like concat('%',inTxt,'%')
  union
  select e.name,'Task',t.name from environment e, environment_task et, task t, task_narrative tn where et.environment_id = e.id and et.task_id = t.id and et.task_id = tn.task_id and et.environment_id = tn.environment_id and tn.narrative like concat('%',inTxt,'%');
end
//

create procedure grepGoals(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Goal',g.name from environment e, environment_goal eg, goal g where eg.environment_id = e.id and eg.goal_id = g.id and g.name like concat('%',inTxt,'%')
  union
  select e.name,'Goal',g.name from environment e, environment_goal eg, goal g where eg.environment_id = e.id and eg.goal_id = g.id and g.originator like concat('%',inTxt,'%')
  union
  select e.name,'Goal',g.name from environment e, environment_goal eg, goal g, goal_definition gd where eg.environment_id = e.id and eg.goal_id = g.id and eg.goal_id = gd.goal_id and eg.environment_id = gd.environment_id and gd.definition like concat('%',inTxt,'%')
  union
  select e.name,'Goal',g.name from environment e, environment_goal eg, goal g, goal_fitcriterion gf where eg.environment_id = e.id and eg.goal_id = g.id and eg.goal_id = gf.goal_id and eg.environment_id = gf.environment_id and gf.fitcriterion like concat('%',inTxt,'%')
  union
  select e.name,'Goal',g.name from environment e, environment_goal eg, goal g, goal_issue gi where eg.environment_id = e.id and eg.goal_id = g.id and eg.goal_id = gi.goal_id and eg.environment_id = gi.environment_id and gi.issue like concat('%',inTxt,'%');
end
//

create procedure grepObstacles(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Obstacle',o.name from environment e, environment_obstacle eo, obstacle o, obstacle_definition od where eo.environment_id = e.id and eo.obstacle_id = o.id and eo.obstacle_id = od.obstacle_id and eo.environment_id = od.environment_id and od.definition like concat('%',inTxt,'%');
end
//

create procedure grepEnvironments(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Environment',e.name from environment e where e.description like concat('%',inTxt,'%');
end
//

create procedure grepDomainProperties(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Domain Property',dp.name from domainproperty dp where dp.description like concat('%',inTxt,'%');
end
//

create procedure grepRoles(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Role',r.name from role r where r.description like concat('%',inTxt,'%');
end
//

create procedure grepPersonas(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.activities like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.attitudes like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.aptitudes like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.motivations like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.skills like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.intrinsic like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p where ep.environment_id = e.id and ep.persona_id = p.id and p.contextual like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p, persona_narrative pn where ep.environment_id = e.id and ep.persona_id = p.id and ep.environment_id = pn.environment_id and ep.persona_id = pn.persona_id and pn.narrative like concat('%',inTxt,'%');
end
//

create procedure grepPersonaCharacteristics(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Persona Characteristic',pc.description from persona_characteristic pc where pc.description like concat('%',inTxt,'%');
end
//

create procedure grepTaskCharacteristics(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Task Characteristic',tc.description from task_characteristic tc where tc.description like concat('%',inTxt,'%');
end
//

create procedure grepReferences(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','External Document',ed.name from external_document ed where ed.name like concat('%',inTxt,'%')
  union
  select '','External Document',ed.name from external_document ed where ed.authors like concat('%',inTxt,'%')
  union
  select '','Document Reference',dr.name from document_reference dr where dr.name like concat('%',inTxt,'%')
  union
  select '','Document Reference',dr.name from document_reference dr where dr.contributor like concat('%',inTxt,'%')
  union
  select '','Document Reference',dr.name from document_reference dr where dr.excerpt like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from asset_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from asset_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from attacker_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from attacker_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from countermeasure_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from countermeasure_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from domainproperty_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from domainproperty_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from environment_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from environment_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from goal_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from goal_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from misusecase_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from misusecase_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from obstacle_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from obstacle_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from persona_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from persona_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from requirement_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from requirement_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from response_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from response_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from risk_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from role_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from task_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from task_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from usecase_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from usecase_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from threat_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from threat_reference cr where cr.description like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from vulnerability_reference cr where cr.name like concat('%',inTxt,'%')
  union
  select '','Concept Reference',cr.name from vulnerability_reference cr where cr.description like concat('%',inTxt,'%');
end
//

create procedure grepAssets(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Asset',a.name from environment e, environment_asset ea, asset a where ea.environment_id = e.id and ea.asset_id = a.id and a.name like concat('%',inTxt,'%')
  union
  select e.name,'Asset',a.name from environment e, environment_asset ea, asset a where ea.environment_id = e.id and ea.asset_id = a.id and a.description like concat('%',inTxt,'%')
  union
  select e.name,'Asset',a.name from environment e, environment_asset ea, asset a where ea.environment_id = e.id and ea.asset_id = a.id and a.significance like concat('%',inTxt,'%')
  union
  select e.name,'Asset',a.name from environment e, environment_asset ea, asset a where ea.environment_id = e.id and ea.asset_id = a.id and a.critical_rationale like concat('%',inTxt,'%');
end
//

create procedure grepVulnerabilities(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Vulnerability',v.name from environment e, environment_vulnerability ev, vulnerability v where ev.environment_id = e.id and ev.vulnerability_id = v.id and v.name like concat('%',inTxt,'%')
  union
  select e.name,'Vulnerability',v.name from environment e, environment_vulnerability ev, vulnerability v where ev.environment_id = e.id and ev.vulnerability_id = v.id and v.description like concat('%',inTxt,'%');
end
//

create procedure grepAttackers(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Attacker',a.name from environment e, environment_attacker ea, attacker a where ea.environment_id = e.id and ea.attacker_id = a.id and a.name like concat('%',inTxt,'%')
  union
  select e.name,'Attacker',a.name from environment e, environment_attacker ea, attacker a where ea.environment_id = e.id and ea.attacker_id = a.id and a.description like concat('%',inTxt,'%');
end
//

create procedure grepThreats(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Threat',t.name from environment e, environment_threat et, threat t where et.environment_id = e.id and et.threat_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Threat',t.name from environment e, environment_threat et, threat t where et.environment_id = e.id and et.threat_id = t.id and t.method like concat('%',inTxt,'%');
end
//

create procedure grepRisks(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Risk',r.name from environment e, environment_risk er, risk r where er.environment_id = e.id and er.id = r.id and r.name like concat('%',inTxt,'%')
  union
  select e.name,'Misuse Case',m.name from environment e, environment_misusecase em, misusecase m, misusecase_narrative mn where em.environment_id = e.id and em.misusecase_id = m.id and em.environment_id = mn.environment_id and em.misusecase_id = mn.misusecase_id and mn.narrative like concat('%',inTxt,'%');
end
//

create procedure grepResponses(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,gct.name,r.name from environment e, environment_response er, response r, goal_category_type gct where er.environment_id = e.id and er.response_id = r.id and r.goal_category_type_id = gct.id and r.name like concat('%',inTxt,'%')
  union
  select e.name,gct.name,r.name from environment e, environment_response er, response r, response_description rd, goal_category_type gct where er.environment_id = e.id and er.response_id = r.id and er.environment_id = rd.environment_id and er.response_id = rd.response_id and r.goal_category_type_id = gct.id and rd.description like concat('%',inTxt,'%');
end
//

create procedure grepProjectSettings(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Project Settings',ps.name from project_setting ps where ps.description like concat('%',inTxt,'%');
end
//

create procedure grepCountermeasures(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select e.name,'Countermeasure',c.name from environment e, environment_countermeasure ec, countermeasure c where ec.environment_id = e.id and ec.countermeasure_id = c.id and c.name like concat('%',inTxt,'%')
  union
  select e.name,'Countermeasure',c.name from environment e, environment_countermeasure ec, countermeasure c where ec.environment_id = e.id and ec.countermeasure_id = c.id and c.description like concat('%',inTxt,'%');
end
//

create procedure grepDirectories(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Template Threat',concat(d.label,': ',d.name) from threat_directory d where d.name like concat('%',inTxt,'%')
  union
  select '','Template Threat',concat(d.label,': ',d.name) from threat_directory d where d.description like concat('%',inTxt,'%')
  union
  select '','Template Vulnerability',concat(d.label,': ',d.name) from vulnerability_directory d where d.name like concat('%',inTxt,'%')
  union
  select '','Template Vulnerability',concat(d.label,': ',d.name) from vulnerability_directory d where d.description like concat('%',inTxt,'%');
end
//

create procedure grepRequirements(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Requirement',concat(a.short_code,'-',r.label) from requirement r,asset a, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.name like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(a.short_code,'-',r.label) from requirement r,asset a, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.description like concat('%',inTxt,'%')
  union 
  select '','Requirement',concat(a.short_code,'-',r.label) from requirement r,asset a, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.rationale like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(a.short_code,'-',r.label) from requirement r,asset a, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.originator like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(a.short_code,'-',r.label) from requirement r,asset a, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.fit_criterion like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(a.short_code,'-',r.label) from requirement r,asset a, asset_requirement ar where r.id = ar.requirement_id and ar.asset_id = a.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.supporting_material like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(e.short_code,'-',r.label) from requirement r,environment e, environment_requirement er where r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.name like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(e.short_code,'-',r.label) from requirement r,environment e, environment_requirement er where r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.description like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(e.short_code,'-',r.label) from requirement r,environment e, environment_requirement er where r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.rationale like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(e.short_code,'-',r.label) from requirement r,environment e, environment_requirement er where r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.originator like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(e.short_code,'-',r.label) from requirement r,environment e, environment_requirement er where r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.fit_criterion like concat('%',inTxt,'%')
  union
  select '','Requirement',concat(e.short_code,'-',r.label) from requirement r,environment e, environment_requirement er where r.id = er.requirement_id and er.environment_id = e.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and r.supporting_material like concat('%',inTxt,'%');
end
//

create procedure grepTags(in inTxt text)
begin
  insert into temp_searchresults (environment_name, dimension_name, object_name)
  select e.name,'Attacker',a.name from environment e, environment_attacker ea, attacker a, attacker_tag at, tag t where ea.environment_id = e.id and ea.attacker_id = a.id and at.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Asset',a.name from environment e, environment_asset ea, asset a, asset_tag at, tag t where ea.environment_id = e.id and ea.asset_id = a.id and at.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Countermeasure',c.name from environment e, environment_countermeasure ec, countermeasure c, countermeasure_tag ct, tag t where ec.environment_id = e.id and ec.countermeasure_id = c.id and ct.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select '','Domain Property',dp.name from domainproperty dp, domainproperty_tag dt, tag t where dt.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Goal',g.name from environment e, environment_goal eg, goal g, goal_tag gt, tag t where eg.environment_id = e.id and eg.goal_id = g.id and gt.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Obstacle',o.name from environment e, environment_obstacle eo, obstacle o, obstacle_definition od, obstacle_tag ot, tag t where eo.environment_id = e.id and eo.obstacle_id = o.id and eo.obstacle_id = od.obstacle_id and eo.environment_id = od.environment_id and ot.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Persona',p.name from environment e, environment_persona ep, persona p, persona_tag pt, tag t where ep.environment_id = e.id and ep.persona_id = p.id and pt.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,gct.name,r.name from environment e, environment_response er, response r, goal_category_type gct, response_tag rt, tag t where er.environment_id = e.id and er.response_id = r.id and r.goal_category_type_id = gct.id and rt.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Risk',r.name from environment e, environment_risk er, risk r, risk_tag rt, tag t where er.environment_id = e.id and er.id = r.id and rt.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Task',t.name from environment e, environment_task et, task t, task_tag tt, tag t2 where et.environment_id = e.id and et.task_id = t.id and tt.tag_id = t2.id and t2.name like concat('%',inTxt,'%')
  union
  select e.name,'Threat',t.name from environment e, environment_threat et, threat t, threat_tag tt, tag t2 where et.environment_id = e.id and et.threat_id = t.id and tt.tag_id = t2.id and t2.name like concat('%',inTxt,'%')
  union
  select e.name,'Use Case',u.name from environment e, usecase u, environment_usecase eu, usecase_step us, usecase_step_tag ust, usecase_tag ut, tag t where e.id = eu.environment_id and eu.usecase_id = u.id and eu.environment_id = us.environment_id and eu.usecase_id = us.usecase_id and ust.tag_id = t.id and ut.tag_id = t.id and t.name like concat('%',inTxt,'%')
  union
  select e.name,'Vulnerability',v.name from environment e, environment_vulnerability ev, vulnerability v, vulnerability_tag vt, tag t where ev.environment_id = e.id and ev.vulnerability_id = v.id and vt.tag_id = t.id and t.name like concat('%',inTxt,'%');
end
//

create procedure grepModel(in inTxt text, in psFlag int, in envFlag int, in roleFlag int, in pcFlag int, in tcFlag int, in refFlag int, in pFlag int, in taskFlag int, in ucFlag int, in dpFlag int, in goalFlag int, in obsFlag int, in reqFlag int, in assetFlag int, in vulFlag int, in attackerFlag int, in thrFlag int, in riskFlag int, in respFlag int, in cmFlag int, in dirFlag int, in codeFlag int, in memoFlag int, in idFlag int, in tagFlag int)
begin

  drop table if exists temp_searchresults;
  create temporary table temp_searchresults (environment_name varchar(100), dimension_name varchar(50), object_name varchar(200));

  if psFlag = 1
  then
    call grepProjectSettings(inTxt);
  end if;

  if envFlag = 1
  then
    call grepEnvironments(inTxt);
  end if;

  if roleFlag = 1
  then
    call grepRoles(inTxt);
  end if;

  if pcFlag = 1
  then
    call grepPersonaCharacteristics(inTxt);
  end if;

  if tcFlag = 1
  then
    call grepTaskCharacteristics(inTxt);
  end if;

  if refFlag = 1
  then
    call grepReferences(inTxt);
  end if;

  if pFlag = 1
  then
    call grepPersonas(inTxt);
  end if;

  if taskFlag = 1
  then
    call grepTasks(inTxt);
  end if;

  if ucFlag = 1
  then
    call grepUseCases(inTxt);
  end if;

  if dpFlag = 1
  then
    call grepDomainProperties(inTxt);
  end if;

  if goalFlag = 1
  then
    call grepGoals(inTxt);
  end if;

  if obsFlag = 1
  then
    call grepObstacles(inTxt);
  end if;

  if reqFlag = 1
  then
    call grepRequirements(inTxt);
  end if;

  if assetFlag = 1
  then
    call grepAssets(inTxt);
  end if;

  if vulFlag = 1
  then
    call grepVulnerabilities(inTxt);
  end if;

  if attackerFlag = 1
  then
    call grepAttackers(inTxt);
  end if;

  if thrFlag = 1
  then
    call grepThreats(inTxt);
  end if;

  if riskFlag = 1
  then
    call grepRisks(inTxt);
  end if;

  if respFlag = 1
  then
    call grepResponses(inTxt);
  end if;

  if cmFlag = 1
  then
    call grepCountermeasures(inTxt);
  end if;

  if dirFlag = 1
  then
    call grepDirectories(inTxt);
  end if;

  if codeFlag = 1
  then
    call grepCodes(inTxt);
  end if;

  if memoFlag = 1
  then
    call grepMemos(inTxt);
  end if;

  if idFlag = 1
  then
    call grepInternalDocuments(inTxt);
  end if;
  if tagFlag = 1
  then
    call grepTags(inTxt);
  end if;
  select environment_name, dimension_name,object_name from temp_searchresults;
end
//

create procedure getExternalDocumentReferences(in edName text)
begin
  declare edId int;
  select id into edId from external_document where name = edName;
  select dr.name,ed.name,dr.excerpt from document_reference dr, external_document ed where dr.document_id = ed.id and ed.id = edId;
end
//

create procedure dimensionNameByShortCode(in objtLabel text)
begin
  declare objtName varchar(50);
  declare dimName varchar(50);

  select name into objtName from asset where short_code = objtLabel;
  if objtName is null
  then
    select name into objtName from environment where short_code = objtLabel;
    set dimName = 'environment';
  else
    set dimName = 'asset';
  end if;
  select dimName,objtName;
end
//

create procedure misuseCaseRiskComponents(in mcName text)
begin
  select t.name,v.name from misusecase m, misusecase_risk mr, risk r, threat t, vulnerability v where m.name = mcName and m.id = mr.misusecase_id and mr.risk_id = r.id and r.threat_id = t.id and r.vulnerability_id = v.id;
end
//

create procedure delete_risk(in riskId int)
begin
  declare mcId int;
  declare responseId int;

  select misusecase_id into mcId from misusecase_risk where risk_id = riskId;
  select id into responseId from response where risk_id = riskId;

  call delete_misusecase(mcId);
  call delete_response(responseId);

  delete from risk_reference where risk_id = riskId;
  delete from risk_tag where risk_id = riskId;
  delete from risk where id = riskId;
end
//

create procedure assetStats()

begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Asset\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from asset;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(asset_id) into envCount from environment_asset where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure attackerStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Attacker\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from attacker;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(attacker_id) into envCount from environment_attacker where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure countermeasureStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Countermeasure\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from countermeasure;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(countermeasure_id) into envCount from environment_countermeasure where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure domainPropertyStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Domain Property\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from domainproperty;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    set vxtSql = concat(vxtSql,',0');
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure goalStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Goal\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from goal;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(goal_id) into envCount from environment_goal where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure obstacleStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Obstacle\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from obstacle;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(obstacle_id) into envCount from environment_obstacle where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure personaStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Persona\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from persona;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(persona_id) into envCount from environment_persona where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure requirementStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Requirement\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;
  select count(*) into allCount from requirement o where o.version = (select max(i.version) from requirement i where i.id = o.id);
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    set vxtSql = concat(vxtSql,',0');
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure responseStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Response\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from response;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(response_id) into envCount from environment_response where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure riskStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Risk\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from risk;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(id) into envCount from environment_risk where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure roleStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Role\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from role;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    set vxtSql = concat(vxtSql,',0');
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure taskStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Task\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from task;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(task_id) into envCount from environment_task where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure usecaseStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Use Case\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from usecase;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(usecase_id) into envCount from environment_usecase where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//


create procedure threatStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Threat\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from threat;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(threat_id) into envCount from environment_threat where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure vulnerabilityStats()
begin
  declare envId int;
  declare envName varchar(50);
  declare allCount int;
  declare envCount int;
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'Vulnerability\'';
  declare xtSql varchar(8000);
  declare done int default 0;
  declare envCursor cursor for select id,name from environment;
  declare continue handler for not found set done = 1;

  select count(*) into allCount from vulnerability;
  set vxtSql = concat(vxtSql,',',allCount);
  
  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envId,envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));
    select count(vulnerability_id) into envCount from environment_vulnerability where environment_id = envId;
    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure modelStats()
begin
  declare envName varchar(50);
  declare sumSql varchar(4000) default 'select ';
  declare xtSql varchar(4000) default 'create temporary table temp_modelstats (concept varchar(50), total int';
  declare ixtSql varchar(4000) default 'insert into temp_modelstats (concept, total';
  declare vxtSql varchar(4000) default 'values (\'All\'';
  declare allCount int;
  declare envCount int;
  declare done int default 0;
  declare envCursor cursor for select name from environment;
  declare continue handler for not found set done = 1;

  drop table if exists temp_modelstats;

  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set xtSql = concat(xtSql,', ',replace(envName,' ','_'),' int');
  end loop env_loop;
  close envCursor;

  set xtSql = concat(xtSql,')');

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;

  call assetStats();
  call attackerStats();
  call countermeasureStats();
  call domainPropertyStats();
  call goalStats();
  call obstacleStats();
  call personaStats();
  call requirementStats();
  call responseStats();
  call riskStats();
  call roleStats();
  call taskStats();
  call usecaseStats();
  call threatStats();
  call vulnerabilityStats();

  select sum(total) into allCount from temp_modelstats;
  set vxtSql = concat(vxtSql,',',allCount);

  set done = 0;
  open envCursor;
  env_loop: loop
    fetch envCursor into envName;
    if done = 1
    then
      leave env_loop;
    end if;
    set ixtSql = concat(ixtSql,', ',replace(envName,' ','_'));

    set sumSql = concat('select sum(',replace(envName,' ','_'),') into @envCount from temp_modelstats');
    set @sql = sumSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set envCount = @envCount;

    set vxtSql = concat(vxtSql,',',envCount);
  end loop env_loop;
  close envCursor;

  set ixtSql = concat(ixtSql,')');
  set vxtSql = concat(vxtSql,')');
  set xtSql = concat(ixtSql,' ',vxtSql);

  set @sql = xtSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;

  select * from temp_modelstats;
end
//

create procedure personaCharacteristicStats()
begin
  declare pId int;
  declare pName varchar(50);
  declare done int default 0;
  declare allCount int;
  declare actCount int;
  declare attCount int;
  declare aptCount int;
  declare motCount int;
  declare skiCount int;
  declare enCount int;
  declare pCursor cursor for select id,name from persona;
  declare continue handler for not found set done = 1;

  drop table if exists temp_pcstats;
  create temporary table temp_pcstats (persona_name varchar(50), total int, Activities int, Attitudes int, Aptitudes int, Motivations int, Skills int, Environment_Narrative int);

  set done = 0;
  open pCursor;
  p_loop: loop
    fetch pCursor into pId, pName;
    if done = 1
    then
      leave p_loop;
    end if;
    select count(id) into allCount from persona_characteristic where persona_id = pId;
    select count(id) into actCount from persona_characteristic where persona_id = pId and variable_id = 0;
    select count(id) into attCount from persona_characteristic where persona_id = pId and variable_id = 1;
    select count(id) into aptCount from persona_characteristic where persona_id = pId and variable_id = 2;
    select count(id) into motCount from persona_characteristic where persona_id = pId and variable_id = 3;
    select count(id) into skiCount from persona_characteristic where persona_id = pId and variable_id = 4;
    select count(id) into enCount from persona_characteristic where persona_id = pId and variable_id = 5;
    insert into temp_pcstats(persona_name,total,Activities,Attitudes,Aptitudes,Motivations,Skills,Environment_Narrative) values (pName,allCount,actCount,attCount,aptCount,motCount,skiCount,enCount);
  end loop p_loop;
  close pCursor;

  select count(id) into allCount from persona_characteristic;
  select count(id) into actCount from persona_characteristic where variable_id = 0;
  select count(id) into attCount from persona_characteristic where variable_id = 1;
  select count(id) into aptCount from persona_characteristic where variable_id = 2;
  select count(id) into motCount from persona_characteristic where variable_id = 3;
  select count(id) into skiCount from persona_characteristic where variable_id = 4;
  select count(id) into enCount from persona_characteristic where variable_id = 5;
  insert into temp_pcstats(persona_name,total,Activities,Attitudes,Aptitudes,Motivations,Skills,Environment_Narrative) values ('ALL',allCount,actCount,attCount,aptCount,motCount,skiCount,enCount);
  select persona_name,total,Activities,Attitudes,Aptitudes,Motivations,Skills,Environment_Narrative from temp_pcstats;
end
//

create procedure personaReferenceStats()
begin
  declare pId int;
  declare pName varchar(50);
  declare allCount int;
  declare docCount int;
  declare conCount int;
  declare asrCount int;
  declare atrCount int;
  declare cmrCount int;
  declare dprCount int;
  declare enrCount int;
  declare grCount int;
  declare mcrCount int;
  declare orCount int;
  declare prCount int;
  declare reqrCount int;
  declare resrCount int;
  declare rirCount int;
  declare rorCount int;
  declare trCount int;
  declare urCount int;
  declare thrCount int;
  declare vulCount int;
  declare totalDocCount int default 0;
  declare totalConCount int default 0;
  declare totalCount int default 0;
  declare done int default 0;
  declare pCursor cursor for select id,name from persona;
  declare continue handler for not found set done = 1;

  drop table if exists temp_prstats;
  create temporary table temp_prstats (persona_name varchar(50), total int, Document int, Concept int);
  set done = 0;
  open pCursor;
  p_loop: loop
    fetch pCursor into pId, pName;
    if done = 1
    then
      leave p_loop;
    end if;

    select count(distinct pcd.reference_id) into docCount from document_reference dr, persona_characteristic_document pcd, persona_characteristic pc where pc.persona_id = pId and pc.id = pcd.characteristic_id and pcd.reference_id = dr.id;
    select count(distinct pcc.reference_id) into asrCount from asset_reference cr, persona_characteristic_asset pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into atrCount from attacker_reference cr, persona_characteristic_attacker pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into cmrCount from countermeasure_reference cr, persona_characteristic_countermeasure pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into dprCount from domainproperty_reference cr, persona_characteristic_domainproperty pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into enrCount from environment_reference cr, persona_characteristic_environment pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into grCount from goal_reference cr, persona_characteristic_goal pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into mcrCount from misusecase_reference cr, persona_characteristic_misusecase pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into orCount from obstacle_reference cr, persona_characteristic_obstacle pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into prCount from persona_reference cr, persona_characteristic_persona pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into reqrCount from requirement_reference cr, persona_characteristic_requirement pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into resrCount from response_reference cr, persona_characteristic_response pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into rirCount from risk_reference cr, persona_characteristic_risk pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into rorCount from role_reference cr, persona_characteristic_role pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into trCount from task_reference cr, persona_characteristic_task pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into urCount from usecase_reference cr, persona_characteristic_usecase pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into thrCount from threat_reference cr, persona_characteristic_threat pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    select count(distinct pcc.reference_id) into vulCount from vulnerability_reference cr, persona_characteristic_vulnerability pcc, persona_characteristic pc where pc.persona_id = pId and pc.id = pcc.characteristic_id and pcc.reference_id = cr.id;
    set conCount = asrCount + atrCount + cmrCount + dprCount + enrCount + grCount + mcrCount + orCount + prCount + reqrCount + resrCount + rirCount + rorCount + trCount + urCount + thrCount + vulCount;
    set allCount = docCount + conCount;
    insert into temp_prstats(persona_name,total,Document,Concept) values (pName,allCount,docCount,conCount);
    set totalDocCount = totalDocCount + docCount;
    set totalConCount = totalConCount + conCount;
    set totalCount = totalCount + allCount;
  end loop p_loop;
  close pCursor;
  insert into temp_prstats(persona_name,total,Document,Concept) values ('ALL',totalCount,totalDocCount,totalConCount);
  select persona_name,total,Document,Concept from temp_prstats;
end
//

create procedure personaToXml(in personaName text)
begin
  declare envId int; 
  declare envName varchar(50);
  declare personaId int;
  declare pActivities varchar(4000);
  declare pAttitudes varchar(4000);
  declare pAptitudes varchar(4000);
  declare pMotivations varchar(4000);
  declare pSkills varchar(4000);
  declare pIntrinsic varchar(4000);
  declare pContextual varchar(4000);
  declare pImage varchar(2000);
  declare isAssumption int;
  declare pType varchar(50);
  declare roleName varchar(50);
  declare personaCount int default 0;
  declare edName varchar(2000);
  declare edVersion varchar(20);
  declare edDate varchar(100);
  declare edAuthors varchar(200);
  declare edDesc varchar(2000);
  declare edCount int default 0;
  declare drName varchar(200);
  declare drCount int default 0;
  declare drCont varchar(200);
  declare drExcerpt varchar(2000);
  declare pcId int;
  declare bvName varchar(50);
  declare modQual varchar(50);
  declare pcDesc varchar(2000);
  declare pcCount int default 0;
  declare gwrType varchar(20);
  declare gwrRef varchar(200);
  declare gwrConcept varchar(50);
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE usability PUBLIC "-//CAIRIS//DTD USABILITY 1.0//EN" "http://cairis.org/dtd/usability.dtd">\n\n<usability>\n';
  declare done int default 0;
  declare personaEnvCursor cursor for select ep.environment_id,e.name from environment_persona ep, environment e where ep.persona_id = personaId and ep.environment_id = e.id;
  declare personaRolesCursor cursor for select r.name from persona_role sr, role r where sr.persona_id = personaId and sr.environment_id = envId and sr.role_id = r.id;
  declare edCursor cursor for select distinct ed.name,ed.version,ed.publication_date,ed.authors,ed.description from external_document ed, document_reference dr, persona_characteristic_document pcd, persona_characteristic pc where pc.persona_id = personaId and pc.id = pcd.characteristic_id and pcd.reference_id = dr.id and dr.document_id = ed.id;
  declare drCursor cursor for select distinct dr.name,ed.name,dr.contributor,dr.excerpt from document_reference dr, external_document ed, persona_characteristic_document pcd, persona_characteristic pc where pc.persona_id = personaId and pc.id = pcd.characteristic_id and pcd.reference_id = dr.id and dr.document_id = ed.id;
  declare pcCursor cursor for select pc.id,p.name,bv.name,pc.qualifier,pc.description from persona_characteristic pc, persona p, behavioural_variable bv where pc.persona_id = personaId and pc.persona_id = p.id and pc.variable_id = bv.id order by 2,3;

  declare groundsCursor cursor for
    select 'document',dr.name,'' from persona_characteristic_document pcd, document_reference dr, persona_characteristic pc where pc.persona_id = personaId and pc.id = pcId and pc.id = pcd.characteristic_id and pcd.reference_id = dr.id and pcd.characteristic_reference_type_id = 0;

  declare warrantCursor cursor for
    select 'document',dr.name,'' from persona_characteristic_document pcd, document_reference dr, persona_characteristic pc where pc.persona_id = personaId and pc.id = pcId and pc.id = pcd.characteristic_id and pcd.reference_id = dr.id and pcd.characteristic_reference_type_id = 1;

  declare rebuttalCursor cursor for
    select 'document',dr.name,'' from persona_characteristic_document pcd, document_reference dr, persona_characteristic pc where pc.persona_id = personaId and pc.id = pcId and pc.id = pcd.characteristic_id and pcd.reference_id = dr.id and pcd.characteristic_reference_type_id = 2;

  declare continue handler for not found set done = 1;

  select id into personaId from persona where name = personaName;
  select activities into pActivities from persona where id = personaId;
  select attitudes into pAttitudes from persona where id = personaId;
  select aptitudes into pAptitudes from persona where id = personaId;
  select motivations into pMotivations from persona where id = personaId;
  select skills into pSkills from persona where id = personaId;
  select intrinsic into pIntrinsic from persona where id = personaId;
  select contextual into pContextual from persona where id = personaId;
  select image into pImage from persona where id = personaId;
  select assumption_id into isAssumption from persona where id = personaId;
  select pt.name into pType from persona p, persona_type pt where p.id = personaId and p.persona_type_id = pt.id;

  set buf = concat(buf,'<persona name=\"',personaName,'\" type=\"',pType,'\" assumption_persona=\"',b2a(isAssumption),'\" image=\"',pImage,'\" >\n  <activities>',pActivities,'</activities>\n  <attitudes>',pAttitudes,'</attitudes>\n  <aptitudes>',pAptitudes,'</aptitudes>\n  <motivations>',pMotivations,'</motivations>\n  <skills>',pSkills,'</skills>\n  <intrinsic>',pIntrinsic,'</intrinsic>\n  <contextual>',pContextual,'</contextual>\n');

  open personaEnvCursor;
  personaEnv_loop: loop
    fetch personaEnvCursor into envId, envName;
    if done = 1
    then
      leave personaEnv_loop;
    end if;
    set buf = concat(buf,'  <persona_environment name=\"',envName,'\" is_direct=\"',b2a(personaDirect(personaId,envId)),'\" >\n');

    open personaRolesCursor;
    personaRoles_loop: loop
      fetch personaRolesCursor into roleName;
      if done = 1
      then
        leave personaRoles_loop;
      end if;
      set buf = concat(buf,'    <persona_role name=\"',roleName,'\" />\n');
    end loop personaRoles_loop;
    close personaRolesCursor;
    set done = 0;

    set buf = concat(buf,'    <narrative>',personaNarrative(personaId,envId),'</narrative>\n');
    set buf = concat(buf,'  </persona_environment>\n');
  end loop personaEnv_loop;
  close personaEnvCursor;
  set done = 0;
  set buf = concat(buf,'</persona>\n');

  set done = 0;
  open edCursor;
  ed_loop : loop
    fetch edCursor into edName,edVersion,edDate,edAuthors,edDesc;
    if done = 1
    then
      leave ed_loop;
    end if;
    set buf = concat(buf,'<external_document name=\"',edName,'\" version=\"',edVersion,'\" date=\"',edDate,'\" authors=\"',edAuthors,'\" >\n  <description>',edDesc,'</description>\n</external_document>\n');
    set edCount = edCount + 1; 
  end loop ed_loop;
  close edCursor;

  set done = 0;
  open drCursor;
  dr_loop : loop
    fetch drCursor into drName,edName,drCont,drExcerpt;
    if done = 1
    then
      leave dr_loop;
    end if;
    set buf = concat(buf,'<document_reference name=\"',drName,'\" contributor=\"',drCont,'\" document=\"',edName,'\" >\n  <excerpt>',drExcerpt,'</excerpt>\n</document_reference>\n');
    set drCount = drCount + 1; 
  end loop dr_loop;
  close drCursor;

  set done = 0;
  open pcCursor;
  pc_loop : loop
    fetch pcCursor into pcId, personaName, bvName, modQual, pcDesc;
    if done = 1
    then 
      leave pc_loop;
    end if;
    set buf = concat(buf,'<persona_characteristic persona=\"',personaName,'\" behavioural_variable=\"',replace(bvName,' ','_'),'\" modal_qualifier=\"',modQual,'\" >\n  <definition>',pcDesc,'</definition>\n');
    set pcCount = pcCount + 1;
      open groundsCursor;
      grounds_loop: loop
        fetch groundsCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave grounds_loop;
        end if;
        set buf = concat(buf,'  <grounds type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
      end loop grounds_loop;
      close groundsCursor;
      set done = 0;

      open warrantCursor;
      warrant_loop: loop
        fetch warrantCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave warrant_loop;
        end if;
        set buf = concat(buf,'  <warrant type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
      end loop warrant_loop;
      close warrantCursor;
      set done = 0;

      open rebuttalCursor;
      rebuttal_loop: loop
        fetch rebuttalCursor into gwrType, gwrRef, gwrConcept;
        if done = 1
        then 
          leave rebuttal_loop;
        end if;
        set buf = concat(buf,'  <rebuttal type=\"',gwrType,'\" reference=\"',gwrRef,'\" />\n');
      end loop rebuttal_loop;
      close rebuttalCursor;
      set done = 0;

    set buf = concat(buf,'</persona_characteristic>\n');
  end loop pc_loop;
  close pcCursor;
  set done = 0;
  set buf = concat(buf,'</usability>');
  select buf,edCount,drCount,pcCount;
end
//

create function defaultEnvironment() 
returns varchar(50)
deterministic 
begin
  declare minId int;
  declare envName varchar(50) default '';

  select min(id) into minId from environment;
  if minId is not null
  then
    select name into envName from environment where id = minId;
  end if;
  return envName;
end
//

create procedure getCustomisableValues(in dimensionName text,in envName text)
begin
  declare envId int;
  if dimensionName = 'asset_value'
  then
    select id into envId from environment where name = envName;
    select id,name,description,'','' from asset_value where environment_id = envId order by 1;
  elseif dimensionName = 'threat_value'
  then
    select id,name,description,'','' from threat_value order by 1;
  elseif dimensionName = 'countermeasure_value'
  then
    select id,name,description,'','' from countermeasure_value order by 1;
  elseif dimensionName = 'capability'
  then
    select id,name,description,'','' from capability order by 1;
  elseif dimensionName = 'motivation'
  then
    select id,name,description,'','' from motivation order by 1;
  elseif dimensionName = 'asset_type'
  then
    select id,name,description,'','' from asset_type order by 1;
  elseif dimensionName = 'threat_type'
  then
    select id,name,description,'','' from threat_type order by 1;
  elseif dimensionName = 'vulnerability_type'
  then
    select id,name,description,'','' from vulnerability_type order by 1;
  elseif dimensionName = 'severity'
  then
    select id,name,description,'','' from severity order by 1;
  elseif dimensionName = 'risk_class'
  then
    select id,name,ifnull(description,''),'','' from risk_class order by 1;
  elseif dimensionName = 'access_right'
  then
    select id,name,description,value,rationale from access_right order by 1;
  elseif dimensionName = 'protocol'
  then
    select id,name,description,value,rationale from protocol order by 1;
  elseif dimensionName = 'privilege'
  then
    select id,name,description,value,rationale from privilege order by 1;
  elseif dimensionName = 'surface_type'
  then
    select id,name,description,value,rationale from surface_type order by 1;
  else
    select id,name,description,'','' from likelihood order by 1;
  end if;
end
//

create function tensionValue(envId int, spId int,prId int) 
returns varchar(5100)
deterministic 
begin
  declare tValue varchar(5100);
  select concat(tension_id,'#',tension_rationale) into tValue from value_tension where environment_id = envId and security_property_id = spId and privacy_property_id = prId;
  return tValue;
end
//

create procedure environmentTensions(in envName text)
begin
  declare envId int;

  select id into envId from environment where name = envName;
  
  drop table if exists temp_tensions;
  create temporary table temp_tensions (anTension varchar(5100), panTension varchar(5100), unlTension varchar(5100), unoTension varchar(5100));

  insert into temp_tensions(anTension,panTension,unlTension,unoTension) values( tensionValue(envId,0,4), tensionValue(envId,0,5), tensionValue(envId,0,6), tensionValue(envId,0,7));
  insert into temp_tensions(anTension,panTension,unlTension,unoTension) values( tensionValue(envId,1,4), tensionValue(envId,1,5), tensionValue(envId,1,6), tensionValue(envId,1,7));
  insert into temp_tensions(anTension,panTension,unlTension,unoTension) values( tensionValue(envId,2,4), tensionValue(envId,2,5), tensionValue(envId,2,6), tensionValue(envId,2,7));
  insert into temp_tensions(anTension,panTension,unlTension,unoTension) values( tensionValue(envId,3,4), tensionValue(envId,3,5), tensionValue(envId,3,6), tensionValue(envId,3,7));
  select ifnull(anTension,'0#None'),ifnull(panTension,'0#None'),ifnull(unlTension,'0#None'),ifnull(unoTension,'0#None') from temp_tensions;
end
//

create procedure addValueTension(in envId int, in securityPropertyId int, in privacyPropertyId int, in tensionId int, in tRationale text)
begin
  insert into value_tension(environment_id,security_property_id,privacy_property_id,tension_id,tension_rationale) values(envId,securityPropertyId,privacyPropertyId,tensionId,tRationale);
end
//

create function cnToGn(dimName text)
returns varchar(50)
deterministic
begin
  declare grlName varchar(50);

  if dimName = 'goal'
  then
    set grlName = 'Goal';
  elseif dimName = 'task'
  then
    set grlName = 'Task';
  else
    set grlName = 'Softgoal';
  end if;
  return grlName;
end
//

create procedure pcToGrl(in pNames text,in tNames text, in envName text)
begin
  declare pId int;
  declare tId int default -1;
  declare envId int default -1;
  declare buf varchar(90000000) default '<?xml version="1.0" encoding="ISO-8859-1"?>\n<grl-catalog catalog-name="URNspec" description="" author="Shamal Faily">\n  <element-def>\n';
  declare refId int;
  declare charId int;
  declare endId int;
  declare srcId int;
  declare destId int;
  declare refSyn varchar(100);
  declare dimName varchar(50);
  declare actorType varchar(50);
  declare ldName varchar(300);
  declare conName varchar(100);
  declare actorId int;
  declare actorName varchar(100);
  declare actorDefSql varchar(4000);
  declare tIdSql varchar(4000);
  declare pIdSql varchar(4000);
  declare done int default 0;
  declare refCursor cursor for
    select distinct pcs.characteristic_id,pcs.synopsis,td.name,pc.persona_id,'persona' from persona_characteristic_synopsis pcs, persona_characteristic pc, trace_dimension td where pcs.characteristic_id = pc.id and pcs.dimension_id = td.id and pc.persona_id in (select id from temp_pId)
    union
    select distinct ici.characteristic_id,ici.synopsis,td.name,pcn.persona_id,'persona' from implied_characteristic_intention ici, implied_characteristic ic, persona_code_network pcn, trace_dimension td where ici.characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and ici.dimension_id = td.id and pcn.persona_id in (select id from temp_pId)
    union
    select distinct pcs.characteristic_id,pcs.synopsis,td.name,pcs.actor_id,'persona' from task_characteristic_synopsis pcs, task_characteristic pc, trace_dimension td where pcs.characteristic_id = pc.id and pc.task_id in (select id from temp_tId) and pcs.dimension_id = td.id and pcs.actor_type_id = 1 and pcs.actor_id in (select id from temp_pId)
    union
    select distinct pcs.characteristic_id,pcs.synopsis,td.name,pcs.actor_id,td2.name from task_characteristic_synopsis pcs, task_characteristic pc, trace_dimension td, trace_dimension td2 where pcs.characteristic_id = pc.id and pc.task_id in (select id from temp_tId) and pcs.dimension_id = td.id and pcs.actor_type_id = 3 and pcs.actor_type_id = td2.id
    union
    select distinct drs.id,drs.synopsis,td.name,drs.actor_id,td2.name from document_reference_synopsis drs, persona_characteristic_document pcd, persona_characteristic pc, trace_dimension td, trace_dimension td2 where drs.reference_id = pcd.reference_id and pcd.characteristic_id = pc.id and drs.dimension_id = td.id and pc.persona_id in (select id from temp_pId) and drs.actor_type_id = td2.id
    union
    select distinct icei.id,icei.synopsis,td.name,icei.actor_id,td2.name from implied_characteristic_element_intention icei, implied_characteristic ic, persona_code_network pcn, trace_dimension td, trace_dimension td2 where icei.implied_characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and pcn.persona_id in (select id from temp_pId) and icei.dimension_id = td.id and icei.actor_type_id = td2.id
    union
    select distinct drs.id,drs.synopsis,td.name,drs.actor_id,td2.name from requirement_reference_synopsis drs, task_characteristic_requirement pcd, task_characteristic pc, trace_dimension td, trace_dimension td2 where drs.reference_id = pcd.reference_id and pcd.characteristic_id = pc.id and drs.dimension_id = td.id and pc.task_id in (select id from temp_tId) and drs.actor_type_id = td2.id
    union
    select distinct u.id,u.name,'goal',tp.persona_id,'persona' from usecase u, usecase_task ut, task_persona tp where u.id = ut.usecase_id and ut.task_id in (select id from temp_tId) and ut.task_id = tp.task_id and tp.environment_id = envId and tp.persona_id in (select id from temp_pId)
    union
    select distinct uss.id,uss.synopsis,'task',uss.actor_id,td.name from usecase_step_synopsis uss, trace_dimension td, usecase_task ut, task_persona tp where uss.environment_id = envId and uss.usecase_id = ut.usecase_id and ut.task_id in (select id from temp_tId) and ut.task_id = tp.task_id and tp.persona_id in (select id from temp_pId) and uss.actor_type_id = td.id and uss.actor_type_id in (3,21)
    union
    select distinct uss.id,synopsis,'task',tp.persona_id,'persona' from usecase_step_synopsis uss, usecase_task ut, task_persona tp, persona_role pr, usecase_role ur where uss.environment_id = envId and uss.usecase_id = ut.usecase_id and ut.task_id in (select id from temp_tId) and ut.task_id = tp.task_id  and tp.persona_id in (select id from temp_pId) and tp.persona_id = pr.persona_id and pr.role_id = ur.role_id and ut.usecase_id = ur.usecase_id and ur.role_id = uss.actor_id and uss.actor_type_id = 10 order by 1,2;

  declare conCursor cursor for
    select distinct drc.reference_id,drc.characteristic_id,drc.end_id,lc.name from document_reference_contribution drc, document_reference_synopsis drs, link_contribution lc, document_reference dr, persona_characteristic_document pcd, persona_characteristic pc where drc.reference_id = drs.id and drs.reference_id = dr.id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId) and drc.contribution_id = lc.id
    union
    select distinct iic.implied_characteristic_element_intention_id reference_id,iic.implied_characteristic_id characteristic_id, iic.end_id, lc.name from ice_ic_contribution iic, implied_characteristic_element_intention icei, link_contribution lc, implied_characteristic ic, persona_code_network pcn where iic.implied_characteristic_element_intention_id = icei.id and icei.implied_characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and pcn.persona_id in (select id from temp_pId) and iic.contribution_id = lc.id
    union
    select distinct drc.reference_id,drc.characteristic_id,drc.end_id,lc.name from requirement_reference_contribution drc, requirement_reference_synopsis drs, link_contribution lc, requirement_reference dr, persona_characteristic_requirement pcd, persona_characteristic pc where drc.reference_id = drs.id and drs.reference_id = dr.id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId) and drc.contribution_id = lc.id
    union
    select distinct drc.reference_id,drc.characteristic_id,drc.end_id,lc.name from requirement_reference_contribution drc, requirement_reference_synopsis drs, link_contribution lc where drc.reference_id = drs.id and drs.actor_id in (select id from temp_pId) and drc.contribution_id = lc.id
    union
    select distinct drc.reference_id,drc.characteristic_id,drc.end_id,lc.name from document_reference_contribution drc, document_reference_synopsis drs, link_contribution lc, document_reference dr, task_characteristic_document pcd, task_characteristic pc where drc.reference_id = drs.id and drs.reference_id = dr.id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.task_id in (select id from temp_tId) and drc.contribution_id = lc.id
    union
    select distinct drc.reference_id,drc.characteristic_id,drc.end_id,lc.name from requirement_reference_contribution drc, requirement_reference_synopsis drs, link_contribution lc, requirement_reference dr, task_characteristic_requirement pcd, task_characteristic pc where drc.reference_id = drs.id and drs.reference_id = dr.id and dr.id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.task_id in (select id from temp_tId) and drc.contribution_id = lc.id
    union
    select distinct upc.usecase_id, upc.characteristic_id,upc.end_id,lc.name from usecase_pc_contribution upc, persona_characteristic pc, link_contribution lc where upc.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId) and upc.contribution_id = lc.id
    union
    select distinct utc.usecase_id, utc.characteristic_id,utc.end_id,lc.name from usecase_tc_contribution utc, task_characteristic tc, link_contribution lc where utc.characteristic_id = tc.id and tc.task_id in (select id from temp_tId) and utc.contribution_id = lc.id
    union
    select distinct udc.usecase_id, drs.id,udc.end_id,lc.name from usecase_dr_contribution udc, document_reference_synopsis drs, persona_characteristic_document pcd, persona_characteristic pc, link_contribution lc where udc.reference_id = drs.id and drs.reference_id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId) and udc.contribution_id = lc.id order by 1,2;

  declare decomCursor cursor for
    select distinct uss.id,uss.usecase_id from usecase_step_synopsis uss, usecase_role ur, persona_role pr, task_persona tp, usecase_task ut where uss.usecase_id = ur.usecase_id and ur.usecase_id = ut.usecase_id and uss.environment_id = tp.environment_id and tp.environment_id = pr.environment_id and tp.persona_id = pr.persona_id and pr.role_id = ur.role_id and uss.environment_id = envId and pr.persona_id in (select id from temp_pId) and tp.task_id in (select id from temp_tId) and tp.task_id = ut.task_id order by 2;

  declare actorDefCursor cursor for select distinct actor_id, actor_name from temp_actordef;

  declare aciCursor cursor for
    select distinct pc.persona_id, pcs.characteristic_id from persona_characteristic_synopsis pcs, persona_characteristic pc where pcs.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId)
    union
    select distinct pcn.persona_id,ici.characteristic_id from implied_characteristic_intention ici, implied_characteristic ic, persona_code_network pcn where ici.characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and pcn.persona_id in (select id from temp_pId)
    union
    select distinct tcs.actor_id, tcs.characteristic_id from task_characteristic_synopsis tcs, task_characteristic tc where tcs.characteristic_id = tc.id and tc.task_id in (select id from temp_tId)
    union
    select distinct drs.actor_id, drs.id from document_reference_synopsis drs, persona_characteristic_document pcd, persona_characteristic pc where drs.reference_id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId)
    union
    select distinct icei.actor_id, icei.id from implied_characteristic_element_intention icei, implied_characteristic ic, persona_code_network pcn where icei.implied_characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and pcn.persona_id in (select id from temp_pId)
    union
    select distinct drs.actor_id, drs.id from requirement_reference_synopsis drs, persona_characteristic_requirement pcd, persona_characteristic pc where drs.reference_id = pcd.reference_id and pcd.characteristic_id = pc.id and pc.persona_id in (select id from temp_pId)
    union
    select distinct drs.actor_id, drs.id from document_reference_synopsis drs, task_characteristic_document tcd, task_characteristic tc where drs.reference_id = tcd.reference_id and tcd.characteristic_id = tc.id and tc.task_id in (select id from temp_tId)
    union
    select distinct drs.actor_id, drs.id from requirement_reference_synopsis drs, task_characteristic_requirement tcd, task_characteristic tc where drs.reference_id = tcd.reference_id and tcd.characteristic_id = tc.id and tc.task_id in (select id from temp_tId)
    union
    select distinct uss.actor_id,uss.id from usecase_step_synopsis uss, usecase_role ur, persona_role pr, task_persona tp, usecase_task ut where uss.usecase_id = ur.usecase_id and ur.usecase_id = ut.usecase_id and uss.environment_id = tp.environment_id and tp.environment_id = pr.environment_id and tp.persona_id = pr.persona_id and pr.role_id = ur.role_id and uss.environment_id = envId and pr.persona_id in (select id from temp_pId) and tp.task_id in (select id from temp_tId) and uss.actor_type_id in (3,21) and tp.task_id = ut.task_id
    union
    select distinct pr.persona_id,uss.id from usecase_step_synopsis uss, usecase_role ur, persona_role pr, task_persona tp, usecase_task ut where uss.usecase_id = ur.usecase_id and ur.usecase_id = ut.usecase_id and uss.environment_id = tp.environment_id and tp.environment_id = pr.environment_id and tp.persona_id = pr.persona_id and pr.role_id = ur.role_id and uss.environment_id = envId and pr.persona_id in (select id from temp_pId) and tp.task_id in (select id from temp_tId) and uss.actor_type_id = 10 and tp.task_id = ut.task_id order by 1,2;

  declare continue handler for not found set done = 1;

  drop table if exists temp_actordef;
  create temporary table temp_actordef (actor_id int, actor_name varchar(100));

  drop table if exists temp_pId;
  create table temp_pId (id int);

  drop table if exists temp_tId;
  create table temp_tId (id int);
  
  select id into envId from environment where name = envName;

  set tIdSql = concat('insert into temp_tId select id from task t where t.name in (',tNames,')');
  set @sql = tIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;

  if pNames = "'ALL'"
  then
    insert into temp_pId
    select persona_id from task_persona where task_id in (select id from temp_tId) and environment_id = envId;
  else
    set pIdSql = concat('insert into temp_pId select id from persona p where p.name in (',pNames,')');
    set @sql = pIdSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
  end if;

  set done = 0;
  open refCursor;
  ref_loop: loop
    fetch refCursor into refId, refSyn, dimName,actorId,actorType;
    if done = 1
    then 
      leave ref_loop;
    end if;
    set actorDefSql = concat('select name into @actorName from ',actorType,' where id = ',actorId);
    set @sql = actorDefSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set actorName = @actorName;
    insert into temp_actordef (actor_id,actor_name) values (actorId,actorName);
    set buf = concat(buf,'    <intentional-element id=\"',refId,'\" name=\"',refSyn,'\" description=\"\" type=\"',cnToGn(dimName),'\" decompositiontype=\"And\"/>\n');
  end loop ref_loop;
  close refCursor;
  set buf = concat(buf,'  </element-def>\n  <link-def>\n');

  set done = 0;
  open conCursor;
  con_loop: loop
    fetch conCursor into refId,charId,endId,conName;
    if done = 1
    then
      leave con_loop;
    end if;

    if endId = 0
    then
      set srcId = refId;
      set destId = charId;
    else
      set srcId = charId;
      set destId = refId;
    end if;
    set ldName = concat('Contribution',srcId,'_',destId);
    set buf = concat(buf,'    <contribution name=\"',ldName,'\" description=\"\" srcid=\"',srcId,'\" destid=\"',destId,'\" contributiontype=\"',conName,'\" />\n');
   
  end loop con_loop;
  close conCursor;

  set done = 0;
  open decomCursor;
  decom_loop: loop
    fetch decomCursor into srcId, destId;
    if done = 1
    then
      leave decom_loop;
    end if;
    set ldName = concat('Decomposition',srcId,'_',destId);
    set buf = concat(buf,'    <decomposition name=\"',ldName,'\" description=\"\" srcid=\"',srcId,'\" destid=\"',destId,'\" />\n');
  end loop decom_loop;
  close decomCursor;

  set done = 0;
  set buf = concat(buf,'  </link-def>\n  <actor-def>\n');
  open actorDefCursor;
  actorDef_loop: loop
    fetch actorDefCursor into actorId,actorName;
    if done = 1
    then
      leave actorDef_loop;
    end if;
    set buf = concat(buf,'    <actor id=\"',actorId,'\" name=\"',actorName,'\" description=\"\" />\n');
  end loop actorDef_loop;
  close actorDefCursor;
  
  set done = 0;
  set buf = concat(buf,'  </actor-def>\n  <actor-IE-link-def>\n');
  open aciCursor;
  aci_loop: loop
    fetch aciCursor into actorId,refId;
    if done = 1
    then
      leave aci_loop;
    end if;
    set buf = concat(buf,'    <actorContIE actor=\"',actorId,'\" ie=\"',refId,'\"/>\n');  
  end loop aci_loop;
  close aciCursor;
  set buf = concat(buf,'  </actor-IE-link-def>\n');
  set buf = concat(buf,'</grl-catalog>');
  select buf;
end
//


create procedure getReferenceSynopsis(in refName text)
begin
  declare refId int;
  declare rrRefId int;
  declare refSynId int;
  declare actorId int;
  declare actorDefSql varchar(4000);
  declare refSyn varchar(1000);
  declare rsDim varchar(50);
  declare actorType varchar(50);
  declare actorName varchar(100);

  select id into refId from document_reference where name = refName;
  select id into rrRefId from requirement_reference where name = refName;
  if refId is not null
  then
    select drs.id,drs.synopsis,td.name,td2.name,drs.actor_id into refSynId,refSyn,rsDim,actorType,actorId from document_reference_synopsis drs, trace_dimension td, trace_dimension td2 where drs.reference_id = refId and drs.dimension_id = td.id and drs.actor_type_id = td2.id;
  elseif rrRefId is not null
  then
    set refId = rrRefId;
    select rrs.id,rrs.synopsis,td.name,td2.name,rrs.actor_id into refSynId,refSyn,rsDim,actorType,actorId from requirement_reference_synopsis rrs, trace_dimension td, trace_dimension td2 where rrs.reference_id = refId and rrs.dimension_id = td.id and rrs.actor_type_id = td2.id;
  else
    set refSynId = -1;
    set refSyn = '';
    set rsDim = '';
    set actorType = '';
    set actorId = -1;
    set actorName = '';
  end if;

  if refSynId != -1
  then
    set actorDefSql = concat('select name into @actorName from ',actorType,' where id = ',actorId);
    set @sql = actorDefSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set actorName = @actorName;
  end if;
  select ifnull(refSynId,-1),ifnull(refSyn,''),ifnull(rsDim,''),ifnull(actorType,''),ifnull(actorName,'');
end
//

create procedure getReferenceContribution(in srcName text, in destName text)
begin
  declare refId int;
  declare charId int;
  declare rsName varchar(1000);
  declare csName varchar(1000);
  declare meName varchar(100); 
  declare contName varchar(100); 
  select pc.id,pcs.synopsis into charId,csName from persona_characteristic pc, persona_characteristic_synopsis pcs where pc.description = destName and pc.id = pcs.characteristic_id;
  if charId is null
  then
    select tc.id,tcs.synopsis into charId,csName from task_characteristic tc, task_characteristic_synopsis tcs where tc.description = destName and tc.id = tcs.characteristic_id;
  end if;

  select drs.id,drs.synopsis into refId,rsName from document_reference_synopsis drs, document_reference dr where dr.name = srcName and dr.id = drs.reference_id;
  if refId is not null
  then
    select ce.name,lc.name into meName,contName from document_reference_contribution drc, contribution_end ce, link_contribution lc where drc.reference_id = refId and drc.characteristic_id = charId and drc.end_id = ce.id and drc.contribution_id = lc.id;
  else
    select rrs.id,rrs.synopsis into refId,rsName from requirement_reference_synopsis rrs, requirement_reference rr where rr.name = srcName and rr.id = rrs.reference_id;
    select ce.name,lc.name into meName,contName from requirement_reference_contribution rrc, contribution_end ce, link_contribution lc where rrc.reference_id = refId and rrc.characteristic_id = charId and rrc.end_id = ce.id and rrc.contribution_id = lc.id;
  end if;
  select rsName,csName,ifnull(meName,''),ifnull(contName,'');
end
//

create procedure delete_reference_synopsis(in rsIdi int)
begin
  declare drsCount int;

  select count(id) into drsCount from document_reference_synopsis where id = rsId;

  if refId > 0
  then
    call delete_document_reference_synopsis(rsId);
  else
    call delete_requirement_reference_synopsis(rsId);
  end if;
end
//

create procedure delete_document_reference_synopsis(in rsId int)
begin
  delete from document_reference_contribution where reference_id = rsId;
  delete from usecase_dr_contribution where reference_id = rsId;
  delete from document_reference_synopsis where id = rsId;
end
//

create procedure delete_requirement_reference_synopsis(in rsId int)
begin
  delete from requirement_reference_contribution where reference_id = rsId;
  delete from requirement_reference_synopsis where id = rsId;
end
//

create procedure addReferenceSynopsis(in rsId int, in refName text, in rsName text, in rsDim text, in atName text, in actorName text)
begin
  declare dimId int;
  declare atId int;
  declare actorId int;
  declare refId int;
  declare actorIdSql varchar(4000);

  select id into dimId from trace_dimension where name = rsDim;
  select id into atId from trace_dimension where name = atName;

  set actorIdSql = concat('select id into @actorId from ',atName,' where name = \"',actorName,'\"');
  set @sql = actorIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set actorId = @actorId;

  select id into refId from document_reference where name = refName;
  if refId is not null
  then
    insert into document_reference_synopsis(id,reference_id,synopsis,dimension_id,actor_id,actor_type_id) values (rsId,refId,rsName,dimId,actorId,atId);
  else
    select id into refId from requirement_reference where name = refName;
    insert into requirement_reference_synopsis(id,reference_id,synopsis,dimension_id,actor_id,actor_type_id) values (rsId,refId,rsName,dimId,actorId,atId);
  end if;
end
//

create procedure updateReferenceSynopsis(in rsId int, in refName text, in rsName text, in rsDim text, in atName text, in actorName text)
begin
  declare dimId int;
  declare atId int;
  declare actorId int;
  declare refId int;
  declare actorIdSql varchar(4000);

  select id into dimId from trace_dimension where name = rsDim;
  select id into atId from trace_dimension where name = atName;

  set actorIdSql = concat('select id into @actorId from ',atName,' where name = \"',actorName,'\"');
  set @sql = actorIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set actorId = @actorId;

  select id into refId from document_reference where name = refName;
  if refId is not null
  then
    update document_reference_synopsis set reference_id = refId, synopsis = rsName, dimension_id = dimId, actor_id = actorId, actor_type_id = atId where id = rsId;
  else
    select id into refId from requirement_reference where name = refName;
    update requirement_reference_synopsis set reference_id = refId, synopsis = rsName, dimension_id = dimId, actor_id = actorId, actor_type_id = atId where id = rsId;
  end if;
end
//

create procedure addCharacteristicSynopsis(in cName text, in csName text, in csDim text,in atName text, in actorName text)
begin
  declare cId int;
  declare dimId int;
  declare atId int;
  declare actorId int;
  declare actorIdSql varchar(4000);

  select id into dimId from trace_dimension where name = csDim;

  select id into cId from persona_characteristic where description = cName;
  if cId is not null
  then
    insert into persona_characteristic_synopsis(characteristic_id,synopsis,dimension_id) values (cId,csName,dimId);
  else
    select id into cId from task_characteristic where description = cName;
    select id into atId from trace_dimension where name = atName;
    set actorIdSql = concat('select id into @actorId from ',atName,' where name = \"',actorName,'\"');
    set @sql = actorIdSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set actorId = @actorId;
    insert into task_characteristic_synopsis(characteristic_id,synopsis,dimension_id,actor_id,actor_type_id) values (cId,csName,dimId,actorId,atId);
  end if;
end
//

create procedure updateCharacteristicSynopsis(in cName text, in csName text, in csDim text,in atName text, in actorName text)
begin
  declare cId int;
  declare dimId int;
  declare atId int;
  declare actorId int;
  declare actorIdSql varchar(4000);

  select id into dimId from trace_dimension where name = csDim;

  select id into cId from persona_characteristic where description = cName;
  if cId is not null
  then
    update persona_characteristic_synopsis set synopsis = csName,dimension_id = dimId where characteristic_id = cId;
  else
    select id into cId from task_characteristic where description = cName;
    select id into atId from trace_dimension where name = atName;
    set actorIdSql = concat('select id into @actorId from ',atName,' where name = \"',actorName,'\"');
    set @sql = actorIdSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set actorId = @actorId;
    update task_characteristic_synopsis set synopsis = csName,dimension_id = dimId,actor_id = actorId,actor_type_id = atId where characteristic_id = cId;
  end if;
end
//

/* might be multiple characteristics referenced by a single reference */
create procedure referenceCharacteristic(in refName text) 
begin
  declare charCount int;
  declare refId int;

  select id into refId from document_reference where name = refName;
  if refId is not null
  then
    select count(pc.description) into charCount from persona_characteristic pc, persona_characteristic_document pcd, persona_characteristic_synopsis pcs where pcd.reference_id = refId and pcd.characteristic_id = pc.id and pc.id = pcs.characteristic_id;
    if charCount > 0
    then
      select pc.description from persona_characteristic pc, persona_characteristic_document pcd, persona_characteristic_synopsis pcs where pcd.reference_id = refId and pcd.characteristic_id = pc.id and pc.id = pcs.characteristic_id;
    else
      select tc.description from task_characteristic tc, task_characteristic_document tcd, task_characteristic_synopsis tcs where tcd.reference_id = refId and tcd.characteristic_id = tc.id and tc.id = tcs.characteristic_id;
    end if;
  else
    select id into refId from requirement_reference where name = refName;
    select count(pc.description) into charCount from persona_characteristic pc, persona_characteristic_requirement pcr, persona_characteristic_synopsis pcs where pcr.reference_id = refId and pcr.characteristic_id = pc.id and pc.id = pcs.characteristic_id;
    if charCount > 0
    then
      select pc.description from persona_characteristic pc, persona_characteristic_requirement pcr, persona_characteristic_synopsis pcs where pcr.reference_id = refId and pcr.characteristic_id = pc.id and pc.id = pcs.characteristic_id;
    else
      select tc.description from task_characteristic tc, task_characteristic_requirement tcr, task_characteristic_synopsis tcs where tcr.reference_id = refId and tcr.characteristic_id = tc.id and tc.id = tcs.characteristic_id;
    end if;
  end if;
end
//


create procedure getCharacteristicSynopsis(in cName text)
begin
  declare pcId int;
  declare tcId int;
  declare actorId int;
  declare actorDefSql varchar(4000);
  declare charSyn varchar(1000);
  declare csDim varchar(50);
  declare actorType varchar(50);
  declare actorName varchar(100);

  select id into pcId from persona_characteristic where description = cName;
  select id into tcId from task_characteristic where description = cName;
  if pcId is not null
  then
    set actorType = 'persona';
    select p.name into actorName from persona_characteristic pc, persona p where pc.id = pcId and pc.persona_id = p.id;
    select ifnull(pcs.synopsis,''),ifnull(td.name,'')  into charSyn,csDim from persona_characteristic_synopsis pcs, trace_dimension td where pcs.characteristic_id = pcId and pcs.dimension_id = td.id;
  else
    select ifnull(tcs.synopsis,''),ifnull(td.name,''),ifnull(td2.name,''),ifnull(tcs.actor_id,'') into charSyn,csDim,actorType,actorId from task_characteristic_synopsis tcs, trace_dimension td, trace_dimension td2 where tcs.characteristic_id = tcId and tcs.dimension_id = td.id and tcs.actor_type_id = td2.id;
    if actorType != ''
    then
      set actorDefSql = concat('select name into @actorName from ',actorType,' where id = ',actorId);
      set @sql = actorDefSql;
      prepare stmt from @sql;
      execute stmt;
      deallocate prepare stmt;
      set actorName = @actorName;
    else
      set actorName = '';
    end if;
  end if;
  select ifnull(charSyn,''),ifnull(csDim,''),ifnull(actorType,''),ifnull(actorName,'');
end
//

create function hasCharacteristicSynopsis(charName text)
returns int
deterministic
begin
  declare charId int;
  declare synCount int;

  select id into charId from persona_characteristic where description = charName;
  if charId is not null
  then
    select count(characteristic_id) into synCount from persona_characteristic_synopsis where characteristic_id = charId;
    if synCount >= 1
    then
      return 1;
    else
      return 0;
    end if; 
  else
    select id into charId from task_characteristic where description = charName;
    select count(characteristic_id) into synCount from task_characteristic_synopsis where characteristic_id = charId;
    if synCount >= 1
    then
      return 1;
    else
      return 0;
    end if; 
  end if;
end
//

create function hasReferenceSynopsis(refName text)
returns int
deterministic
begin
  declare refId int;
  declare synCount int;

  select id into refId from document_reference where name = refName;
  if refId is not null
  then
    select count(id) into synCount from document_reference_synopsis where reference_id = refId;
    if synCount >= 1
    then
      return 1;
    else
      return 0;
    end if; 
  else
    select id into refId from requirement_reference where name = refName;
    select count(id) into synCount from requirement_reference_synopsis where reference_id = refId;
    if synCount >= 1
    then
      return 1;
    else
      return 0;
    end if; 
  end if;
end
//

create procedure addReferenceContribution(in rsName text, in csName text, in meName text, in contName text)
begin
  declare rsId int;
  declare charId int;
  declare meId int;
  declare lcId int;

  select id into meId from contribution_end where name = meName;
  select id into lcId from link_contribution where name = contName;

  select characteristic_id into charId from persona_characteristic_synopsis where synopsis = csName;
  if charId is null
  then
    select characteristic_id into charId from task_characteristic_synopsis where synopsis = csName;
  end if;

  select id into rsId from document_reference_synopsis where synopsis = rsName;
  if rsId is null
  then
    select id into rsId from requirement_reference_synopsis where synopsis = rsName;
    insert into requirement_reference_contribution(reference_id,characteristic_id,end_id,contribution_id) values (rsId,charId,meId,lcId);
  else
    insert into document_reference_contribution(reference_id,characteristic_id,end_id,contribution_id) values (rsId,charId,meId,lcId);
  end if;
end
//

create procedure updateReferenceContribution(in rsName text, in csName text, in meName text, in contName text)
begin
  declare rsId int;
  declare charId int;
  declare meId int;
  declare lcId int;

  select id into meId from contribution_end where name = meName;
  select id into lcId from link_contribution where name = contName;

  select characteristic_id into charId from persona_characteristic_synopsis where synopsis = csName;
  if charId is null
  then
    select characteristic_id into charId from task_characteristic_synopsis where synopsis = csName;
  end if;

  select id into rsId from document_reference_synopsis where synopsis = rsName;
  if rsId is null
  then
    select id into rsId from requirement_reference_synopsis where synopsis = rsName;
    update requirement_reference_contribution set end_id = meId, contribution_id = lcId where reference_id = rsId and characteristic_id = charId;
  else
    update document_reference_contribution set end_id = meId, contribution_id = lcId where reference_id = rsId and characteristic_id = charId;

  end if;



end
//

create procedure reference_synopsisNames(in cName text)
begin
  select synopsis from synopsis where synopsis_type in ('document','requirement') order by 1;
end
//

create procedure characteristic_synopsisNames(in cName text)
begin
  select synopsis from synopsis where synopsis_type in ('persona','task') order by 1;
end
//

create procedure getUseCaseContributions(in ucName text)
begin
  declare ucId int;

  select id into ucId from usecase where name = ucName;
  select pcs.synopsis,ce.name,lc.name,'characteristic' from usecase uc, persona_characteristic_synopsis pcs, contribution_end ce, link_contribution lc, usecase_pc_contribution upc where upc.usecase_id = ucId and upc.characteristic_id = pcs.characteristic_id and upc.end_id = ce.id and upc.contribution_id = lc.id
  union
  select drs.synopsis,ce.name,lc.name,'reference' from usecase uc, document_reference_synopsis drs, contribution_end ce, link_contribution lc, usecase_dr_contribution udc where udc.usecase_id = ucId and udc.usecase_id = uc.id and udc.reference_id = drs.id and udc.end_id = ce.id and udc.contribution_id = lc.id;
end
//

create procedure addUseCaseContribution(in ucName text, in csName text, in meName text, in contName text)
begin
  declare ucId int;
  declare charId int;
  declare meId int;
  declare lcId int;

  select id into ucId from usecase where name = ucName;
  select id into meId from contribution_end where name = meName;
  select id into lcId from link_contribution where name = contName;

  select characteristic_id into charId from persona_characteristic_synopsis where synopsis = csName;
  if charId is not null
  then
    insert into usecase_pc_contribution(usecase_id,characteristic_id,end_id,contribution_id) values (ucId,charId,meId,lcId);
  else
    select id into charId from document_reference_synopsis where synopsis = csName;
    insert into usecase_dr_contribution(usecase_id,reference_id,end_id,contribution_id) values (ucId,charId,meId,lcId);
  end if;
end
//

create procedure updateUseCaseContribution(in ucName text, in csName text, in meName text, in contName text)
begin
  declare ucId int;
  declare charId int;
  declare meId int;
  declare lcId int;

  select id into ucId from usecase where name = ucName;
  select id into meId from contribution_end where name = meName;
  select id into lcId from link_contribution where name = contName;

  select characteristic_id into charId from persona_characteristic_synopsis where synopsis = csName;
  if charId is not null
  then
    update usecase_pc_contribution set end_id = meId, contribution_id = lcId where usecase_id = ucId and characteristic_id = charId;
  else
    select reference_id into charId from document_reference_synopsis where synopsis = csName;
    update usecase_dr_contribution set end_id = meId, contribution_id = lcId where usecase_id = ucId and reference_id = charId;
  end if;
end
//

create procedure purgeRequirementsHistory()
begin
  declare maxVersion int;
  declare reqId int;
  declare done int default 0;
  declare riCursor cursor for select distinct id from requirement;  
  declare continue handler for not found set done = 1;

  alter table environment_requirement drop foreign key environment_requirement_ibfk_1;
  alter table requirement_usecase drop foreign key requirement_usecase_ibfk_1;
  alter table asset_requirement drop foreign key asset_requirement_ibfk_2;
  alter table requirement_reference drop foreign key requirement_reference_ibfk_1;  

  open riCursor;
  ri_loop: loop
    fetch riCursor into reqId;
    if done = 1
    then
      leave ri_loop;
    end if;
    select max(version) into maxVersion from requirement where id = reqId;
    delete from requirement where id = reqId and version < maxVersion;
  end loop ri_loop;
  close riCursor;

  update requirement set version = 1;

  alter table environment_requirement add constraint environment_requirement_ibfk_1 foreign key(requirement_id) references requirement(id);
  alter table requirement_usecase add constraint requirement_usecase_ibfk_1 foreign key(requirement_id) references requirement(id);
  alter table asset_requirement add constraint asset_requirement_ibfk_2 foreign key(requirement_id) references requirement(id);
  alter table requirement_reference add constraint requirement_reference_ibfk_1 foreign key(requirement_id) references requirement(id); 
end
//

create procedure getEnvironmentGoals(in goalName text, in envName text)
begin
  declare goalId int;
  declare envId int;

  select id into envId from environment where name = envName;
  if goalName != ''
  then
    select id into goalId from goal where name = goalName;
    select g.id,g.name,g.originator from goal g, environment_goal eg,goalgoal_goalassociation ga where eg.environment_id = envId and eg.goal_id = g.id and eg.environment_id = ga.environment_id and eg.goal_id = ga.subgoal_id and ga.goal_id = goalId order by 2;
  else
    select g.id,g.name,g.originator,gl.label from goal g, environment_goal eg, goal_label gl where eg.environment_id = envId and eg.goal_id = g.id and eg.goal_id = gl.goal_id and eg.environment_id = gl.environment_id and g.id not in 
    (
      select subgoal_id from goaldomainproperty_goalassociation where environment_id = envId
      union
      select subgoal_id from goalgoal_goalassociation where environment_id = envId 
      union
      select subgoal_id from goalobstacle_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrequirement_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrole_goalassociation where environment_id = envId
      union
      select subgoal_id from goaltask_goalassociation where environment_id = envId
      union
      select subgoal_id from goalusecase_goalassociation where environment_id = envId
    ) order by 4;
  end if;
end
//

create procedure updateEnvironmentGoal(in goalId int, in envName text, in goalName text, in goalOrig text, in goalDef text, in goalCat text, in goalPri text, in goalFc text, in goalIssue text)
begin
  declare envId int;
  declare priId int;
  declare catId int;

  select id into envId from environment where name = envName;
  select id into catId from goal_category_type where name = goalCat;
  select id into priId from priority_type where name = goalPri;

  update goal set name = goalName, originator = goalOrig where id = goalId;
  update goal_definition set definition = goalDef where goal_id = goalId and environment_id = envId;
  update goal_category set category_id = catId where goal_id = goalId and environment_id = envId;
  update goal_priority set priority_id = priId where goal_id = goalId and environment_id = envId;
  update goal_fitcriterion set fitcriterion = goalFc where goal_id = goalId and environment_id = envId;
  update goal_issue set issue = goalIssue where goal_id = goalId and environment_id = envId;
end
//

create procedure goalEnvironmentDependents(in asId int,in envId int)
begin
  declare assetId int;
  declare assetName varchar(50);
  declare goalId int;
  declare goalName varchar(100);
  declare obsId int;
  declare obsName varchar(100);
  declare attackerId int;
  declare attackerName varchar(50);
  declare requirementId int;
  declare requirementLabel int;
  declare taskId int;
  declare taskName varchar(50);
  declare usecaseId int;
  declare usecaseName varchar(50);
  declare roleId int;
  declare roleName varchar(50);
  declare personaId int;
  declare personaName varchar(50);
  declare threatId int;
  declare threatName varchar(200);
  declare vulId int;
  declare vulName varchar(200);

  declare assetGoals int;
  declare goalGoals int;
  declare attackerGoals int;
  declare requirementGoals int;
  declare roleGoals int;
  declare taskGoals int;
  declare usecaseGoals int;
  declare personaGoals int;
  declare threatGoals int;
  declare vulnerabilityGoals int;
  declare obsGoals int;
  declare done int default 0;
  declare goalCursor cursor for select distinct gg.subgoal_id,g.name from goalgoal_goalassociation gg, goal g where gg.goal_id = asId and gg.subgoal_id = g.id and gg.environment_id = envId;
  declare requirementCursor cursor for select distinct gr.subgoal_id,r.label from goalrequirement_goalassociation gr, requirement r where gr.goal_id = asId and gr.subgoal_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id) and gr.environment_id = envId;
  declare taskCursor cursor for select distinct gt.subgoal_id,t.name from goaltask_goalassociation gt, task t where gt.goal_id = asId and gt.subgoal_id = t.id and gt.environment_id = envId;
  declare usecaseCursor cursor for select distinct gt.subgoal_id,t.name from goalusecase_goalassociation gt, usecase t where gt.goal_id = asId and gt.subgoal_id = t.id and gt.environment_id = envId;
  declare assetCursor cursor for select distinct gc.asset_id,a.name from goal_concern gc, asset a where gc.goal_id = asId and gc.asset_id = a.id and gc.environment_id = envId;
  declare continue handler for not found set done = 1;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalId,goalName;
    if done = 1
    then
      leave goal_loop;
    end if;
    select count(distinct subgoal_id) into goalGoals from goalgoal_goalassociation  where goal_id = goalId;
    insert into temp_goal values(goalId,goalName);
    if (goalGoals = 1)
    then
      call goalEnvironmentDependents(goalId,envId);
    end if;
  end loop goal_loop;
  close goalCursor;

  set done = 0;
  open requirementCursor;
  requirement_loop: loop
    fetch requirementCursor into requirementId,requirementLabel;
    if done = 1
    then
      leave requirement_loop;
    end if;
    select count(distinct goal_id) into requirementGoals from goalrequirement_goalassociation where subgoal_id = requirementId;
    insert into temp_requirement values(requirementId,requirementLabel);
    if (requirementGoals = 1)
    then
      call requirementDependents(requirementId);
    end if;
  end loop requirement_loop;
  close requirementCursor;

  set done = 0;
  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId,taskName;
    if done = 1
    then
      leave task_loop;
    end if;
    insert into temp_task values(taskId,taskName);
    call taskDependents(taskId);
  end loop task_loop;
  close taskCursor;

  set done = 0;
  open usecaseCursor;
  usecase_loop: loop
    fetch usecaseCursor into usecaseId,usecaseName;
    if done = 1
    then
      leave usecase_loop;
    end if;
    insert into temp_usecase values(usecaseId,usecaseName);
    call usecaseDependents(taskId);
  end loop usecase_loop;
  close usecaseCursor;

  set done = 0;
  open assetCursor;
  asset_loop: loop
    fetch assetCursor into assetId,assetName;
    if done = 1
    then
      leave asset_loop;
    end if;
    insert into temp_asset values(assetId,assetName);
    call assetDependents(assetId);
  end loop asset_loop;
  close assetCursor;
end
//

create procedure subGoalNames(in goalName text, in envName text)
begin
  declare goalId int;
  declare envId int;

  select id into envId from environment where name = envName;

  if envName != '' and goalName = ''
  then
    select distinct g.name from goal g, goalgoal_goalassociation ga where ga.environment_id = envId and ga.goal_id = g.id and g.id in (
    select g.id from goal g, environment_goal eg where eg.environment_id = envId and eg.goal_id = g.id and g.id not in 
    (
      select subgoal_id from goaldomainproperty_goalassociation where environment_id = envId
      union
      select subgoal_id from goalgoal_goalassociation where environment_id = envId
      union
      select subgoal_id from goalobstacle_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrequirement_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrole_goalassociation where environment_id = envId
      union
      select subgoal_id from goaltask_goalassociation where environment_id = envId
      union
      select subgoal_id from goalusecase_goalassociation where environment_id = envId
    ));
  elseif envName = '' and goalName = ''
  then
    select name from goal order by 1;
  else
    select id into goalId from goal where name = goalName;
    select distinct g.name from goal g, goalgoal_goalassociation ga where ga.environment_id = envId and ga.goal_id = goalId and ga.subgoal_id = g.id;
  end if;

end
//

create procedure goalEnvironments(in goalName text)
begin
  declare goalId int;
  select id into goalId from goal where name = goalName;
  select e.name from environment e, environment_goal eg where eg.goal_id = goalId and eg.environment_id = e.id;
end
//

create procedure obstacleEnvironments(in obsName text)
begin
  declare obsId int;
  select id into obsId from obstacle where name = obsName;
  select e.name from environment e, environment_obstacle eo where eo.obstacle_id = obsId and eo.environment_id = e.id;
end
//

create procedure subObstacleNames(in obsName text, in envName text)
begin
  declare obsId int;
  declare envId int;

  select id into envId from environment where name = envName;

  if envName != '' and obsName = ''
  then
    select distinct o.name from obstacle o, obstacleobstacle_goalassociation ga where ga.environment_id = envId and ga.goal_id = o.id and o.id in (
    select o.id from obstacle o, environment_obstacle eo where eo.environment_id = envId and eo.obstacle_id = o.id and o.id not in 
    (
      select subgoal_id from obstaclegoal_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclemisusecase_goalassociation where environment_id = envId
      union
      select subgoal_id from obstacleobstacle_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclerequirement_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclerole_goalassociation where environment_id = envId
      union
      select subgoal_id from obstacletask_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclethreat_goalassociation where environment_id = envId
      union
      select subgoal_id from obstacleusecase_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclevulnerability_goalassociation where environment_id = envId
    ));
  elseif envName = '' and obsName = ''
  then
    select name from obstacle order by 1;
  else
    select id into obsId from obstacle where name = obsName;
    select distinct o.name from obstacle o, obstacleobstacle_goalassociation ga where ga.environment_id = envId and ga.goal_id = obsId and ga.subgoal_id = o.id;
  end if;
end
//

create procedure getEnvironmentObstacles(in obsName text, in envName text)
begin
  declare obsId int;
  declare envId int;

  select id into obsId from obstacle where name = obsName;
  select id into envId from environment where name = envName;
  
  select o.id,o.name,o.originator from obstacle o, environment_obstacle eo,obstacleobstacle_goalassociation ga where eo.environment_id = envId and eo.obstacle_id = o.id and eo.environment_id = ga.environment_id and eo.obstacle_id = ga.subgoal_id and ga.goal_id = obsId order by 2;
end
//

create procedure updateEnvironmentObstacle(in obsId int, in envName text, in obsName text, in obsOrig text, in obsDef text, in obsCat text)
begin
  declare envId int;
  declare catId int;

  select id into envId from environment where name = envName;
  select id into catId from obstacle_category_type where name = obsCat;

  update obstacle set name = obsName, originator = obsOrig where id = obsId;
  update obstacle_definition set definition = obsDef where obstacle_id = obsId and environment_id = envId;
  update obstacle_category set obstacle_category_type_id = catId where obstacle_id = obsId and environment_id = envId;
end
//

create procedure topLevelObstacles(in envName text)
begin
  declare envId int;
  
  select id into envId from environment where name = envName;

  select o.id,o.name from obstacle o, environment_obstacle eo where eo.environment_id = envId and eo.obstacle_id = o.id and o.id not in 
  (
  select subgoal_id from obstaclegoal_goalassociation where environment_id = envId
  union
  select subgoal_id from obstaclemisusecase_goalassociation where environment_id = envId
  union
  select subgoal_id from obstacleobstacle_goalassociation where environment_id = envId
  union
  select subgoal_id from obstaclerequirement_goalassociation where environment_id = envId
  union
  select subgoal_id from obstaclerole_goalassociation where environment_id = envId
  union
  select subgoal_id from obstacletask_goalassociation where environment_id = envId
  union
  select subgoal_id from obstaclethreat_goalassociation where environment_id = envId
  union
  select subgoal_id from obstacleusecase_goalassociation where environment_id = envId
  union
  select subgoal_id from obstaclevulnerability_goalassociation where environment_id = envId
  ) order by 2;
end
//

create procedure relabelGoals(in envName text)
begin
  declare envId int;
  declare modCode varchar(10);
  declare labelBuf varchar(255) default '';
  declare currentIdx int;
  declare topGoalId int;
  declare topGoalName varchar(100);
  declare done int default 0;
  declare topLevelCursor cursor for 
    select g.id,g.name from goal g, environment_goal eg where eg.environment_id = envId and eg.goal_id = g.id and g.id not in 
    (
      select subgoal_id from goaldomainproperty_goalassociation where environment_id = envId
      union
      select subgoal_id from goalgoal_goalassociation where environment_id = envId
      union
      select subgoal_id from goalobstacle_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrequirement_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrole_goalassociation where environment_id = envId
      union
      select subgoal_id from goaltask_goalassociation where environment_id = envId
      union
      select subgoal_id from goalusecase_goalassociation where environment_id = envId
    ) order by 2;


  declare continue handler for not found set done = 1;

  set currentIdx = 1;
  select id into envId from environment where name = envName;
  select short_code into modCode from environment where id = envId;
  open topLevelCursor;
  topLevel_loop: loop
    fetch topLevelCursor into topGoalId,topGoalName;
    if done = 1
    then
      leave topLevel_loop;
    end if;
    set labelBuf = concat(modCode,'-',currentIdx);
    call labelGoal(labelBuf,topGoalId,envId);
    call relabelSubGoals(topGoalId,labelBuf,envId);
    set currentIdx = currentIdx + 1;
  end loop topLevel_loop;
  close topLevelCursor;
end
//

create procedure relabelSubGoals(in parentGoalId int, in labelPrefix text, in envId int)
begin
  declare currentIdx int;
  declare goalId int;
  declare goalName varchar(100);
  declare labelBuf varchar(255) default '';
  declare done int default 0;
  declare goalLevelCursor cursor for
    select g.id,g.name from goal g, goalgoal_goalassociation ga where ga.goal_id = parentGoalId and ga.environment_id = envId and ga.subgoal_id = g.id order by 2;
  declare continue handler for not found set done = 1;

  set done = 0;
  set currentIdx = 1;
  set labelPrefix = concat(labelPrefix,'.');

  open goalLevelCursor;
  goalLevel_loop: loop
    fetch goalLevelCursor into goalId,goalName;
    if done = 1
    then
      leave goalLevel_loop;
    end if;
    set labelBuf = concat(labelPrefix,currentIdx);
    call labelGoal(labelBuf,goalId,envId);
    call relabelSubGoals(goalId,labelBuf,envId);
    set currentIdx = currentIdx + 1;
  end loop goalLevel_loop;
  close goalLevelCursor;
end
//

create procedure labelGoal(in labelTxt text, in goalId int, in envId int)
begin
  declare labelCount int;

  select count(goal_id) into labelCount from goal_label where goal_id = goalId and environment_id = envId;
  if labelCount > 0
  then
    update goal_label set label = labelTxt where goal_id = goalId and environment_id = envId;
  else
    insert into goal_label (goal_id,environment_id,label) values (goalId,envId,labelTxt);
  end if;
end
//

create function goal_label(goalId int,environmentId int) 
returns varchar(255)
deterministic 
begin
  declare lblTxt varchar(255) default '';

  select label into lblTxt from goal_label where goal_id = goalId and environment_id = environmentId;
  return lblTxt;
end
//

create function obstacle_label(obsId int,environmentId int) 
returns varchar(255)
deterministic 
begin
  declare lblTxt varchar(255) default '';

  select label into lblTxt from obstacle_label where obstacle_id = obsId and environment_id = environmentId;
  return lblTxt;
end
//

create procedure labelObstacle(in labelTxt text, in obsId int, in envId int)
begin
  declare labelCount int;

  select count(obstacle_id) into labelCount from obstacle_label where obstacle_id = obsId and environment_id = envId;
  if labelCount > 0
  then
    update obstacle_label set label = labelTxt where obstacle_id = obsId and environment_id = envId;
  else
    insert into obstacle_label (obstacle_id,environment_id,label) values (obsId,envId,labelTxt);
  end if;
end
//

create procedure relabelObstacles(in envName text)
begin
  declare envId int;
  declare labelBuf varchar(255) default '';
  declare currentIdx int;
  declare topObsId int;
  declare topObsName varchar(100);
  declare done int default 0;
  declare topLevelCursor cursor for 
    select o.id,o.name from obstacle o, environment_obstacle eo where eo.environment_id = envId and eo.obstacle_id = o.id and o.id not in 
    (
      select subgoal_id from obstaclegoal_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclemisusecase_goalassociation where environment_id = envId
      union
      select subgoal_id from obstacleobstacle_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclerequirement_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclerole_goalassociation where environment_id = envId
      union
      select subgoal_id from obstacletask_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclethreat_goalassociation where environment_id = envId
      union
      select subgoal_id from obstacleusecase_goalassociation where environment_id = envId
      union
      select subgoal_id from obstaclevulnerability_goalassociation where environment_id = envId
    ) order by 2;


  declare continue handler for not found set done = 1;

  set currentIdx = 1;
  select id into envId from environment where name = envName;

  open topLevelCursor;
  topLevel_loop: loop
    fetch topLevelCursor into topObsId,topObsName;
    if done = 1
    then
      leave topLevel_loop;
    end if;
    call labelObstacle(currentIdx,topObsId,envId);
    set labelBuf = currentIdx;
    call relabelSubObstacles(topObsId,labelBuf,envId);
    set currentIdx = currentIdx + 1;
  end loop topLevel_loop;
  close topLevelCursor;
end
//


create procedure relabelSubObstacles(in parentObsId int, in labelPrefix text, in envId int)
begin
  declare currentIdx int;
  declare obsId int;
  declare obsName varchar(100);
  declare labelBuf varchar(255) default '';
  declare done int default 0;
  declare obsLevelCursor cursor for
    select o.id,o.name from obstacle o, obstacleobstacle_goalassociation ga where ga.goal_id = parentObsId and ga.environment_id = envId and ga.subgoal_id = o.id order by 2;
  declare continue handler for not found set done = 1;

  set done = 0;
  set currentIdx = 1;
  set labelPrefix = concat(labelPrefix,'.');

  open obsLevelCursor;
  obsLevel_loop: loop
    fetch obsLevelCursor into obsId,obsName;
    if done = 1
    then
      leave obsLevel_loop;
    end if;
    set labelBuf = concat(labelPrefix,currentIdx);
    call labelObstacle(labelBuf,obsId,envId);
    call relabelSubObstacles(obsId,labelBuf,envId);
    set currentIdx = currentIdx + 1;
  end loop obsLevel_loop;
  close obsLevelCursor;
end
//

create procedure usecasesToRedmine()
begin
  declare buf varchar(90000000) default '';
  declare ucId int;
  declare envId int;
  declare scName varchar(200);
  declare reqName varchar(200);
  declare ucName varchar(200);
  declare shortCode varchar(100);
  declare ucAuth varchar(255);
  declare ucDesc varchar(2000);
  declare ucPre varchar(2000);
  declare ucPost varchar(2000);
  declare roleName varchar(50);
  declare stepNo int;
  declare stepDesc varchar(2000);
  declare excValue varchar(2000);
  declare reqCount int default 0;
  declare scCount int default 0;
  declare firstActor int default 0;
  declare done int default 0;
  declare ucCursor cursor for
    select distinct uc.id,uc.name,uc.author,uc.short_code, uc.description, ucc.preconditions, ucc.postconditions,ucc.environment_id from usecase uc, usecase_conditions ucc where uc.id = ucc.usecase_id order by 4;
  declare actorCursor cursor for
    select r.name from role r, usecase_role ur where ur.usecase_id = ucId and ur.role_id = r.id;
  declare flowCursor cursor for
    select step_no,description from usecase_step where usecase_id = ucId and environment_id = envId order by 1;
  declare excCursor cursor for
    select step_no,description from usecase_step_goal_exception where usecase_id = ucId and environment_id = envId
    union
    select step_no,description from usecase_step_requirement_exception where usecase_id = ucId and environment_id = envId order by 1;
  declare scCursor cursor for 
    select concat(t.short_code,': ',t.name) from task t, usecase_task ut where  ut.usecase_id = ucId and ut.task_id = t.id;
  declare reqCursor cursor for 
    select r.name from requirement r, requirement_usecase ru where  ru.usecase_id = ucId and ru.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);

  declare continue handler for not found set done = 1;

  drop table if exists temp_usecase;
  create temporary table temp_usecase (name varchar(200),short_code varchar(100), author varchar(255), text varchar(90000000));

  open ucCursor;
  ucCursor_loop: loop
    fetch ucCursor into ucId,ucName,ucAuth,shortCode,ucDesc,ucPre,ucPost,envId;
    if done = 1
    then
      leave ucCursor_loop;
    end if;
    set buf = concat('h3. ',shortCode,': ',ucName,'\n\nAuthor: ',ucAuth,'\n\nActors: ');

    open actorCursor;
    actorCursor_loop: loop
      fetch actorCursor into roleName;
      if done = 1
      then
        leave actorCursor_loop;
      end if;
      if firstActor = 0
      then
        set firstActor = 1;
      else
        set buf = concat(buf,', ');
      end if;
      set buf = concat(buf,roleName);
    end loop actorCursor_loop;
    close actorCursor;
    set done = 0;
    set buf = concat(buf,'\n\nh4. Description\n\n',ucDesc,'\n\nh4. Preconditions\n\n',ucPre,'\n\nh4. Flow\n\n');

   
    open flowCursor;
    flowCursor_loop: loop
      fetch flowCursor into stepNo, stepDesc;
      if done = 1
      then
        leave flowCursor_loop;
      end if;
      set buf = concat(buf,'# ',stepDesc,'\n');
    end loop flowCursor_loop;
    close flowCursor; 
    set done = 0;

    set done = 0;
    set buf = concat(buf,'\n\nh4. Postconditions\n\n',ucPost,'\n\nh4. Use Case Map\n\n!',shortCode,'.jpg!\n\nh4. Related Scenarios\n\n');

    select count(*) into scCount from usecase_task where usecase_id = ucId;
    if scCount = 0
    then
      set buf = concat(buf,'* None\n');
    else
      open scCursor;
      scCursor_loop: loop
        fetch scCursor into scName;
        if done = 1
        then
          leave scCursor_loop;
        end if;
        set buf = concat(buf,'* ',scName,'\n');
      end loop scCursor_loop;
      close scCursor;
    end if;
    set done = 0;

    set buf = concat(buf,'\n\nh4. Related Requirements\n\n');
    select count(*) into reqCount from requirement_usecase where usecase_id = ucId;
    if reqCount > 0
    then
      open reqCursor;
      reqCursor_loop: loop
        fetch reqCursor into reqName;
        if done = 1
        then
          set buf = concat(buf,'\n');
          leave reqCursor_loop;
        end if;
        set buf = concat(buf,'* ',reqName,'\n');
      end loop reqCursor_loop;
      close reqCursor;
    else
      set buf = concat(buf,'* None\n');
    end if;
    set done = 0;

    
    insert into temp_usecase(name,short_code,author,text) values(ucName,shortCode,ucAuth,buf);
    set firstActor = 0;
     
  end loop ucCursor_loop;
  close ucCursor;
  select name,short_code,author,text from temp_usecase;
end
//

create procedure redmineGoals(in envName text)
begin
  declare envId int;
  declare topGoalId int;
  declare goalLabel varchar(255);
  declare goalName varchar(100);
  declare goalOrig varchar(50);
  declare goalDef varchar(1000);
  declare goalCat varchar(50);
  declare goalPri varchar(50);
  declare goalFc varchar(1000);
  declare goalIssue varchar(1000);
  declare done int default 0;
  declare topLevelCursor cursor for 
    select g.id,gl.label,g.name,g.originator,gd.definition,gct.name,pt.name,gfc.fitcriterion,gi.issue from goal g, environment_goal eg, goal_definition gd, goal_category gc, goal_category_type gct, goal_priority gp, priority_type pt, goal_fitcriterion gfc, goal_issue gi, goal_label gl where eg.environment_id = envId and eg.goal_id = g.id and gd.goal_id = eg.goal_id and gd.environment_id = eg.environment_id and gc.goal_id = eg.goal_id and gc.environment_id = eg.environment_id and gct.id = gc.category_id and gp.goal_id = eg.goal_id and gp.environment_id = eg.environment_id and pt.id = gp.priority_id and gfc.goal_id = eg.goal_id and gfc.environment_id = eg.environment_id and gi.goal_id = eg.goal_id and gi.environment_id = eg.environment_id and gl.goal_id = eg.goal_id and gl.environment_id = eg.environment_id and g.id not in
    (
      select subgoal_id from goaldomainproperty_goalassociation where environment_id = envId
      union
      select subgoal_id from goalgoal_goalassociation where environment_id = envId
      union
      select subgoal_id from goalobstacle_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrequirement_goalassociation where environment_id = envId
      union
      select subgoal_id from goalrole_goalassociation where environment_id = envId
      union
      select subgoal_id from goaltask_goalassociation where environment_id = envId
      union
      select subgoal_id from goalusecase_goalassociation where environment_id = envId
    ) order by 2;

  declare continue handler for not found set done = 1;

  drop table if exists temp_redminegoal;
  create temporary table temp_redminegoal(goal_id int, environment_id int, goal_label varchar(255),goal_name varchar(100),originator varchar(50), goal_definition varchar(1000), goal_category varchar(50), goal_priority varchar(50), goal_fitcriterion varchar(1000), goal_issue varchar(1000));

  select id into envId from environment where name = envName;
  open topLevelCursor;
  topLevel_loop: loop
    fetch topLevelCursor into topGoalId,goalLabel,goalName,goalOrig,goalDef,goalCat,goalPri,goalFc,goalIssue;
    if done = 1
    then
      leave topLevel_loop;
    end if;
    call redmineSubGoals(topGoalId,envId);
    insert into temp_redminegoal(goal_id,environment_id,goal_label,goal_name,originator,goal_definition,goal_category,goal_priority,goal_fitcriterion,goal_issue) values (topGoalId,envId,goalLabel,goalName,goalOrig,goalDef,goalCat,goalPri,goalFc,goalIssue); 
  end loop topLevel_loop;
  close topLevelCursor;
  select goal_id,environment_id,goal_label,goal_name,originator,goal_definition,goal_category,goal_priority,goal_fitcriterion,goal_issue from temp_redminegoal;
end
//

create procedure redmineSubGoals(in parentGoalId int,in envId int)
begin
  declare goalId int;
  declare goalLabel varchar(255);
  declare goalName varchar(100);
  declare goalOrig varchar(50);
  declare goalDef varchar(1000);
  declare goalCat varchar(50);
  declare goalPri varchar(50);
  declare goalFc varchar(1000);
  declare goalIssue varchar(1000);
  declare done int default 0;
  declare goalLevelCursor cursor for
    select g.id,gl.label,g.name,g.originator,gd.definition,gct.name,pt.name,gfc.fitcriterion,gi.issue from goal g, goalgoal_goalassociation ga, goal_definition gd, goal_category gc, goal_category_type gct, goal_priority gp, priority_type pt, goal_fitcriterion gfc, goal_issue gi, goal_label gl where ga.environment_id = envId and ga.goal_id = parentGoalId and ga.subgoal_id = g.id and gd.goal_id = ga.subgoal_id and gd.environment_id = ga.environment_id and gc.goal_id = ga.subgoal_id and gc.environment_id = ga.environment_id and gct.id = gc.category_id and gp.goal_id = ga.subgoal_id and gp.environment_id = ga.environment_id and pt.id = gp.priority_id and gfc.goal_id = ga.subgoal_id and gfc.environment_id = ga.environment_id and gi.goal_id = ga.subgoal_id and gi.environment_id = ga.environment_id and gl.goal_id = ga.subgoal_id and gl.environment_id = ga.environment_id order by 2;

  declare continue handler for not found set done = 1;

  set done = 0;
  open goalLevelCursor;
  goalLevel_loop: loop
    fetch goalLevelCursor into goalId,goalLabel,goalName,goalOrig,goalDef,goalCat,goalPri,goalFc,goalIssue;
    if done = 1
    then
      leave goalLevel_loop;
    end if;
    call redmineSubGoals(goalId,envId); 
    insert into temp_redminegoal(goal_id,environment_id,goal_label,goal_name,originator,goal_definition,goal_category,goal_priority,goal_fitcriterion,goal_issue) values (goalId,envId,goalLabel,goalName,goalOrig,goalDef,goalCat,goalPri,goalFc,goalIssue); 
  end loop goalLevel_loop;
  close goalLevelCursor;
  set done = 0;
end
//

create procedure dependentLabels(in goalName text, in envName text)
begin
  declare goalId int;
  declare envId int;

  select id into envId from environment where name = envName;
  select id into goalId from goal where name = goalName;

  select distinct gl.label from goal_label gl, goalgoal_goalassociation ga where ga.environment_id = envId and ga.goal_id = goalId and ga.subgoal_id = gl.goal_id and ga.environment_id = gl.environment_id order by 1;
 

end
//

create procedure redmineScenarios()
begin
  declare ucName varchar(200);
  declare taskName varchar(200);
  declare taskAuthor varchar(255);
  declare taskObjt varchar(2000);
  declare taskShortCode varchar(100);
  declare envName varchar(50);
  declare taskId int;
  declare envId int;
  declare pName varchar(50);
  declare durName varchar(50);
  declare freqName varchar(50);
  declare demName varchar(50);
  declare gcName varchar(50);
  declare buf varchar(90000000) default '';
  declare taskNarrative varchar(5000);
  declare taskConsequences varchar(4000);
  declare taskBenefits varchar(4000);
  declare done int default 0;

  declare taskCursor cursor for select tn.task_id,t.name,t.short_code,t.author,t.objective,tn.environment_id,e.name,tn.narrative,tn.consequences,tn.benefits from task t, environment e, task_narrative tn where tn.task_id = t.id and tn.environment_id = e.id;
  declare ucCursor cursor for select distinct concat(u.short_code,': ',u.name) from usecase_task ut, usecase u where ut.task_id = taskId and ut.usecase_id = u.id;
  declare taskPersonaCursor cursor for select p.name,duv.name,fv.name,dev.name,gv.name from persona p, task_persona tp, security_property_value duv, security_property_value fv, security_property_value dev, security_property_value gv where tp.task_id = taskId and tp.environment_id = envId and tp.persona_id = p.id and tp.duration_id = duv.id and tp.frequency_id = fv.id and tp.demands_id = dev.id and tp.goalsupport_id = gv.id;
  declare continue handler for not found set done = 1;

  drop table if exists temp_task;
  create temporary table temp_task (name varchar(200),environment varchar(50), text varchar(90000000));

  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId,taskName,taskShortCode,taskAuthor,taskObjt,envId,envName,taskNarrative,taskConsequences,taskBenefits; 
    if done = 1
    then
      leave task_loop;
    end if;
    set buf = '';
    set buf = concat(buf,'h3. ',taskShortCode,': ',taskName,'\n\n','Author: ',taskAuthor,'\n\nh4. Overview\n\n',taskObjt,'\n\nh4. Description\n\n',taskNarrative,'\n\nh4. Issues\n\n',taskConsequences,'\n\nh4. Benefits\n\n',taskBenefits,'\n\nh4. Usability breakdown \n\n');

    open taskPersonaCursor;
    tp_loop: loop
      fetch taskPersonaCursor into pName,durName,freqName,demName,gcName;
      if done = 1
      then
        leave tp_loop;
      end if;
      if durName = 'Low'
      then
        set durName = 'Seconds';
      elseif durName = 'Medium'
      then
        set durName = 'Minutes';
      elseif durName = 'High'
      then
        set durName = 'Hours or longer';
      else
        set durName = 'None';
      end if;
  
      if freqName = 'Low'
      then
        set freqName = 'Monthly or less';
      elseif freqName = 'Medium'
      then
        set freqName = 'Daily - Weekly';
      elseif freqName = 'High'
      then
        set freqName = 'Hourly or more';
      else
        set freqName = 'None';
      end if;
      set buf = concat(buf,'| Persona | ',pName,' |\n| Duration | ',durName,' |\n| Frequency | ',freqName,' |\n| Demands | ',demName,' |\n| Goal Conflict | ',gcName,' |\n\n');
    end loop tp_loop;
    close taskPersonaCursor;
    set done = 0;

    set buf = concat(buf,'h4. Required Use Cases\n\n');

    open ucCursor;
    uc_loop: loop
     fetch ucCursor into ucName;
     if done = 1
     then
       leave uc_loop;
     end if;
     set buf = concat(buf,'* ',ucName,'\n');
    end loop uc_loop;
    close ucCursor;
    set done = 0; 
    insert into temp_task (name,environment,text) values(taskName,envName,buf);
  end loop task_loop;
  close taskCursor;
  select name,environment,text from temp_task;
end
//

create procedure tvTypesToXml(in includeHeader int)
begin
  declare typeName varchar(100);
  declare typeDesc varchar(5000);
  declare ttCount int default 0;
  declare vtCount int default 0;
  declare done int default 0;
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE tvtypes PUBLIC "-//CAIRIS//DTD TVTYPES 1.0//EN" "http://cairis.org/dtd/tvtypes.dtd">\n\n<tvtypes>\n';
  declare vtCursor cursor for select name,description from vulnerability_type order by 1;
  declare ttCursor cursor for select name,description from threat_type order by 1;
  declare continue handler for not found set done = 1;

  if includeHeader = 0
  then
    set buf = '<tvtypes>\n';
  end if;

  open vtCursor;
  vt_loop: loop
    fetch vtCursor into typeName, typeDesc;
    if done = 1
    then
      leave vt_loop;
    end if;
    set buf = concat(buf,'<vulnerability_type name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</vulnerability_type>\n');
    set vtCount = vtCount + 1;
  end loop vt_loop;
  close vtCursor;

  set done = 0;
  open ttCursor;
  tt_loop: loop
    fetch ttCursor into typeName, typeDesc;
    if done = 1
    then
      leave tt_loop;
    end if;
    set buf = concat(buf,'<threat_type name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</threat_type>\n');
    set ttCount = ttCount + 1;
  end loop tt_loop;
  close ttCursor;

  set buf = concat(buf,'</tvtypes>');
  select buf,ttCount,vtCount;
end
//

create procedure domainValuesToXml(in includeHeader int)
begin
  declare typeName varchar(100);
  declare typeDesc varchar(5000);
  declare tvCount int default 0;
  declare rvCount int default 0;
  declare cvCount int default 0;
  declare svCount int default 0;
  declare lvCount int default 0;
  declare done int default 0;
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE domainvalues PUBLIC "-//CAIRIS//DTD DOMAINVALUES 1.0//EN" "http://cairis.org/dtd/domainvalues.dtd">\n\n<domainvalues>\n';
  declare tvCursor cursor for select name,description from threat_value order by id;
  declare rvCursor cursor for select name,description from risk_class order by id;
  declare cvCursor cursor for select name,description from countermeasure_value order by id;
  declare svCursor cursor for select name,description from severity order by id;
  declare lvCursor cursor for select name,description from likelihood order by id;
  declare continue handler for not found set done = 1;

  if includeHeader = 0
  then
    set buf = '<domainvalues>\n';
  end if;

  open tvCursor;
  tv_loop: loop
    fetch tvCursor into typeName,typeDesc;
    if done = 1
    then
      leave tv_loop;
    end if;
    set buf = concat(buf,'<threat_value name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</threat_value>\n');
    set tvCount = tvCount + 1;
  end loop tv_loop;
  close tvCursor;

  set done = 0;
  open rvCursor;
  rv_loop: loop
    fetch rvCursor into typeName,typeDesc;
    if done = 1
    then
      leave rv_loop;
    end if;
    set buf = concat(buf,'<risk_value name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</risk_value>\n');
    set rvCount = rvCount + 1;
  end loop rv_loop;
  close rvCursor;

  set done = 0;
  open cvCursor;
  cv_loop: loop
    fetch cvCursor into typeName,typeDesc;
    if done = 1
    then
      leave cv_loop;
    end if;
    set buf = concat(buf,'<countermeasure_value name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</countermeasure_value>\n');
    set cvCount = cvCount + 1;
  end loop cv_loop;

  set done = 0;
  open svCursor;
  sv_loop: loop
    fetch svCursor into typeName,typeDesc;
    if done = 1
    then
      leave sv_loop;
    end if;
    set buf = concat(buf,'<severity_value name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</severity_value>\n');
    set svCount = svCount + 1;
  end loop sv_loop;

  set done = 0;
  open lvCursor;
  lv_loop: loop
    fetch lvCursor into typeName,typeDesc;
    if done = 1
    then
      leave lv_loop;
    end if;
    set buf = concat(buf,'<likelihood_value name=\"',typeName,'\" >\n  <description>',typeDesc,'</description>\n</likelihood_value>\n');
    set lvCount = lvCount + 1;
  end loop lv_loop;

  set buf = concat(buf,'</domainvalues>');
  select buf,tvCount,rvCount,cvCount,svCount,lvCount;
end
//

create procedure conceptMapModel(in envName text)
begin
  declare compositeCount int;
  declare envId int;

  select id into envId from environment where name = envName;
  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = envId limit 1;
  if compositeCount > 0
  then
    select fr.name from_name, tr.name to_name, rr.label,e.name,envName from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and tr.id = er.requirement_id and er.environment_id in (select environment_id from composite_environment where composite_environment_id = envId) and rr.from_id = fer.requirement_id and fer.environment_id = e.id
    union
    select fr.name from_name, tr.name to_name, rr.label,envName,e.name from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fr.id = er.requirement_id and er.environment_id in (select environment_id from composite_environment where composite_environment_id = envId) and rr.to_id = fer.requirement_id and fer.environment_id = e.id order by 1,2;
  else
    select fr.name from_name, tr.name to_name, rr.label,e.name,envName from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and tr.id = er.requirement_id and er.environment_id = envId and rr.from_id = fer.requirement_id and fer.environment_id = e.id
    union
    select fr.name from_name, tr.name to_name, rr.label,envName,e.name from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fr.id = er.requirement_id and er.environment_id = envId and rr.to_id = fer.requirement_id and fer.environment_id = e.id order by 1,2;
  end if;
end
//

create procedure parameterisedConceptMapModel(in envName text, in reqName text)
begin
  declare compositeCount int;
  declare envId int;
  declare reqId int;

  select id into envId from environment where name = envName;
  select r.id into reqId from requirement r where r.name = reqName and r.version = (select max(i.version) from requirement i where i.id = r.id);

  select count(environment_id) into compositeCount from composite_environment where composite_environment_id = envId limit 1;
  if compositeCount > 0
  then
    select fr.name from_name, tr.name to_name, rr.label,e.name,envName from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and tr.id = er.requirement_id and er.environment_id in (select environment_id from composite_environment where composite_environment_id = envId) and rr.from_id = fer.requirement_id and fer.environment_id = e.id and tr.id = reqId
    union
    select fr.name from_name, tr.name to_name, rr.label,envName,e.name from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fr.id = er.requirement_id and er.environment_id in (select environment_id from composite_environment where composite_environment_id = envId) and rr.to_id = fer.requirement_id and fer.environment_id = e.id and fr.id = reqId order by 1,2;
  else
    select fr.name from_name, tr.name to_name, rr.label,e.name,envName from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and tr.id = er.requirement_id and er.environment_id = envId and rr.from_id = fer.requirement_id and fer.environment_id = e.id and tr.id = reqId
    union
    select fr.name from_name, tr.name to_name, rr.label,envName,e.name from requirement fr, requirement tr, requirement_requirement rr,environment_requirement er, environment_requirement fer, environment e where rr.from_id = fr.id and fr.version = (select max(i.version) from requirement i where i.id = fr.id) and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and rr.to_id = tr.id and tr.version = (select max(i.version) from requirement i where i.id = tr.id) and fr.id = er.requirement_id and er.environment_id = envId and rr.to_id = fer.requirement_id and fer.environment_id = e.id and fr.id = reqId order by 1,2;
  end if;
end
//


create function preTraceabilityScore(reqId int)
returns int
deterministic 
begin
  declare reqCount int;

  select count(*) into reqCount from requirement_usecase where requirement_id = reqId;
  if reqCount > 0
  then
    return 1; 
  else
    select count(*) into reqCount from requirement_task where requirement_id = reqId;
    if reqCount > 0
    then
      return 1; 
    else
      select count(*) into reqCount from document_reference_requirement where requirement_id = reqId;
      if reqCount > 0
      then
        return 1; 
      else
        select count(from_id) into reqCount from requirement_requirement where to_id = reqId;
        if reqCount > 0
        then 
          return 1;
        else
          return 0;
        end if;
      end if;
    end if;
  end if;
end
// 



create function traceabilityScore(reqName text) 
returns int
deterministic 
begin
  declare tScore int default 1;
  declare preTsScore int default 0;
  declare postTsScore int default 0;
  declare reqCount int default 0;
  declare reqId int;

  select o.id into reqId from requirement o where o.name = reqName and o.version = (select max(i.version) from requirement i where i.id = o.id);

  set preTsScore = preTraceabilityScore(reqId);

  select count(*) into reqCount from requirement_document_reference where requirement_id = reqId;
  if reqCount > 0
  then
    set postTsScore = 1;
  else
    set postTsScore = 0;
  end if;

  set tScore = tScore + preTsScore + postTsScore;

  return tScore;
end
//

create procedure requirementScenarios(in reqName text)
begin
  declare reqId int;
  select r.id into reqId from requirement r where r.name = reqName and r.version = (select max(i.version) from requirement i where i.id = r.id);
  select distinct t.short_code from requirement_task rt, requirement r, task t where rt.requirement_id = reqId and rt.task_id = t.id and rt.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);
end
//


create procedure requirementUseCases(in reqName text)
begin
  declare reqId int;
  select r.id into reqId from requirement r where r.name = reqName and r.version = (select max(i.version) from requirement i where i.id = r.id);
  select distinct u.short_code from requirement_usecase ru, requirement r, usecase u  where ru.requirement_id = reqId and ru.usecase_id = u.id and ru.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);

end
//


create procedure requirementBacklog(in reqName text)
begin
  declare reqId int;
  select r.id into reqId from requirement r where r.name = reqName and r.version = (select max(i.version) from requirement i where i.id = r.id);
  select distinct dr.name from requirement_document_reference rdr, requirement r, document_reference dr  where rdr.requirement_id = reqId and rdr.document_reference_id = dr.id and rdr.requirement_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);
end
//

create procedure requirementDependencyCheck()
begin
  declare reqName varchar(255);
  declare startId int;
  declare isCircularDependency int default 0;
  declare buf varchar(900000000);
  declare done int default 0;
  declare reqCursor cursor for select name from requirement order by 1;
  declare continue handler for not found set done = 1;

  drop table if exists temp_depcheck;
  create temporary table temp_depcheck (requirement_name varchar(255), has_circular_dependency int, dependency_chain varchar(900000000));

  open reqCursor;
  req_loop: loop
    fetch reqCursor into reqName;
    if done = 1
    then
      leave req_loop;
    end if;
    select id into startId from requirement where name = reqName;
    set buf = reqName;
    call circularDependencyCheck(startId,startId,buf,isCircularDependency);
    select reqName,buf;
    insert into temp_depcheck(requirement_name,has_circular_dependency,dependency_chain) values (reqName,isCircularDependency,buf);
    set isCircularDependency = 0;
    set buf = 0;
  end loop req_loop;
  close reqCursor;
  select requirement_name,has_circular_dependency,dependency_chain from temp_depcheck;
end
//

create procedure circularDependencyCheck(in startId int, in reqId int, inout depText text,inout circularDependency int)
begin
  declare parentId int;
  declare reqName varchar(255);
  declare done int default 0;
  declare parentCursor cursor for select rr.from_id,r.name from requirement_requirement rr, requirement r where rr.to_id = reqId and rr.from_id = r.id and r.version = (select max(i.version) from requirement i where i.id = r.id);
  declare continue handler for not found set done = 1;

  set done = 0;
  open parentCursor;
  parent_loop: loop
    fetch parentCursor into parentId,reqName;

    if done = 1
    then
      leave parent_loop;
    end if;

    if circularDependency = 1 
    then
      set done = 1;
      leave parent_loop;
    end if;

    if parentId = startId
    then
      set circularDependency = 1;
      set depText = concat(depText,' <--- ',reqName);
      set done = 1;
      leave parent_loop;
    end if;

    set depText = concat(depText,' <--- ',reqName);
    select parentId,depText;
    call circularDependencyCheck(startId,parentId,depText,circularDependency);
  end loop parent_loop;
  close parentCursor;
end
//

create procedure addTag(in tagObjt text, in tagName text, in tagDim text)
begin
  declare dimIdSql varchar(4000);
  declare addTagSql varchar(4000);
  declare dimId int;
  declare tagId int;

  set dimIdSql = concat('select id into @dimId from ',tagDim,' where name = "',tagObjt,'"');
  set @sql = dimIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set dimId = @dimId;
  select id into tagId from tag where name = tagName limit 1;
  if tagId is null
  then
    call newId2(tagId);
    insert into tag (id,name) values (tagId,tagName);
  end if;

  set addTagSql = concat('insert into ',tagDim,'_tag (',tagDim,'_id, tag_id) values(',dimId,',',tagId,')');
  select addTagSql;
  set @sql = addTagSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure delete_tag(in tagId int)
begin
  delete from template_asset_tag where tag_id = tagId;
  delete from asset_tag where tag_id = tagId;
  delete from attacker_tag where tag_id = tagId;
  delete from vulnerability_tag where tag_id = tagId;
  delete from threat_tag where tag_id = tagId;
  delete from risk_tag where tag_id = tagId;
  delete from tag where id = tagId;
end
//

create procedure deleteTags(in tagObjt text, in tagDim text)
begin
  declare dimIdSql varchar(4000);
  declare deleteTagsSql varchar(4000);
  declare dimId int;

  set dimIdSql = concat('select id into @dimId from ',tagDim,' where name = "',tagObjt,'"');
  set @sql = dimIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set dimId = @dimId;

  set deleteTagsSql = concat('delete from ',tagDim,'_tag where ',tagDim,'_id = ',dimId);
  set @sql = deleteTagsSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure getTags(in dimObjt text, in dimName text)
begin
  declare dimIdSql varchar(4000);
  declare getTagsSql varchar(4000);
  declare dimId int;

  set dimIdSql = concat('select id into @dimId from ',dimName,' where name = "',dimObjt,'"');
  set @sql = dimIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set dimId = @dimId;

  set getTagsSql = concat('select t.name from ',dimName,'_tag dt, tag t where dt.',dimName,'_id = ',dimId,' and dt.tag_id = t.id');
  set @sql = getTagsSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure addComponent(in componentId int, in componentName text, in componentDesc text)
begin
  insert into component(id,name,description) values (componentId,componentName,componentDesc);
end
//

create procedure addComponentInterface(in componentId int, in interfaceName text, in reqId int, in arName text, in pName text)
begin
  declare interfaceId int;
  declare arId int;
  declare pId int;
  declare ciCount int;

  select id into arId from access_right where name = arName;
  select id into pId from privilege where name = pName;

  select id into interfaceId from interface where name = interfaceName limit 1;
  if interfaceId is null
  then
    call newId2(interfaceId);
    insert into interface(id,name) values (interfaceId,interfaceName);
  end if;

  select count(*) into ciCount from component_interface where component_id = componentId and interface_id = interfaceId;
  if ciCount = 0
  then
    insert into component_interface(component_id,interface_id,required_id,access_right_id,privilege_id) values (componentId,interfaceId,reqId,arId,pId);
  else
    update component_interface set required_id = reqId, access_right_id = arId, privilege_id = pId where component_id = componentId and interface_id = interfaceId;
  end if;
end
//

create procedure addConnector(in connId int, in cvName text, in cName text, in fromName text, in fromRole text, in fromIf text, in toName text, in toIf text, in toRole text, in taName text, in pName text, in arName text)
begin
  declare cvId int;
  declare fromId int;
  declare fromIfId int;
  declare toId int;
  declare toIfId int;
  declare taId int;
  declare pId int;
  declare arId int;
  
  select id into cvId from component_view where name = cvName;
  select id into fromId from component where name = fromName;
  select id into fromIfId from interface where name = fromIf;
  select id into toId from component where name = toName;
  select id into toIfId from interface where name = toIf;
  select id into taId from template_asset where name = taName;
  select id into pId from protocol where name = pName;
  select id into arId from access_right where name = arName;

  insert into connector(id,name,component_view_id,from_component_id,from_role,from_interface_id,to_component_id,to_interface_id,to_role,template_asset_id,protocol_id,access_right_id) values (connId,cName,cvId,fromId,fromRole,fromIfId,toId,toIfId,toRole,taId,pId,arId);
end
//

create procedure interfaceNames(in envName text)
begin
  select name from interface order by 1;
end
//

create procedure deleteInterfaces(in ifObjt text, in ifDim text)
begin
  declare objtCountSql varchar(4000);
  declare dimIdSql varchar(4000);
  declare deleteIfsSql varchar(4000);
  declare dimId int;
  declare objtCount int;

  set objtCountSql = concat('select count(id) into @objtCount from ',ifDim,' where name = "',ifObjt,'"');
  set @sql = objtCountSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set objtCount = @objtCount;

  if objtCount > 0
  then
    set dimIdSql = concat('select id into @dimId from ',ifDim,' where name = "',ifObjt,'"');
    set @sql = dimIdSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set dimId = @dimId;

    set deleteIfsSql = concat('delete from ',ifDim,'_interface where ',ifDim,'_id = ',dimId);
    set @sql = deleteIfsSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
  end if;
end
//

create procedure addInterface(in ifObjt text, in ifName text, in ifType text, in arName text, in pName text, in ifDim text)
begin
  declare dimIdSql varchar(4000);
  declare addIfSql varchar(4000);
  declare dimId int;
  declare ifId int;
  declare arId int;
  declare privId int;
  declare reqId int default 0;

  select id into arId from access_right where name = arName;
  select id into privId from privilege where name = pName;

  set dimIdSql = concat('select id into @dimId from ',ifDim,' where name = "',ifObjt,'"');
  set @sql = dimIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set dimId = @dimId;
  select id into ifId from interface where name = ifName limit 1;
  if ifId is null
  then
    call newId2(ifId);
    insert into interface (id,name) values (ifId,ifName);
  end if;

  if ifType = 'required'
  then
    set reqId = 1;
  else
    set reqId = 0;
  end if;
  
  set addIfSql = concat('insert into ',ifDim,'_interface (',ifDim,'_id, interface_id,required_id,access_right_id,privilege_id) values(',dimId,',',ifId,',',reqId,',',arId,',',privId,')');
  select addIfSql;
  set @sql = addIfSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure getInterfaces(in dimObjt text, in dimName text)
begin
  declare dimIdSql varchar(4000);
  declare getIfsSql varchar(4000);
  declare dimId int;

  set dimIdSql = concat('select id into @dimId from ',dimName,' where name = "',dimObjt,'"');
  set @sql = dimIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set dimId = @dimId;

  set getIfsSql = concat('select i.name,di.required_id,ar.name,pr.name from ',dimName,'_interface di, interface i,access_right ar, privilege pr where di.',dimName,'_id = ',dimId,' and di.interface_id = i.id and di.access_right_id = ar.id and di.privilege_id = pr.id');
  set @sql = getIfsSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure add_template_asset_properties(in assetId int, in cProperty int, in iProperty int, in avProperty int, in acProperty int, in anProperty int, in panProperty int, in unlProperty int, in unoProperty int, in cRationale text, in iRationale text, in avRationale text, in acRationale text, in anRationale text, in panRationale text, in unlRationale text, in unoRationale text)
begin
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,0,cProperty,cRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,1,iProperty,iRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,2,avProperty,avRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,3,acProperty,acRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,4,anProperty,anRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,5,panProperty,panRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,6,unlProperty,unlRationale);
  insert into template_asset_property(template_asset_id,property_id,property_value_id,property_rationale) values(assetId,7,unoProperty,unoRationale);
end
//

create procedure delete_template_asset_properties(in assetId int)
begin
  delete from template_asset_property where asset_id = assetId;
end
//

create procedure template_assetProperties(in assetId int)
begin
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);

  select property_value_id,property_rationale into cProperty,cRationale from template_asset_property where template_asset_id = assetId and property_id = 0;
  select property_value_id,property_rationale into iProperty,iRationale from template_asset_property where template_asset_id = assetId and property_id = 1;
  select property_value_id,property_rationale into avProperty,avRationale from template_asset_property where template_asset_id = assetId and property_id = 2;
  select property_value_id,property_rationale into acProperty,acRationale from template_asset_property where template_asset_id = assetId and property_id = 3;
  select property_value_id,property_rationale into anProperty,anRationale from template_asset_property where template_asset_id = assetId and property_id = 4;
  select property_value_id,property_rationale into panProperty,panRationale from template_asset_property where template_asset_id = assetId and property_id = 5;
  select property_value_id,property_rationale into unlProperty,unlRationale from template_asset_property where template_asset_id = assetId and property_id = 6;
  select property_value_id,property_rationale into unoProperty,unoRationale from template_asset_property where template_asset_id = assetId and property_id = 7;
  select ifnull(cProperty,0),ifnull(iProperty,0),ifnull(avProperty,0),ifnull(acProperty,0),ifnull(anProperty,0),ifnull(panProperty,0),ifnull(unlProperty,0),ifnull(unoProperty,0),cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale;
end
//

create procedure addComponentStructure(in assocId int,in componentId int, in headAsset text, in headType text, in headNav int, in headMult text,in headRole text, in tailRole text, in tailMult text, in tailNav int, in tailType text, in tailAsset text)
begin
  declare headAssetId int;
  declare headTypeId int;
  declare headMultId int;
  declare tailMultId int;
  declare tailTypeId int;
  declare tailAssetId int;

  select id into headAssetId from template_asset where name = headAsset limit 1;
  select id into headTypeId from association_type where name = headType limit 1;
  select id into headMultId from multiplicity_type where name = headMult limit 1;
  select id into tailMultId from multiplicity_type where name = tailMult limit 1;
  select id into tailTypeId from association_type where name = tailType limit 1;
  select id into tailAssetId from template_asset where name = tailAsset limit 1;

  insert into component_classassociation(id,component_id,head_id,head_association_type_id,head_navigation,head_multiplicity_id,head_role_name,tail_role_name,tail_multiplicity_id,tail_navigation,tail_association_type_id,tail_id) values(assocId,componentId,headAssetId,headTypeId,headNav,headMultId,headRole,tailRole,tailMultId,tailNav,tailTypeId,tailAssetId);
end
//

create procedure getComponentStructure(in componentId int)
begin
    if componentId = -1
    then
      select ha.name,hat.name,a.head_navigation,hm.name,a.head_role_name,a.tail_role_name,tm.name,a.tail_navigation,tat.name,ta.name from component_classassociation a, template_asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, template_asset ta where a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
    else
      select ha.name,hat.name,a.head_navigation,hm.name,a.head_role_name,a.tail_role_name,tm.name,a.tail_navigation,tat.name,ta.name from component_classassociation a, template_asset ha, multiplicity_type hm, association_type hat, association_type tat, multiplicity_type tm, template_asset ta where a.component_id = componentId and a.head_id = ha.id and a.head_multiplicity_id = hm.id and a.head_association_type_id = hat.id and a.tail_association_type_id = tat.id and a.tail_multiplicity_id = tm.id and a.tail_id = ta.id;
    end if;
end
//

create procedure addComponentRequirement(in reqLabel int, in componentId int, in reqName text)
begin
  declare reqId int;
  select id into reqId from template_requirement where name = reqName;
  insert into component_template_requirement(template_requirement_id,component_id,label) values (reqId,componentId,reqLabel);
end
//

create procedure getComponentRequirements(in componentId int)
begin
  select tr.name,ctr.label from component_template_requirement ctr, template_requirement tr where ctr.component_id = componentId and ctr.template_requirement_id = tr.id order by 2;
end
//

create procedure getComponentView(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,synopsis from component_view;
  else
    select id,name,synopsis from component_view where id = constraintId;
  end if;
end
//

create procedure componentInterfaces(in constraintId int)
begin
  select c.name component,i.name interface,ci.required_id,ar.name,p.name from component c, interface i, component_interface ci,access_right ar,privilege p where ci.component_id = constraintId and ci.component_id = c.id and ci.interface_id = i.id and ci.access_right_id = ar.id and ci.privilege_id = p.id;
end
//

create procedure updateComponent(in componentId int, in componentName text, in componentDesc text)
begin
  update component set name = componentName, description = componentDesc where id = componentId;
end
//

create procedure delete_component(in componentId int)
begin
  call deleteComponentComponents(componentId);
  if componentId = -1
  then
    delete from component_threat_target;
    delete from component_vulnerability_target;
    delete from component_view_component;
    delete from component_usecase;
    delete from component;
  else
    delete from component_threat_target where component_id = componentId;
    delete from component_vulnerability_target where component_id = componentId;
    delete from component_view_component where id = componentId;
    delete from component_usecase where component_id = componentId;
    delete from component where id = componentId;
  end if;
end
//

create procedure deleteComponentComponents(in componentId int)
begin
  if componentId = -1
  then
    delete from component_interface;
    delete from component_classassociation;
    delete from component_template_requirement;
    delete from component_template_goal;
    delete from component_goalgoal_goalassociation;
  else
    delete from component_interface where component_id = componentId;
    delete from component_classassociation where component_id = componentId;
    delete from component_template_requirement where component_id = componentId;
    delete from component_template_goal where component_id = componentId;
    delete from component_goalgoal_goalassociation where component_id = componentId;
  end if;
end
//

create procedure componentViewWeaknesses(in cvName text, in envName text)
begin
  declare cvId int;
  declare envId int;
  drop table if exists temp_templateasset_asset;
  create temporary table temp_templateasset_asset (component_name varchar(255),template_asset_name varchar(255),asset_name varchar(255),target_type varchar(50),target_name varchar(255));

  select id into cvId from component_view where name = cvName;
  select id into envId from environment where name = envName;

/* get assets with the same name */

  insert into temp_templateasset_asset
  select c.name,ta.name,a.name,'vulnerability',v.name from component c, component_asset ca, asset a, template_asset ta, asset_vulnerability av, vulnerability v where ca.component_id = c.id and ca.component_id in (select component_id from component_view_component where component_view_id = cvId) and ca.asset_id = ta.id and ta.name = a.name and a.id = av.asset_id and av.environment_id = envId and av.vulnerability_id = v.id
  union
  select c.name,ta.name,a.name,'threat',t.name from component c, component_asset ca, asset a, template_asset ta, asset_threat at, threat t where ca.component_id = c.id and ca.component_id in (select component_id from component_view_component where component_view_id = cvId) and ca.asset_id = ta.id and ta.name = a.name and a.id = at.asset_id and at.environment_id = envId and at.threat_id = t.id;

  select component_name, template_asset_name, asset_name, target_name,target_type from temp_templateasset_asset order by 4,1,2;

end
//

create procedure getComponents(in cvId int)
begin
  select c.id,c.name,c.description from component c, component_view_component cvc where cvc.component_view_id = cvId and cvc.component_id = c.id;
end
//

create procedure getConnectors(in cmId int)
begin
  select ca.name connector, fc.name from_name, ca.from_role,fi.name from_interface, tc.name to_name, ti.name,ca.to_role,p.name,ar.name to_interface from connector ca, component fc, component tc, interface fi, interface ti, component_model_connector cmc, protocol p,access_right ar where ca.from_component_id = fc.id and ca.from_interface_id = fi.id and ca.to_component_id = tc.id and ca.to_interface_id = ti.id and ca.id = cmc.connector_id and cmc.component_model_id = cmId and ca.protocol_id = p.id and ca.access_right_id = ar.id;
end
//

create procedure addComponentView(in cvId int, in cvName text, in cvSyn text)
begin
  insert into component_view(id,name,synopsis) values (cvId,cvName,cvSyn);
end
//

create procedure updateComponentView(in cvId int, in cvName text, in cvSyn text)
begin
  update component_view set name = cvName, synopsis = cvSyn where id = cvId;
end
//

create procedure addComponentToView(in cId int, in cvId int)
begin
  insert into component_view_component(component_id,component_view_id) values (cId,cvId);
end
//

create procedure delete_component_view(in cvId int)
begin
  call deleteSituatedComponentView(cvId);
  call deleteComponentViewComponents(cvId);
  if cvId = -1
  then
    delete from component_view_component;
    delete from connector;
    delete from component_view;
  else
    delete from component_view_component where component_view_id = cvId;
    delete from connector where component_view_id = cvId;
    delete from component_view where id = cvId;
  end if;

end
//

create procedure componentViewInterfaces(in cvName text)
begin
  declare cvId int;

  if cvName != 'ALL'
  then
    select id into cvId from component_view where name = cvName;
    select c.name component,i.name interface,ci.required_id from component c, interface i, component_interface ci, component_view_component cvc where cvc.component_view_id = cvId and cvc.component_id = ci.component_id  and ci.component_id = c.id and ci.interface_id = i.id;
  else
    select c.name component,i.name interface,ci.required_id from component c, interface i, component_interface ci, component_view_component cvc where cvc.component_id = ci.component_id  and ci.component_id = c.id and ci.interface_id = i.id;
  end if;
end
//

create procedure componentViewConnectors(in cvName text)
begin
  declare cvId int;

  if cvName != 'ALL'
  then
    select id into cvId from component_view where name = cvName;
    select ca.name connector, fc.name from_name, ca.from_role, fi.name from_interface, tc.name to_name, ti.name to_interface, ca.to_role, ta.name,p.name,ar.name from connector ca, component fc, component tc, interface fi, interface ti, template_asset ta, protocol p, access_right ar where ca.component_view_id = cvId and ca.from_component_id = fc.id and ca.from_interface_id = fi.id and ca.to_component_id = tc.id and ca.to_interface_id = ti.id and ca.template_asset_id = ta.id and ca.protocol_id = p.id and ca.access_right_id = ar.id;
  else
    select ca.name connector, fc.name from_name, ca.from_role, fi.name from_interface, tc.name to_name, ti.name to_interface, ca.to_role, ta.name,p.name,ar.name from connector ca, component fc, component tc, interface fi, interface ti, template_asset ta, protocol p, access_right ar where ca.from_component_id = fc.id and ca.from_interface_id = fi.id and ca.to_component_id = tc.id and ca.to_interface_id = ti.id and ca.template_asset_id = ta.id and ca.protocol_id = p.id and ca.access_right_id = ar.id;
  end if;
end
//

create procedure component_viewNames(in environmentName text)
begin
  select name from component_view order by 1;
end
//

create procedure deleteComponentViewComponents(in cvId int)
begin
  delete from component_view_component where component_view_id = cvId;
  delete from connector where component_view_id = cvId;
end
//

create procedure componentNames(in constraintName text)
begin
  select name from component order by 1;
end
//

create procedure connectorNames(in constraintName text)
begin
  select name from connector order by 1;
end
//

create function mitigated_likelihood(threatId int,environmentId int) 
returns int
deterministic 
begin
  declare lhScore int;
  declare effectivenessScore int;
  declare mitigatedScore int;

  select likelihood_id into lhScore from threat_likelihood where threat_id = threatId and environment_id = environmentId;
  select ifnull(max(ctt.effectiveness_id),0) into effectivenessScore from component_threat_target ctt where threat_id = threatId and environment_id = environmentId;
  set mitigatedScore = lhScore - effectivenessScore;
  if mitigatedScore < 0
  then
    set mitigatedScore = 0;
  end if;
  return mitigatedScore;
end
//

create function mitigated_severity(vulId int,environmentId int) 
returns int
deterministic 
begin
  declare sevScore int;
  declare effectivenessScore int;
  declare mitigatedScore int;

  select severity_id into sevScore from vulnerability_severity where vulnerability_id = vulId and environment_id = environmentId;
  select ifnull(max(cvt.effectiveness_id),0) into effectivenessScore from component_vulnerability_target cvt where vulnerability_id = vulId and environment_id = environmentId;
  set mitigatedScore = sevScore - effectivenessScore;
  if mitigatedScore < 0
  then
    set mitigatedScore = 0;
  end if;
  return mitigatedScore;
end
//

create procedure componentViewRequirements(in cvName text)
begin
  declare cvId int;

  select id into cvId from component_view where name = cvName;
  select cr.name from component_requirement cr, component_view_component cvc where cvc.component_view_id = cvId and cvc.component_id = cr.component_id order by 1;
end
//

create procedure componentAssets(in cvName text, in reqName text)
begin
  declare cvId int;
  declare reqId int;

  select id into cvId from component_view where name = cvName;
  if reqName != ''
  then
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component_requirement cr, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.head_id = ta.id and ca.head_id = cr.asset_id and cr.name = reqName and ca.component_id = c.id
    union
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component_requirement cr, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.tail_id = ta.id and ca.tail_id = cr.asset_id and cr.name = reqName and ca.component_id = c.id;
  else
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.head_id = ta.id and ca.component_id = c.id
    union
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.tail_id = ta.id and ca.component_id = c.id;
  end if;
end
//

create procedure situateComponentAsset(in assetId int, in componentName text)
begin
  declare done int default 0;
  declare templateAssetId int;
  declare assetName varchar(50);
  declare componentId int;
  declare assetTemplateAssetCount int;
  declare continue handler for not found set done = 1;

  select name into assetName from asset where id = assetId;
  select id into templateAssetId from template_asset where name = assetName;
  select id into componentId from component where name = componentName;

  set done = 0;

  select count(*) into assetTemplateAssetCount from component_asset_template_asset where asset_id = assetId and template_asset_id = templateAssetId and component_id = componentId;
  if assetTemplateAssetCount = 0
  then
    insert into component_asset_template_asset(asset_id,template_asset_id,component_id) values (assetId,templateAssetId,componentId);
  end if;
end
//

create procedure existing_object(in objtName text,in dimName text) 
begin
  declare countSql varchar(4000);
  declare exSql varchar(4000);
  declare objtId int default -1;
  declare objtCount int;

  set countSql = concat('select count(id) into @objtCount from ',dimName,' where name = "',objtName,'" limit 1');
  set @sql = countSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set objtCount = @objtCount;

  if objtCount = 0
  then
    select -1;
  else
    set exSql = concat('select id into @objtId from ',dimName,' where name = "',objtName,'" limit 1');
    set @sql = exSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set objtId = @objtId;
    select objtId;
  end if;
end
//

create procedure addComponentTarget(in componentName text,in assetName text, in targetName text, in effectivenessName text, in effRationale text, in environmentName text)
begin
  declare componentId int;
  declare assetId int;
  declare environmentId int;
  declare targetId int;
  declare effectivenessId int;
  declare threatCount int;
  select id into componentId from component where name = componentName limit 1;
  select id into assetId from asset where name = assetName limit 1;
  select id into effectivenessId from target_effectiveness where name = effectivenessName limit 1;
  select id into environmentId from environment where name = environmentName limit 1;
  select count(*) into threatCount from threat where name = targetName;
  if threatCount > 0
  then
    select id into targetId from threat where name = targetName;
    insert into component_threat_target(component_id,asset_id,environment_id,threat_id,effectiveness_id,effectiveness_rationale) values (componentId,assetId,environmentId,targetId,effectivenessId,effRationale);
  else
    select id into targetId from vulnerability where name = targetName;
    insert into component_vulnerability_target(component_id,asset_id,environment_id,vulnerability_id,effectiveness_id,effectiveness_rationale) values (componentId,assetId,environmentId,targetId,effectivenessId,effRationale);
  end if;
end
//

create procedure assetComponents(in assetName text,in environmentName text)
begin
  declare assetId int;
  declare envId int;
  declare cName varchar(255); 

  select id into assetId from asset where name = assetName;
  select id into envId from environment where name = environmentName;
  select c.name from component c, component_asset_template_asset ata, environment_asset ea where ea.environment_id = envId and ea.asset_id = assetId and ea.asset_id = ata.asset_id and ata.component_id = c.id;
end
//

create procedure addTemplateRequirement(in reqId int, in reqName text, in reqAsset text, in reqType text, in reqDesc text, in reqRat text, in reqFC text)
begin
  declare reqTypeId int;
  declare assetId int;

  select id into reqTypeId from requirement_type where name = reqType;
  select id into assetId from template_asset where name = reqAsset;

  insert into template_requirement(id,name,type_id,description,rationale,fit_criterion,asset_id) values (reqId,reqName,reqTypeId,reqDesc,reqRat,reqFC,assetId);
end
//

create procedure updateTemplateRequirement(in reqId int, in reqName text, in reqAsset text, in reqType text, in reqDesc text, in reqRat text, in reqFC text)
begin
  declare reqTypeId int;
  declare assetId int;

  select id into reqTypeId from requirement_type where name = reqType;
  select id into assetId from template_asset where name = reqAsset;

  update template_requirement set name = reqName, type_id = reqTypeId, description = reqDesc, rationale = reqRat, fit_criterion = reqFC, asset_id = assetId where id = reqId;
end
//

create procedure delete_template_requirement(in reqId int)
begin
  if reqId = -1
  then
    delete from securitypattern_template_requirement;
    delete from component_template_requirement;
    delete from template_requirement;
  else
    delete from securitypattern_template_requirement where template_requirement_id = reqId;
    delete from component_template_requirement where template_requirement_id = reqId;
    delete from template_requirement where id = reqId;
  end if;
end
//

create procedure getTemplateRequirements(in constraintId int)
begin
  if constraintId = -1
  then
    select tr.id, tr.name, ta.name, rt.name, tr.description, tr.rationale, tr.fit_criterion from template_requirement tr, template_asset ta, requirement_type rt where tr.type_id = rt.id and tr.asset_id = ta.id;
  else
    select tr.id, tr.name, ta.name, rt.name, r.description, tr.rationale, tr.fit_criterion from template_requirement tr, template_asset ta, requirement_type rt where tr.id = constraintId and tr.type_id = rt.id and tr.asset_id = ta.id;
  end if;
end
//

create procedure template_requirementNames()
begin
  select name from template_requirement order by 1;
end
//

create procedure deleteSituatedComponentView(in cvId int)
begin
  declare cId int; 
  declare assetId int; 
  declare reqId int; 
  declare goalId int; 
  declare done int default 0;
  declare componentCursor cursor for select component_id from component_view_component where component_view_id = cvId;
  declare assetCursor cursor for select id from asset where id in (select asset_id from component_asset_template_asset where component_id = cId);
  declare reqCursor cursor for select id from requirement where id in (select requirement_id from component_requirement_template_requirement where requirement_id = cId);
  declare goalCursor cursor for select id from goal where id in (select goal_id from component_goal_template_goal where goal_id = cId);
  declare continue handler for not found set done = 1;

  open componentCursor;
  component_loop: loop
    fetch componentCursor into cId;

    if done = 1
    then
      leave component_loop;
    end if;

    set done = 0;
    open assetCursor;
    asset_loop: loop
      fetch assetCursor into assetId;
      if done = 1
      then
        leave asset_loop;
      end if;
      call delete_asset(assetId);
    end loop asset_loop;
    close assetCursor;
    delete from component_asset_template_asset where component_id = cId;

    set done = 0;
    open reqCursor;
    req_loop: loop
      fetch reqCursor into reqId;
      if done = 1
      then
        leave req_loop;
      end if;
      call delete_requirement(reqId);
    end loop req_loop;
    close reqCursor;
    delete from component_requirement_template_requirement where component_id = cId;

    set done = 0;
    open goalCursor;
    goal_loop: loop
      fetch goalCursor into goalId;
      if done = 1
      then
        leave goal_loop;
      end if;
      call delete_goal(goalId);
    end loop goal_loop;
    close goalCursor;
    delete from component_goal_template_goal where component_id = cId;

  end loop component_loop;
  close componentCursor;

end
//

create procedure situateComponentViewRequirements(in cvName text)
begin
  declare cvId int;
  declare cId int;
  declare cName varchar(255);
  declare done int;
  declare componentCursor cursor for select cvc.component_id,c.name from component_view_component cvc, component c where cvc.component_view_id = cvId and cvc.component_id = c.id;
  declare continue handler for not found set done = 1;

  select id into cvId from component_view where name = cvName;

  open componentCursor;
  component_loop: loop
    fetch componentCursor into cId,cName;
    if done = 1
    then
      leave component_loop;
    end if;
    call situateComponentViewRequirement(cvId,cId,cName);
  end loop component_loop;
  close componentCursor;
end
//

create procedure situateComponentViewRequirement(in cvId int, in cId int, in cName text)
begin
  declare reqLabel int;
  declare typeName varchar(50);
  declare reqName varchar(4000);
  declare reqDesc varchar(255);
  declare reqRationale varchar(255);
  declare reqFc varchar(255);
  declare reqId int;
  declare trId int;
  declare assetName varchar(50);
  declare done int;
  declare reqCursor cursor for select cr.label,rt.name,cr.name,cr.description,cr.rationale,cr.fit_criterion,ta.name from component_view_component cvc, component_requirement cr, requirement_type rt, template_asset ta where cvc.component_view_id = cvId and cvc.component_id = cr.component_id and cr.component_id = cId and cr.type_id = rt.id and cr.asset_id = ta.id order by cr.label;
  declare continue handler for not found set done = 1;

  open reqCursor;
  req_loop: loop
    fetch reqCursor into reqLabel,typeName,reqName,reqDesc,reqRationale,reqFC,assetName;
    if done = 1
    then
      leave req_loop;
    end if;
    call newId1(reqId);
    call addRequirement(reqLabel,reqId,1,reqName,reqDesc,reqRationale,concat(cName,' component'),reqFc,1,typeName,assetName,1);
    select id into trId from template_requirement where name = reqName;
    insert into component_requirement_template_requirement(requirement_id,template_requirement_id,component_id) values (reqId,trId,cId); 
  end loop req_loop;
  close reqCursor;
end
//

create procedure getAllComponents(in constraintId int)
begin
  if constraintId = -1
  then
    select c.id,c.name,c.description from component c;
  else
    select c.id,c.name,c.description from component c where c.id = constraintId;
  end if;
end
//

create function interfaceId(ifName text) 
returns int
deterministic 
begin
  declare dimId int;
  select id into dimId from interface where name = ifName;
  return dimId;
end
//

create procedure access_rightNames(in environmentName text)
begin
  select distinct name from access_right order by 1;
end
//

create procedure protocolNames(in environmentName text)
begin
  select distinct name from protocol order by 1;
end
//

create procedure privilegeNames(in environmentName text)
begin
  select distinct name from privilege order by 1;
end
//

create procedure surface_typeNames(in environmentName text)
begin
  select distinct name from surface_type order by 1;
end
//

create procedure attackSurfaceMetric(in cvName text)
begin
  declare cvId int;
  declare der_m float default 0;
  declare der_c float default 0;
  declare der_i float default 0;

  select id into cvId from component_view where name = cvName;

  call derRatio_entryExitPoints(cvId,der_m);
  call derRatio_channels(cvId,der_c);
  call derRatio_untrustedSurface(cvId,der_i);

  select der_m,der_c,der_i;
end
//

create procedure derRatio_entryExitPoints(in cvId int, inout derValue float)
begin
  declare priValue int;
  declare arValue int;
  declare done int default 0;
  declare derCursor cursor for select pr.value,ar.value from access_right ar, privilege pr, component_interface ci, component_view cv, component_view_component cvc where cv.id = cvId and cv.id = cvc.component_view_id and cvc.component_id = ci.component_id and ci.access_right_id = ar.id and ci.privilege_id = pr.id;
  declare continue handler for not found set done = 1;

  open derCursor;
  der_loop: loop
    fetch derCursor into priValue,arValue;
    if done = 1
    then
      leave der_loop;
    end if;
    set derValue = derValue + (priValue / arValue);
  end loop der_loop;
  close derCursor;
end
//




create procedure derRatio_channels(in cvId int,inout derValue float)
begin
  declare proValue int;
  declare arValue int;
  declare done int default 0;
  declare derCursor cursor for select pr.value,ar.value from protocol pr, access_right ar, connector c where c.component_view_id = cvId and c.protocol_id = pr.id and c.access_right_id = ar.id;
  declare continue handler for not found set done = 1;

  open derCursor;
  der_loop: loop
    fetch derCursor into proValue,arValue;
    if done = 1
    then
      leave der_loop;
    end if;
    set derValue = derValue + (proValue / arValue);
  end loop der_loop;
  close derCursor;
end
//

create procedure derRatio_untrustedSurface(in cvId int, inout derValue float)
begin
  declare stValue int;
  declare arValue int;
  declare done int default 0;
  declare derCursor cursor for select st.value,ar.value from surface_type st, access_right ar, component_view_component cvc, component_asset ca, template_asset ta where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.asset_id = ta.id and ta.surface_type_id = st.id and ta.access_right_id = ar.id;
  declare continue handler for not found set done = 1;

  open derCursor;
  der_loop: loop
    fetch derCursor into stValue,arValue;
    if done = 1
    then
      leave der_loop;
    end if;
    set derValue = derValue + (stValue / arValue);
  end loop der_loop;
  close derCursor;
end
//

create procedure personasImpact(in cvName text, in envName text)
begin
  declare personaName varchar(50);
  declare impactScore int;
  declare done int default 0;
  declare personaCursor cursor for select name from persona order by 1;
  declare continue handler for not found set done = 1;

  drop table if exists temp_personaImpact;
  create temporary table temp_personaImpact (name varchar(50),impact int);

  open personaCursor;
  persona_loop: loop
    fetch personaCursor into personaName;
    if done = 1
    then
      leave persona_loop;
    end if;
    call personaImpact(cvName,personaName,envName,impactScore);
    insert into temp_personaImpact (name,impact) values (personaName,impactScore);
  end loop persona_loop;
  close personaCursor;
  select name,impact from temp_personaImpact having impact > 0 order by 2 desc;
end
//

create procedure personaImpact(in cvName text, in personaName text,in envName text,out impactScore int) 
begin
  declare cvId int;
  declare personaId int;
  declare environmentId int;
  declare taskId int;
  declare done int default 0;
  declare impactCount int;
  declare taskCursor cursor for select tp.task_id from task_persona tp, persona_role pr, usecase_role ur, component_usecase cu, component_view_component cvc where tp.persona_id = personaId and tp.environment_id = environmentId and tp.persona_id = pr.persona_id and tp.environment_id = pr.environment_id and pr.role_id = ur.role_id and ur.usecase_id = cu.usecase_id and cu.component_id = cvc.component_id and cvc.component_view_id = cvId;
  declare continue handler for not found set done = 1;

  drop table if exists temp_impact;
  create temporary table temp_impact (impact int);

  select id into cvId from component_view where name = cvName;
  select id into personaId from persona where name = personaName;
  select id into environmentId from environment where name = envName;

  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskId;
    if done = 1
    then
      leave task_loop;
    end if;
    insert into temp_impact
    select ifnull(avg((duration_id + frequency_id)/2) + avg(demands_id) + avg(goalsupport_id),1) from task_persona where task_id = taskId and persona_id = personaId and environment_id = environmentId;
  end loop task_loop;
  close taskCursor;
  select ifnull(avg(impact),0) into impactScore from temp_impact;
end
//

create procedure personaImpactRationale(in cvName text, in personaName text, in envName text)
begin
  declare cvId int;
  declare personaId int;
  declare envId int;
  declare taskName varchar(200);
  declare durLabel varchar(50);
  declare freqLabel varchar(50);
  declare pdLabel varchar(50);
  declare gcLabel varchar(50);
  declare done int default 0;
  declare taskCursor cursor for select distinct t.name,durationLabel(duv.name),frequencyLabel(fv.name),dev.name,gv.name from persona p, task_persona tp, security_property_value duv, security_property_value fv, security_property_value dev, security_property_value gv, task t, persona_role pr, usecase_role ur, component_usecase cu, component_view_component cvc where tp.task_id = t.id and tp.environment_id = envId and tp.persona_id = p.id and tp.duration_id = duv.id and tp.frequency_id = fv.id and tp.demands_id = dev.id and tp.goalsupport_id = gv.id and tp.persona_id = personaId and tp.persona_id = pr.persona_id and pr.role_id = ur.role_id and ur.usecase_id = cu.usecase_id and cu.component_id = cvc.component_id and cvc.component_view_id = cvId;
  declare continue handler for not found set done = 1;
 
  drop table if exists temp_impactrationale;
  create temporary table temp_impactrationale (task_name varchar(200),duration_label varchar(50), frequency_label varchar(50), demand_label varchar(50), goalconflict_label varchar(50));

  select id into cvId from component_view where name = cvName;
  select id into personaId from persona where name = personaName;
  select id into envId from environment where name = envName;

  open taskCursor;
  task_loop: loop
    fetch taskCursor into taskName,durLabel,freqLabel,pdLabel,gcLabel;
    if done = 1
    then
      leave task_loop;
    end if;
    insert into temp_impactrationale(task_name,duration_label,frequency_label,demand_label,goalconflict_label) values (taskName,durLabel,freqLabel,pdLabel,gcLabel);
  end loop task_loop;
  select task_name,duration_label,frequency_label,demand_label,goalconflict_label from temp_impactrationale;
end
//

create procedure taskUseCases(in taskName text)
begin
  declare taskId int;

  select id into taskId from task where name = taskName;
  select u.name from usecase u, usecase_task ut where ut.task_id = taskId and ut.usecase_id = u.id order by 1;
end
//

create procedure usecaseComponents(in ucName text)
begin
  declare ucId int;

  select id into ucId from usecase where name = ucName;

  select c.name from component_usecase cu, component c where cu.usecase_id = ucId and cu.component_id = c.id order by 1;
end
//

create procedure componentClassModel(in cName text)
begin
  declare cId int;

  select id into cId from component where name = cName;

  call getComponentStructure(cId);
end
//

create procedure addInternalDocument(in docId int, in docName text, in idDesc text, in idContent text)
begin
  declare idId int;
  select id into idId from internal_document where name = docName;
  if idId is null
  then 
    insert into internal_document(id,name,description,content) values (docId,docName,idDesc,idContent);
  end if;
end
//

create procedure updateInternalDocument(in docId int, in docName text, in idDesc text, in idContent text)
begin
  update internal_document set name = docName, description = idDesc, content = idContent where id = docId;
end
//

create procedure getInternalDocuments(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,ifnull(description,''),ifnull(content,'') from internal_document;
  else
    select id,name,ifnull(description,''),ifnull(content,'') from internal_document where id = constraintId;
  end if;
end
//

create procedure delete_internal_document(in docId int)
begin
  call deleteInternalDocumentComponents(docId);
  if docId != -1
  then
    delete from internal_document where id = docId;
  else
    delete from internal_document;
  end if;
end
//

create procedure addCode(in codeId int, in codeName text, in typeName text, in codeDesc text, in incCriteria text, in codeExample text)
begin
  declare cId int;
  declare ctId int;
  
  select id into ctId from code_type where name = typeName;
  select id into cId from code where name = codeName;
  if cId is null
  then 
    insert into code(id,name,code_type_id,description,inclusion_criteria,example) values (codeId,codeName,ctId,codeDesc,incCriteria,codeExample);
  end if;
end
//

create procedure updateCode(in codeId int, in codeName text, in typeName text, in codeDesc text, in incCriteria text, in codeExample text)
begin
  declare ctId int;
  
  select id into ctId from code_type where name = typeName;

  update code set name = codeName, code_type_id = ctId, description = codeDesc, inclusion_criteria = incCriteria, example = codeExample where id = codeId;
end
//

create procedure getCodes(in constraintId int)
begin
  if constraintId = -1
  then
    select c.id,c.name,ct.name,ifnull(c.description,''),ifnull(c.inclusion_criteria,''),ifnull(c.example,'') from code c, code_type ct where c.code_type_id = ct.id;
  else
    select c.id,c.name,ct.name,ifnull(c.description,''),ifnull(c.inclusion_criteria,''),ifnull(c.example,'') from code c, code_type ct where c.id = constraintId and c.code_type_id = ct.id;
  end if;
end
//

create procedure delete_code(in codeId int)
begin
  if codeId != -1
  then
    delete from code where id = codeId;
  else
    delete from code;
  end if;
end
//

create procedure documentCodes(in docName text)
begin
  declare docId int; 

  select id into docId from internal_document where name = docName;
  select c.name,idc.start_index,idc.end_index from internal_document_code idc, code c where idc.internal_document_id = docId and idc.code_id = c.id order by 1,2,3;
end
//

create procedure deleteInternalDocumentComponents(in docId int)
begin
  if docId != -1
  then
    delete from implied_characteristic_element where internal_document_id = docId;
    delete from internal_document_code where internal_document_id = docId;
    delete from internal_document_memo where internal_document_id = docId;
  else
    delete from implied_characteristic_element;
    delete from internal_document_code;
    delete from internal_document_memo;
  end if;
end
//

create procedure addDocumentCode(in docName text, in docCode text, in startIdx int, in endIdx int,in codeLabel text,in codeSynopsis text)
begin
  declare docId int;
  declare codeId int;

  select id into docId from internal_document where name = docName;
  select id into codeId from code where name = docCode;
  if codeId is null
  then
    call newId2(codeId);
    call addCode(codeId,docCode,'context','None','None','None');
  end if;
  insert into internal_document_code(internal_document_id,code_id,start_index,end_index,label,synopsis) values (docId,codeId,startIdx,endIdx,codeLabel,codeSynopsis);
end
//

create procedure codeNames(in environmentName text)
begin
  select name from code order by 1;
end
//

create procedure memoNames(in environmentName text)
begin
  select name from memo order by 1;
end
//

create procedure artifactCodes(in artName text, in artType text, in sectName text)
begin
  declare sectId int;
  declare artId int; 
  declare artIdSql varchar(4000);
  declare codeSql varchar(4000);

  select id into sectId from artifact_section where name = sectName limit 1;

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  set codeSql = concat('select c.name,ac.start_index,ac.end_index from ',artType,'_code ac, code c where ac.',artType,'_id = ',artId,' and ac.section_id = ',sectId,' and ac.code_id = c.id order by 1,2,3');
  set @sql = codeSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure addArtifactCode(in artName text, in artType text, in sectName text, in docCode text, in startIdx int, in endIdx int)
begin
  declare codeId int;
  declare sectId int;
  declare artId int;
  declare artIdSql varchar(4000);
  declare codeSql varchar(4000);

  select id into sectId from artifact_section where name = sectName;
  select id into codeId from code where name = docCode;
  if codeId is null
  then
    call newId2(codeId);
    call addCode(codeId,docCode,'context','None','None','None');
  end if;

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  set codeSql = concat('insert into ',artType,'_code(',artType,'_id,code_id,section_id,start_index,end_index) values (',artId,',',codeId,',',sectId,',',startIdx,',',endIdx,')');
  set @sql = codeSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure addArtifactEnvironmentCode(in artName text, in envName text, in artType text, in sectName text, in docCode text, in startIdx int, in endIdx int)
begin
  declare envId int;
  declare codeId int;
  declare sectId int;
  declare artId int;
  declare artIdSql varchar(4000);
  declare codeSql varchar(4000);

  select id into envId from environment where name = envName;
  select id into sectId from artifact_section where name = sectName;
  select id into codeId from code where name = docCode;
  if codeId is null
  then
    call newId2(codeId);
    call addCode(codeId,docCode,'context','None','None','None');
  end if;

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  set codeSql = concat('insert into ',artType,'_environment_code(',artType,'_id,environment_id,code_id,section_id,start_index,end_index) values (',artId,',',envId,',',codeId,',',sectId,',',startIdx,',',endIdx,')');
  set @sql = codeSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure artifactEnvironmentCodes(in artName text, in envName text, in artType text, in sectName text)
begin
  declare envId int;
  declare sectId int;
  declare artId int; 
  declare artIdSql varchar(4000);
  declare codeSql varchar(4000);

  select id into envId from environment where name = envName limit 1;
  select id into sectId from artifact_section where name = sectName limit 1;

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  set codeSql = concat('select c.name,ac.start_index,ac.end_index from ',artType,'_environment_code ac, code c where ac.',artType,'_id = ',artId,' and ac.environment_id = ',envId,' and ac.section_id = ',sectId,' and ac.code_id = c.id order by 1,2,3');
  set @sql = codeSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure addArtifactCodeNetwork(in artName text, in artType text, in fromCode text, in toCode text, in rshipTypeName text)
begin
  declare rshipTypeId int;
  declare artId int; 
  declare fromId int;
  declare toId int;
  declare cnId int;
  declare artIdSql varchar(4000);
  declare codeNetSql varchar(4000);

  select id into rshipTypeId from relationship_type where name = rshipTypeName limit 1;
  select id into fromId from code where name = fromCode limit 1;
  select id into toId from code where name = toCode limit 1;

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  call newId2(cnId);

  set codeNetSql = concat('insert into ',artType,'_code_network(id,',artType,'_id,from_code_id,to_code_id,relationship_type_id) values (',cnId,',',artId,',',fromId,',',toId,',',rshipTypeId,')');
  set @sql = codeNetSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure artifactCodeNetwork(in artName text, in artType text,in fromCode text, in toCode text)
begin
  declare artId int; 
  declare fromId int; 
  declare toId int; 
  declare artIdSql varchar(4000);
  declare codeNetSql varchar(4000);

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  if fromCode = '' and toCode = ''
  then
    set codeNetSql = concat('select fc.name, fct.name, tc.name, tct.name, rt.name from code fc, code_type fct, code tc, code_type tct, relationship_type rt, ',artType,'_code_network acn where acn.',artType,'_id = ',artId,' and acn.from_code_id = fc.id and acn.to_code_id = tc.id and acn.relationship_type_id = rt.id and fc.code_type_id = fct.id and tc.code_type_id = tct.id');
  else
    select id into fromId from code where name = fromCode limit 1;
    select id into toId from code where name = toCode limit 1;
    set codeNetSql = concat('select fc.name, fct.name, tc.name, tct.name, rt.name from code fc, code_type fct, code tc, code_type tct, relationship_type rt, ',artType,'_code_network acn where acn.',artType,'_id = ',artId,' and acn.from_code_id = fc.id and acn.to_code_id = tc.id and acn.relationship_type_id = rt.id and fc.code_type_id = fct.id and tc.code_type_id = tct.id and acn.from_code_id = ',fromId,' and acn.to_code_id = ',toId);
  end if;
  set @sql = codeNetSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
end
//

create procedure deleteArtifactCodeNetwork(in artName text, in artType text)
begin
  declare artId int; 
  declare artIdSql varchar(4000);
  declare delSql varchar(4000);

  set artIdSql = concat('select id into @artId from ',artType,' where name = "',artName,'" limit 1');
  set @sql = artIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set artId = @artId;

  set delSql = concat('delete from ',artType,'_code_network where ',artType,'_id = ',artId);
  set @sql = delSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;

end
//

create procedure getImpliedProcesses(in constraintId int)
begin
  if constraintId = -1
  then
    select ip.id,ip.name,ip.description,p.name,ip.specification from persona_implied_process ip, persona p where ip.persona_id = p.id;
  else
    select ip.id,ip.name,ip.description,p.name,ip.specification from persona_implied_process ip, persona p where ip.id = constraintId and  ip.persona_id = p.id;
  end if;
end
//

create procedure addImpliedProcess(in ipId int, in ipName text, in ipDesc text, in pName text, in ipSpec text)
begin
  declare personaId int;
  select id into personaId from persona where name = pName;
  insert into persona_implied_process(id,name,description,persona_id,specification) values (ipId,ipName,ipDesc,personaId,ipSpec);
end
//

create procedure updateImpliedProcess(in ipId int, in ipName text, in ipDesc text, in pName text, in ipSpec text)
begin
  declare personaId int;
  select id into personaId from persona where name = pName;
  update persona_implied_process set name = ipName, description = ipDesc, persona_id = personaId, specification = ipSpec where id = ipId;
end
//

create procedure deleteImpliedProcessComponents(in ipId int)
begin
  delete from persona_implied_process_channel where persona_implied_process_id = ipId;
  delete from persona_implied_process_network where persona_implied_process_id = ipId;
end
//

create procedure delete_persona_implied_process(in ipId int)
begin
  call deleteImpliedProcessComponents(ipId);
  delete from persona_implied_process where id = ipId;
end
//

create procedure impliedProcessNetwork(in ipName text)
begin
  declare ipId int;
  select id into ipId from persona_implied_process where name = ipName;
  select fc.name, fct.name, tc.name, tct.name, rt.name from persona_code_network pcn, code fc, code_type fct, code tc, code_type tct, relationship_type rt, persona_implied_process_network pipn where pipn.persona_implied_process_id = ipId and pipn.persona_code_network_id = pcn.id and pcn.from_code_id = fc.id and pcn.to_code_id = tc.id and pcn.relationship_type_id = rt.id and fc.code_type_id = fct.id and tc.code_type_id = tct.id;
end
//

create procedure addImpliedProcessNetworkRelationship(in ipId int, in personaName text, in fromName text, in toName text, in rType text)
begin
  declare pId int;
  declare fromId int;
  declare toId int;
  declare rTypeId int;
  declare pcnId int;

  select id into pId from persona where name = personaName limit 1;
  select id into fromId from code where name = fromName limit 1;
  select id into toId from code where name = toName limit 1;
  select id into rTypeId from relationship_type where name = rType limit 1;

  select id into pcnId from persona_code_network where persona_id = pId and from_code_id = fromId and to_code_id = toId and relationship_type_id = rTypeId limit 1;

  insert into persona_implied_process_network(persona_implied_process_id,persona_code_network_id) values (ipId,pcnId);
end
//

create procedure existing_characteristic(in objtName text,in dimName text) 
begin
  declare countSql varchar(4000);
  declare exSql varchar(4000);
  declare objtId int default -1;
  declare objtCount int;

  set countSql = concat('select count(id) into @objtCount from ',dimName,' where description = "',objtName,'" limit 1');
  set @sql = countSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set objtCount = @objtCount;

  if objtCount = 0
  then
    select -1;
  else
    set exSql = concat('select id into @objtId from ',dimName,' where description = "',objtName,'" limit 1');
    set @sql = exSql;
    prepare stmt from @sql;
    execute stmt;
    deallocate prepare stmt;
    set objtId = @objtId;
    select objtId;
  end if;
end
//

create procedure misusability_caseNames(in envName text)
begin
  select name from misusability_case;
end
//

create procedure usecaseStepSynopses(in ucId int, in envId int)
begin
  select uc.name,e.name,uss.step_no,uss.synopsis,r.name,td.name from usecase uc, environment e, role r, trace_dimension td, usecase_step_synopsis uss where uss.usecase_id = ucId and uss.environment_id = envId and uss.usecase_id = uc.id and uss.environment_id = e.id and uss.actor_id = r.id and uss.actor_type_id = td.id
  union
  select uc.name,e.name,uss.step_no,uss.synopsis,a.name,td.name from usecase uc, environment e, asset a, trace_dimension td, usecase_step_synopsis uss where uss.usecase_id = ucId and uss.environment_id = envId and uss.usecase_id = uc.id and uss.environment_id = e.id and uss.actor_id = a.id and uss.actor_type_id = td.id
  order by step_no;
end
//

create procedure addStepSynopsis(in ucName text, in envName text, in stepNo int, in stepSyn text, in stepActor text, in stepActorType text)
begin
  declare stepSynId int;
  declare ucId int;
  declare envId int;
  declare actorId int;
  declare actorIdSql varchar(4000);
  declare actorTypeId int;

  select id into ucId from usecase where name = ucName;
  select id into envId from environment where name = envName;
  select id into actorTypeId from trace_dimension where name = stepActorType;

  set actorIdSql = concat('select id into @actorId from ',stepActorType,' where name = \"',stepActor,'\"');
  set @sql = actorIdSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set actorId = @actorId;

  call newId2(stepSynId);

  insert into usecase_step_synopsis(id,usecase_id,step_no,environment_id,synopsis,actor_id,actor_type_id) values (stepSynId,ucId,stepNo,envId,stepSyn,actorId,actorTypeId); 
end
//

create procedure directoryEntry(in eLabel text, in dType text)
begin
  declare eName varchar(100);
  declare eDesc varchar (4000);
  declare eType varchar (100);
  declare eSql varchar(4000);

  set eSql = concat('select d.name,d.description,dt.name into @eName,@eDesc,@eType from ',dType,'_directory d,',dType,'_type dt where d.label=\"',eLabel,'\" and d.',dType,'_type_id = dt.id'); 
  set @sql = eSql;
  prepare stmt from @sql;
  execute stmt;
  deallocate prepare stmt;
  set eName = @eName;
  set eDesc = @eDesc;
  set eType = @eType;
  select eName,eDesc,eType;
end
//

create procedure delete_template_goal(in goalId int)
begin
  if goalId = -1
  then
    delete from component_template_goal;
    delete from template_goal_concern;
    delete from template_goal_responsibility;
    delete from template_goal;
  else
    delete from component_template_goal where template_goal_id = goalId;
    call deleteTemplateGoalComponents(goalId);
    delete from template_goal where id = goalId;
  end if;
end
//

create procedure template_goalNames()
begin
  select name from template_goal order by 1;
end
//

create procedure addComponentGoal(in componentId int, in goalName text)
begin
  declare goalId int;
  select id into goalId from template_goal where name = goalName;
  insert into component_template_goal(template_goal_id,component_id) values (goalId,componentId);
end
//

create procedure getComponentGoals(in componentId int)
begin
  select tg.name from component_template_goal ctg, template_goal tg where ctg.component_id = componentId and ctg.template_goal_id = tg.id order by 1;
end
//

create procedure addTemplateGoal(in goalId int, in goalName text, in goalDef text, in goalRat text)
begin
  insert into template_goal(id,name,definition,rationale) values (goalId,goalName,goalDef,goalRat);
end
//

create procedure updateTemplateGoal(in goalId int, in goalName text, in goalDef text, in goalRat text)
begin
  update template_goal set name = goalName, definition = goalDef, rationale = reqRat where id = goalId;
end
//

create procedure componentViewGoals(in cvName text)
begin
  declare cvId int;

  select id into cvId from component_view where name = cvName;
  select cg.name from component_goal cg, component_view_component cvc where cvc.component_view_id = cvId and cvc.component_id = cg.component_id order by 1;
end
//

create procedure situateComponentViewGoals(in cvName text,in envName text)
begin
  declare cvId int;
  declare cId int;
  declare cName varchar(255);
  declare done int;
  declare componentCursor cursor for select cvc.component_id,c.name from component_view_component cvc, component c where cvc.component_view_id = cvId and cvc.component_id = c.id;
  declare continue handler for not found set done = 1;

  select id into cvId from component_view where name = cvName;

  set done = 0;
  open componentCursor;
  component_loop: loop
    fetch componentCursor into cId,cName;
    if done = 1
    then
      leave component_loop;
    end if;
    call situateComponentViewGoal(cvId,cId,cName,envName);
  end loop component_loop;
  close componentCursor;
end
//

create procedure situateComponentViewGoal(in cvId int, in cId int, in cName text, in envName text)
begin
  declare goalName varchar(4000);
  declare assetName varchar(50);
  declare roleName varchar(255);
  declare assetId int;
  declare goalDef varchar(255);
  declare goalRationale varchar(255);
  declare goalId int;
  declare tgId int;
  declare assocId int;
  declare done int;
  declare cvName varchar(255);
  declare goalCursor cursor for select cg.name,cg.definition,cg.rationale from component_view_component cvc, component_goal cg where cvc.component_view_id = cvId and cvc.component_id = cg.component_id and cg.component_id = cId order by cg.name;
  declare concernCursor cursor for select distinct ta.name from component_view_component cvc, component_template_goal cg, template_goal_concern gc, template_asset ta where cvc.component_view_id = cvId and cvc.component_id = cg.component_id and cg.component_id = cId and cg.template_goal_id = gc.template_goal_id and gc.template_asset_id = ta.id order by ta.name;
  declare respCursor cursor for select distinct r.name from component_view_component cvc, component_template_goal cg, template_goal_responsibility gr, role r where cvc.component_view_id = cvId and cvc.component_id = cg.component_id and cg.component_id = cId and cg.template_goal_id = tgId and cg.template_goal_id = gr.template_goal_id and gr.role_id = r.id order by r.name;
  declare continue handler for not found set done = 1;

  select name into cvName from component_view where id = cvId;

  set done = 0;
  open goalCursor;
  goal_loop: loop
    fetch goalCursor into goalName,goalDef,goalRationale;
    if done = 1
    then
      leave goal_loop;
    end if;
    
    select count(id) into goalId from goal where name = goalName;
    if goalId = 0
    then
      call newId1(goalId);
      call addGoal(goalId,goalName,cvName);
      call add_goal_environment(goalId,envName);
      call addGoalDefinition(goalId,envName,goalDef);
      call addGoalCategory(goalId,envName,'Maintain');
      call addGoalPriority(goalId,envName,'Low');
      call addGoalFitCriterion(goalId,envName,'None');
      call addGoalIssue(goalId,envName,goalRationale);

      set done = 0;
      open concernCursor;
      concern_loop: loop
        fetch concernCursor into assetName;
        if done = 1
        then
          leave concern_loop;
        end if;
        set assetId = null;
        select id into assetId from asset where name = assetName;
        if assetId is null
        then
          call importTemplateAssetIntoComponent(assetName,envName,cName);
        end if;
        call add_goal_concern(goalId,envName,assetName); 
      end loop concern_loop;
      close concernCursor;

      select id into tgId from template_goal where name = goalName;

      set done = 0;
      open respCursor;
      resp_loop: loop
        fetch respCursor into roleName;
        if done = 1
        then
          leave resp_loop;
        end if;
        call newId1(assocId);
        call addGoalAssociation(assocId,envName,goalName,'goal','responsible',roleName,'role',0,'None'); 
      end loop resp_loop;
      close respCursor;
      set done = 0;

      insert into component_goal_template_goal(goal_id,template_goal_id,component_id) values (goalId,tgId,cId); 
    end if;
  end loop goal_loop;
  close goalCursor;
end
//

create procedure getTemplateGoals(in constraintId int)
begin
  if constraintId = -1
  then
    select id, name, definition, rationale from template_goal;
  else
    select id, name, definition, rationale from template_goal where id = constraintId;
  end if;
end
//

create procedure templateGoalConcerns(in tgId int)
begin
  select ta.name from template_goal_concern tgc, template_asset ta where tgc.goal_id = tgId and tgc.template_asset_id = ta.id;
end
//

create procedure deleteTemplateGoalComponents(in goalId int)
begin
  delete from template_goal_concern where goal_id = goalId;
  delete from template_goal_responsibility where goal_id = goalId;
end
//

create procedure add_template_goal_concern(goalId int, assetName text)
begin
  declare assetId int;
  select id into assetId from template_asset where name = assetName;
  insert into template_goal_concern(template_goal_id,template_asset_id) values (goalId,assetId);
end
//

create procedure addComponentGoalAssociation(in componentId int, in goalName text, in subGoalName text, in refType text, in gaRationale text)
begin
  declare goalId int;
  declare subGoalId int;
  declare refTypeId int;

  select id into goalId from template_goal where name = goalName;
  select id into subGoalId from template_goal where name = subGoalName;
  select id into refTypeId from reference_type where name = refType;

  insert into component_goalgoal_goalassociation(component_id,goal_id,subgoal_id,ref_type_id,rationale) values(componentId,goalId,subGoalId,refTypeId,gaRationale);
end
//

create procedure situateComponentViewGoalAssociations(in cvName text,in envName text)
begin
  declare cvId int;
  declare cId int;
  declare cName varchar(255);
  declare done int;
  declare componentCursor cursor for select cvc.component_id,c.name from component_view_component cvc, component c where cvc.component_view_id = cvId and cvc.component_id = c.id;
  declare continue handler for not found set done = 1;

  select id into cvId from component_view where name = cvName;

  open componentCursor;
  component_loop: loop
    fetch componentCursor into cId,cName;
    if done = 1
    then
      leave component_loop;
    end if;
    call situateComponentViewGoalAssociation(cvId,cId,cName,envName);
  end loop component_loop;
  close componentCursor;
end
//

create procedure situateComponentViewGoalAssociation(in cvId int, in cId int, in cName text, in envName text)
begin
  declare assocId int;
  declare goalName varchar(255);
  declare subGoalName varchar(255);
  declare refType varchar(50);
  declare gRationale varchar(1000);
  declare done int;
  declare assocCursor cursor for select hg.name,rt.name,tg.name,ga.rationale from template_goal hg, template_goal tg, reference_type rt, component_goalgoal_goalassociation ga, component_view_component cvc where cvc.component_view_id = cvId and cvc.component_id = cId and cvc.component_id = ga.component_id and ga.goal_id = hg.id and ga.subgoal_id = tg.id and ga.ref_type_id = rt.id;
  declare continue handler for not found set done = 1;

  open assocCursor;
  assoc_loop: loop
    fetch assocCursor into goalName,refType,subGoalName,gRationale;
    if done = 1
    then
      leave assoc_loop;
    end if;
    call newId1(assocId);
    call addGoalAssociation(assocId,envName,goalName,'goal',refType,subGoalName,'goal',0,gRationale);
  end loop assoc_loop;
  close assocCursor;

end
//

create procedure componentGoalAssociations(in cId int)
begin
  select hg.name,rt.name,tg.name,ga.rationale from template_goal hg, template_goal tg, reference_type rt, component_goalgoal_goalassociation ga where ga.component_id = cId and ga.goal_id = hg.id and ga.subgoal_id = tg.id and ga.ref_type_id = rt.id
  union
  select hg.name,'responsible',tg.name,'None' from template_goal hg, role tg, component_goalgoal_goalassociation ga, template_goal_responsibility tgr where ga.component_id = cId and tgr.template_goal_id = hg.id and tgr.role_id = tg.id and tgr.template_goal_id = ga.goal_id
  union
  select hg.name,'responsible',tg.name,'None' from template_goal hg, role tg, component_goalgoal_goalassociation ga, template_goal_responsibility tgr where ga.component_id = cId and tgr.template_goal_id = hg.id and tgr.role_id = tg.id and tgr.template_goal_id = ga.subgoal_id;
end
//

create procedure componentAttackSurfaceMetric(in cName text)
begin
  declare cId int;
  declare stValue int;
  declare arValue int;
  declare derValue float default 0;
  declare done int default 0;
  declare derCursor cursor for select st.value,ar.value from surface_type st, access_right ar, component_asset ca, template_asset ta where ca.component_id = cId and ca.asset_id = ta.id and ta.surface_type_id = st.id and ta.access_right_id = ar.id;
  declare continue handler for not found set done = 1;

  select id into cId from component where name = cName;

  set done = 0;
  open derCursor;
  der_loop: loop
    fetch derCursor into stValue,arValue;
    if done = 1
    then
      leave der_loop;
    end if;
    set derValue = derValue + (stValue / arValue);
  end loop der_loop;
  close derCursor;

  select derValue;
end
//

create procedure componentGoalModel(in componentName text)
begin
  declare cId int;

  select id into cId from component where name = componentName;
  select -1 id, '' environment,hg.name goal_name,'goal' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,'0' alternative_id,ga.rationale from component_goalgoal_goalassociation ga, template_goal hg, reference_type rt, template_goal tg where ga.component_id = cId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id
  union
  select -1 id, '' environment, hg.name goal_name,'goal' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'None' rationale from template_goal hg, role tg, component_goalgoal_goalassociation ga, template_goal_responsibility tgr where ga.component_id = cId and tgr.template_goal_id = hg.id and tgr.role_id = tg.id and tgr.template_goal_id = ga.goal_id
  union
  select -1 id, '' environment, hg.name goal_name,'goal' goal_dim,'responsible' ref_type,tg.name subgoal_name,'role' subgoal_dim,'0' alternative_id,'None' rationale from template_goal hg, role tg, component_goalgoal_goalassociation ga, template_goal_responsibility tgr where ga.component_id = cId and tgr.template_goal_id = hg.id and tgr.role_id = tg.id and tgr.template_goal_id = ga.subgoal_id;
end
//

create procedure add_template_goal_responsibility(goalId int, roleName text)
begin
  declare roleId int;
  select id into roleId from role where name = roleName;
  insert into template_goal_responsibility(template_goal_id,role_id) values (goalId,roleId);
end
//

create procedure templateGoalResponsibilities(in tgId int)
begin
  select r.name from template_goal_responsibility tgr, role where tgr.goal_id = tgId and tgr.role_id = r.id;
end
//

create procedure importTemplateAsset(in assetName text, inout assetId int)
begin
  declare taId int;
  declare shortCode varchar(20);
  declare assetDesc varchar(1000);
  declare assetSig varchar(1000);
  declare assetType varchar(50);
  declare ifName varchar(255);
  declare ifTypeId int;
  declare ifType varchar(50);
  declare arName varchar(50);
  declare pName varchar(50);
  declare done int default 0;
  declare ifCursor cursor for select i.name, tai.required_id, ar.name, p.name from template_asset_interface tai, interface i, access_right ar, privilege p where tai.template_asset_id = taId and tai.interface_id = i.id and tai.access_right_id = ar.id and tai.privilege_id = p.id;
  declare continue handler for not found set done = 1;

  select id into taId from template_asset where name = assetName;
  call newId1(assetId);
  select short_code into shortCode from template_asset where id = taId;
  select description into assetDesc from template_asset where id = taId;
  select significance into assetSig from template_asset where id = taId;
  select at.name into assetType from template_asset ta, asset_type at where ta.id = taId and ta.asset_type_id = at.id;

  call addAsset(assetId,assetName,shortCode,assetDesc,assetSig,assetType,0,'None');

  set done = 0;
  open ifCursor;
  if_loop: loop
    fetch ifCursor into ifName,ifTypeId,arName,pName;
    if done = 1
    then
      leave if_loop;
    end if;

    if ifTypeId = 1
    then
      set ifType = 'required';
    else
      set ifType = 'provided';
    end if;
    call addInterface(assetName,ifName,ifType,arName,pName,'asset');
    set done = 0;
  end loop if_loop;
  close ifCursor;
end
//

create procedure componentGoalAssets(in cvName text, in goalName text)
begin
  declare cvId int;
  declare reqId int;

  select id into cvId from component_view where name = cvName;
  if goalName != ''
  then
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component_template_goal ctg, template_goal_concern tgc, template_goal tg, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.head_id = ta.id and ca.head_id = tgc.template_asset_id and tgc.template_goal_id = tg.id and tg.name = goalName and tgc.template_goal_id = ctg.template_goal_id and ctg.component_id = ca.component_id and ca.component_id = c.id
    union
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component_template_goal ctg, template_goal_concern tgc, template_goal tg, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.tail_id = ta.id and ca.tail_id = tgc.template_asset_id and tgc.template_goal_id = tg.id and tg.name = goalName and tgc.template_goal_id = ctg.template_goal_id and ctg.component_id = ca.component_id and ca.component_id = c.id;
  else
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.head_id = ta.id and ca.component_id = c.id
    union
    select ta.name,c.name from component_classassociation ca, component_view_component cvc, template_asset ta, component c where cvc.component_view_id = cvId and cvc.component_id = ca.component_id and ca.tail_id = ta.id and ca.component_id = c.id;
  end if;
end
//

create procedure importTemplateAssetIntoEnvironment(in assetName text, in envName text)
begin
  declare taId int;
  declare assetId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);


  select id into taId from template_asset where name = assetName;
  select property_value_id into cProperty from template_asset_property where template_asset_id = taId and property_id = 0;
  select property_value_id into iProperty from template_asset_property where template_asset_id = taId and property_id = 1;
  select property_value_id into avProperty from template_asset_property where template_asset_id = taId and property_id = 2;
  select property_value_id into acProperty from template_asset_property where template_asset_id = taId and property_id = 3;
  select property_value_id into anProperty from template_asset_property where template_asset_id = taId and property_id = 4;
  select property_value_id into panProperty from template_asset_property where template_asset_id = taId and property_id = 5;
  select property_value_id into unlProperty from template_asset_property where template_asset_id = taId and property_id = 6;
  select property_value_id into unoProperty from template_asset_property where template_asset_id = taId and property_id = 7;

  select property_rationale into cRationale from template_asset_property where template_asset_id = taId and property_id = 0;
  select property_rationale into iRationale from template_asset_property where template_asset_id = taId and property_id = 1;
  select property_rationale into avRationale from template_asset_property where template_asset_id = taId and property_id = 2;
  select property_rationale into acRationale from template_asset_property where template_asset_id = taId and property_id = 3;
  select property_rationale into anRationale from template_asset_property where template_asset_id = taId and property_id = 4;
  select property_rationale into panRationale from template_asset_property where template_asset_id = taId and property_id = 5;
  select property_rationale into unlRationale from template_asset_property where template_asset_id = taId and property_id = 6;
  select property_rationale into unoRationale from template_asset_property where template_asset_id = taId and property_id = 7;

  call importTemplateAsset(assetName,assetId);
  call add_asset_environment(assetId,envName);
  call add_asset_properties(assetId,envName,cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty,cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale);
end
//

create procedure importTemplateAssetIntoComponent(in assetName text, in envName text, in cName text)
begin
  declare taId int;
  declare assetId int;
  declare cProperty int;
  declare iProperty int;
  declare avProperty int;
  declare acProperty int;
  declare anProperty int;
  declare panProperty int;
  declare unlProperty int;
  declare unoProperty int;
  declare cRationale varchar(4000);
  declare iRationale varchar(4000);
  declare avRationale varchar(4000);
  declare acRationale varchar(4000);
  declare anRationale varchar(4000);
  declare panRationale varchar(4000);
  declare unlRationale varchar(4000);
  declare unoRationale varchar(4000);


  select id into taId from template_asset where name = assetName;
  select property_value_id into cProperty from template_asset_property where template_asset_id = taId and property_id = 0;
  select property_value_id into iProperty from template_asset_property where template_asset_id = taId and property_id = 1;
  select property_value_id into avProperty from template_asset_property where template_asset_id = taId and property_id = 2;
  select property_value_id into acProperty from template_asset_property where template_asset_id = taId and property_id = 3;
  select property_value_id into anProperty from template_asset_property where template_asset_id = taId and property_id = 4;
  select property_value_id into panProperty from template_asset_property where template_asset_id = taId and property_id = 5;
  select property_value_id into unlProperty from template_asset_property where template_asset_id = taId and property_id = 6;
  select property_value_id into unoProperty from template_asset_property where template_asset_id = taId and property_id = 7;

  select property_rationale into cRationale from template_asset_property where template_asset_id = taId and property_id = 0;
  select property_rationale into iRationale from template_asset_property where template_asset_id = taId and property_id = 1;
  select property_rationale into avRationale from template_asset_property where template_asset_id = taId and property_id = 2;
  select property_rationale into acRationale from template_asset_property where template_asset_id = taId and property_id = 3;
  select property_rationale into anRationale from template_asset_property where template_asset_id = taId and property_id = 4;
  select property_rationale into panRationale from template_asset_property where template_asset_id = taId and property_id = 5;
  select property_rationale into unlRationale from template_asset_property where template_asset_id = taId and property_id = 6;
  select property_rationale into unoRationale from template_asset_property where template_asset_id = taId and property_id = 7;

  call importTemplateAsset(assetName,assetId);
  call add_asset_environment(assetId,envName);
  call add_asset_properties(assetId,envName,cProperty,iProperty,avProperty,acProperty,anProperty,panProperty,unlProperty,unoProperty,cRationale,iRationale,avRationale,acRationale,anRationale,panRationale,unlRationale,unoRationale);

  call situateComponentAsset(cName,assetId);
end
//

create procedure obstacleProbability(in obsId int,in envId int, out workingProbability float)
begin
  declare done int default 0;
  declare leafObsId int;
  declare leafObsProb float;
  declare calcObsProb float;
  declare andCount int;
  declare orCount int;
  declare andProb float default 0;
  declare orProb float default 0;
  declare andCursor cursor for select ga.subgoal_id from obstacleobstacle_goalassociation ga where ga.goal_id = obsId and ga.environment_id = envId and ga.ref_type_id = 0;
  declare orCursor cursor for select ga.subgoal_id from obstacleobstacle_goalassociation ga where ga.goal_id = obsId and ga.environment_id = envId and ga.ref_type_id = 1;
  declare continue handler for not found set done = 1;

  select count(subgoal_id) into andCount from obstacleobstacle_goalassociation where goal_id = obsId and environment_id = envId and ref_type_id = 0;
  if (andCount > 0)
  then
    set done = 0;
    open andCursor;
    and_loop: loop
      fetch andCursor into leafObsId;
      if done = 1
      then
        leave and_loop;
      end if;
      call obstacleProbability(leafObsId,envId,calcObsProb);
      set andProb = andProb * calcObsProb;
    end loop and_loop;
    close andCursor;
  end if;
  
  select count(subgoal_id) into orCount from obstacleobstacle_goalassociation where goal_id = obsId and environment_id = envId and ref_type_id = 1;
  if (orCount > 0)
  then
    set done = 0;
    open orCursor;
    or_loop: loop
      fetch orCursor into leafObsId;
      if done = 1
      then
        leave or_loop;
      end if;
      call obstacleProbability(leafObsId,envId,calcObsProb);
      set orProb = orProb + calcObsProb;
    end loop or_loop;
    close orCursor;
  end if;

  if (andCount = 0 and orCount = 0)
  then
    select probability into workingProbability from obstacle_definition where obstacle_id = obsId and environment_id = envId;
  else
    select probability into leafObsProb from obstacle_definition where obstacle_id = obsId and environment_id = envId;
    set workingProbability = andProb + orProb;
    if leafObsProb > workingProbability
    then
      set workingProbability = leafObsProb;
    end if;
  end if;
end
//

create procedure obstacle_probability(in obsId int, in envId int)
begin
  declare obsProb float;

  call obstacleProbability(obsId,envId,obsProb);
  select obsProb;
end
//

create procedure candidateGoalObstacles(in cvName text, in envName text)
begin
  declare cvId int;
  declare envId int;
  declare obsId int;
  declare obsName varchar(100);
  declare goalName varchar(255);
  declare obsProb float default 0.0;
  declare done int default 0;
  declare tgCursor cursor for select tg.name from template_goal tg, component_template_goal ctg, component_view_component cvc where cvc.component_view_id = cvId and cvc.component_id = ctg.component_id and ctg.template_goal_id = tg.id;
  declare obsCursor cursor for select distinct o.id,o.name from obstacle o, obstacle_concern oc, template_goal_responsibility tgr, role gr, obstaclerole_goalassociation ga, role obr, asset a, template_goal_concern tgc, template_asset ta, template_goal tg where tg.name = goalName and tg.id = tgc.template_goal_id and tgc.template_asset_id = ta.id and ta.name = a.name and a.id = oc.asset_id and oc.environment_id = envId and oc.obstacle_id = o.id and oc.obstacle_id = ga.goal_id and oc.environment_id = ga.environment_id and ga.subgoal_id = obr.id and obr.name = gr.name and gr.id = obr.id and obr.id = tgr.role_id and tgr.template_goal_id = tg.id;
  declare continue handler for not found set done = 1;

  drop table if exists temp_goalobstacle;
  create temporary table temp_goalobstacle (goal_name varchar(255), obstacle_name varchar(100), probability float);

  select id into cvId from component_view where name = cvName;
  select id into envId from environment where name = envName;

  set done = 0;

  open tgCursor;
  tg_loop: loop
    fetch tgCursor into goalName;
    if done = 1
    then
      leave tg_loop;
    end if;
  
    open obsCursor;
    obs_loop: loop
      fetch obsCursor into obsId,obsName;
      if done = 1
      then
        leave obs_loop;
      end if;
      set obsProb = 0.0;
      call obstacleProbability(obsId,envId,obsProb);
      insert into temp_goalobstacle(goal_name,obstacle_name,probability) values (goalName,obsName,obsProb);
    end loop obs_loop; 
    close obsCursor;

    set done = 0;
  end loop tg_loop;
  select goal_name, obstacle_name from temp_goalobstacle order by probability;
end
//

create procedure redmineArchitecture()
begin
  declare cId int;
  declare cName varchar(255);
  declare cDesc varchar(255);
  declare ifName varchar(255);
  declare reqId int;
  declare ifType varchar(20);
  declare arName varchar(50);
  declare prName varchar(50);
  declare taName varchar(50);
  declare taType varchar(50);
  declare taDesc varchar(1000);
  declare suName varchar(50);
  declare cgId int;
  declare cgName varchar(255);
  declare cgDesc varchar(4000);
  declare apId int;
  declare cgConcerns varchar(1000);
  declare cgResponsibilities varchar(1000);
  declare concernName varchar(50);
  declare respName varchar(255);
  declare apName varchar(255);
  declare apDesc varchar(255);
  declare connName varchar(255);
  declare fromName varchar(255);
  declare fromRole varchar(255);
  declare fromIf varchar(255);
  declare toName varchar(255);
  declare toRole varchar(255);
  declare toIf varchar(255);
  declare connAsset varchar(50);
  declare caCount int;
  declare cgCount int;
  declare metricName varchar(50);
  declare metricDesc varchar(1000);
  declare metricValue int;
  declare buf varchar(90000000) default '';

  declare done int default 0;
  declare cCursor cursor for select id,name,description from component order by 2;
  declare cifCursor cursor for select i.name,ci.required_id,ar.name,pr.name from component_interface ci, interface i, access_right ar, privilege pr where ci.component_id = cId and ci.interface_id = i.id and ci.access_right_id = ar.id and ci.privilege_id = pr.id;
  declare caCursor cursor for select ta.name,at.name,ta.description,su.name,ar.name from component_asset ca, template_asset ta, asset_type at, surface_type su, access_right ar where ca.component_id = cId and ca.asset_id = ta.id and ta.asset_type_id = at.id and ta.surface_type_id = su.id and ta.access_right_id = ar.id order by 1;
  declare cgCursor cursor for select tg.id,tg.name,tg.definition from template_goal tg, component_template_goal ctg where ctg.component_id = cId and ctg.template_goal_id = tg.id order by 2;
  declare cgConcernCursor cursor for select ifnull(ta.name,'None') from template_goal_concern tgc, template_asset ta where tgc.template_goal_id = cgId and tgc.template_asset_id = ta.id order by 1; 
  declare cgRespCursor cursor for select ifnull(r.name,'None') from template_goal_responsibility tgr, role r where tgr.template_goal_id = cgId and tgr.role_id = r.id order by 1;
  declare apCursor cursor for select id,name,synopsis from component_view;
  declare apcCursor cursor for select c.name from component_view_component cvc, component c where cvc.component_view_id = apId and cvc.component_id = c.id order by 1;
  declare connCursor cursor for select c.name,fc.name,c.from_role,fif.name,tc.name,c.to_role,tif.name,ta.name,pr.name,ar.name from connector c, component fc, component tc, interface fif, interface tif, template_asset ta, protocol pr, access_right ar where c.component_view_id = apId and c.from_component_id = fc.id and c.from_interface_id = fif.id and c.to_component_id = tc.id and c.to_interface_id = tif.id and c.template_asset_id = ta.id and c.protocol_id = pr.id and c.access_right_id = ar.id order by 1;
  declare accessRightCursor cursor for select name, description, value from access_right order by 3,1;
  declare protocolCursor cursor for select name, description, value from protocol order by 3,1;
  declare privilegeCursor cursor for select name, description, value from privilege order by 3,1;
  declare surfaceTypeCursor cursor for select name, description, value from surface_type order by 3,1;

  declare continue handler for not found set done = 1;

  drop table if exists temp_architecture;
  create temporary table temp_architecture (name varchar(200),artifact_type varchar(50),text varchar(90000000));

  set done = 0;

  set buf = concat('h1. Components\n\nThis section was automatically generated based on the contents of the webinos WP 2 git repository at http://dev.webinos.org/git/wp2.git.\n\n');
  open cCursor;
  c_loop: loop
    fetch cCursor into cId,cName,cDesc;
    if done = 1
    then
      leave c_loop;
    end if;
    set buf = concat(buf,'h2. ',cName,'\n\n','h3. Description\n\n',cDesc,'\n\nh3. Interfaces\n\n|_.Interface |_.Type |_.Access Right |_.Privilege |\n');
    open cifCursor;
    cif_loop: loop
      fetch cifCursor into ifName,reqId,arName,prName;
      if done = 1
      then
        leave cif_loop;
      end if;
      if reqId = 1
      then
        set ifType = 'provided';
      else
        set ifType = 'required';
      end if;
      set buf = concat(buf,'| ',ifName,' | ',ifType,' | ',arName,' | ',prName,' |\n');
    end loop cif_loop;
    close cifCursor;
    set done = 0;

    set buf = concat(buf,'\nh3. Structure\n\n');

    select count(ta.name) into caCount from component_asset ca, template_asset ta, asset_type at, surface_type su, access_right ar where ca.component_id = cId and ca.asset_id = ta.id and ta.asset_type_id = at.id and ta.surface_type_id = su.id and ta.access_right_id = ar.id;
    if caCount = 0
    then
      set buf = concat(buf,'None\n\n');
    else
      set buf = concat(buf,'!{width:1000px}',replace(cName,' ','_'),'AssetModel.jpg!\n\n|_.Name |_.Type |_.Description |_.Surface |_.Access Rights |\n');
      open caCursor;
      ca_loop: loop
        fetch caCursor into taName, taType, taDesc, suName, arName;
        if done = 1
        then
          leave ca_loop;
        end if;
        set buf = concat(buf,'| ',taName,' | ',taType,' | ',taDesc,' | ',suName,' | ',arName,' |\n');
      end loop ca_loop;
      close caCursor;
      set done = 0;
    end if;

    
    set buf = concat(buf,'\nh3. Component Requirements\n\n');
    select count(tg.id) into cgCount from template_goal tg, component_template_goal ctg where ctg.component_id = cId and ctg.template_goal_id = tg.id;
    if cgCount = 0
    then
      set buf = concat(buf,'None\n\n');
    else
      if cgCount > 1
      then
        set buf = concat(buf,'!{width:1000px}',replace(cName,' ','_'),'GoalModel.jpg!\n\n');
      end if;
      set buf = concat(buf,'|_.Name |_.Definition |_.Concerns |_.Responsibility |\n'); 
      open cgCursor;
      cg_loop: loop
        fetch cgCursor into cgId, cgName, cgDesc;
        if done = 1
        then
          leave cg_loop;
        end if;
        set cgConcerns = '';
        open cgConcernCursor;
        cgConcern_loop: loop
          fetch cgConcernCursor into concernName;
          if done = 1
          then
            leave cgConcern_loop;
          end if;
          if cgConcerns != ''
          then
            set cgConcerns = concat(cgConcerns,', ');
          end if;
          set cgConcerns = concat(cgConcerns,concernName);
        end loop cgConcern_loop;
        close cgConcernCursor;
        set done = 0;
        if cgConcerns = ''
        then
          set cgConcerns = 'None';
        end if;

        set cgResponsibilities = '';
        open cgRespCursor;
        cgResp_loop: loop
          fetch cgRespCursor into respName;
          if done = 1
          then
            leave cgResp_loop;
          end if;
          if cgResponsibilities != ''
          then
            set cgResponsibilities = concat(cgResponsibilities,', ');
          end if;
          set cgResponsibilities = concat(cgResponsibilities,respName);
        end loop cgResp_loop;
        close cgRespCursor;
        set done = 0;
        if cgResponsibilities = ''
        then
          set cgResponsibilities = 'None';
        end if;


        set buf = concat(buf,'| ',cgName,' | ',cgDesc,' | ',cgConcerns,' | ',cgResponsibilities,' |\n');
      end loop cg_loop;
      close cgCursor;
      set done = 0;
    end if;

    insert into temp_architecture (name,artifact_type,text) values(cName,'component',ifnull(buf,''));
    set buf = '';
  end loop c_loop;
  close cCursor;
  set done = 0;

  set buf = 'h1. Attack Surface metrics\n\nh2. Access Rights\n\nThese metrics define the access rights necessary for a subject to make use of a protocol, privilege level, or asset.\n\n|_.Name|_.Description|_.Value|\n';
  open accessRightCursor;
  accessRight_loop: loop
    fetch accessRightCursor into metricName,metricDesc,metricValue;
    if done = 1
    then
      leave accessRight_loop;
    end if;
    set buf = concat(buf,'| ',metricName,' | ',metricDesc,' | ',metricValue,' |\n');
  end loop accessRight_loop;
  close accessRightCursor;
  set done = 0;

  set buf = concat(buf,'\nh2. Protocols\n\nThese metrics define the protocol used in component connections.\n\n|_.Name|_.Description|_.Value|\n');
  open protocolCursor;
  protocol_loop: loop
    fetch protocolCursor into metricName,metricDesc,metricValue;
    if done = 1
    then
      leave protocol_loop;
    end if;
    set buf = concat(buf,'| ',metricName,' | ',metricDesc,' | ',metricValue,' |\n');
  end loop protocol_loop;
  close protocolCursor;
  set done = 0;

  set buf = concat(buf,'\nh2. Privileges\n\nThese metrics define the level of privilege that a component interface operates at.\n\n|_.Name|_.Description|_.Value|\n');
  open privilegeCursor;
  privilege_loop: loop
    fetch privilegeCursor into metricName,metricDesc,metricValue;
    if done = 1
    then
      leave privilege_loop;
    end if;
    set buf = concat(buf,'| ',metricName,' | ',metricDesc,' | ',metricValue,' |\n');
  end loop privilege_loop;
  close privilegeCursor;
  set done = 0;

  set buf = concat(buf,'\nh2. Surface Types\n\nThese metrics define the type of surface used by component assets.\n\n|_.Name|_.Description|_.Value|\n');
  open surfaceTypeCursor;
  surfaceType_loop: loop
    fetch surfaceTypeCursor into metricName,metricDesc,metricValue;
    if done = 1
    then
      leave surfaceType_loop;
    end if;
    set buf = concat(buf,'| ',metricName,' | ',metricDesc,' | ',metricValue,' |\n');
  end loop surfaceType_loop;
  close surfaceTypeCursor;

  set buf = concat(buf,'\nh2. Damage potential for untrusted asset surface: Colour codes\n\n!{width:200px}DERColour.jpg!\n\n');
  set done = 0;
  insert into temp_architecture (name,artifact_type,text) values('metrics','metrics',ifnull(buf,''));

  set buf = 'h1. Architectural Patterns\n\nThis section was automatically generated based on the contents of the webinos WP 2 git repository at http://dev.webinos.org/git/wp2.git.\n\n';

  open apCursor;
  ap_loop: loop
    fetch apCursor into apId,apName,apDesc;
    if done = 1
    then
      leave ap_loop;
    end if;
    set buf = concat(buf,'h2. ',apName,'\n\n!{width:1000px}',replace(apName,' ','_'),'ComponentModel.jpg!\n\nh3. Synopsis\n\n',apDesc,'\n\nh3. Components\n\n');

    open apcCursor;
    apc_loop: loop
      fetch apcCursor into cName;
      if done = 1
      then
        leave apc_loop;
      end if;
      set buf = concat(buf,'* ',cName,'\n');
    end loop apc_loop;
    close apcCursor;
    set done = 0;
    set buf = concat(buf,'\nh3. Connectors\n\n|_.From |_.Role (Interface) |_.To |_.Role (Interface) |_.Protocol |_.Access Right |\n');


    open connCursor;
    conn_loop: loop
      fetch connCursor into connName,fromName,fromRole,fromIf,toName,toRole,toIf,connAsset,prName,arName;
      if done = 1
      then
        leave conn_loop;
      end if;
      set buf = concat(buf,'| ',fromName,' | ',fromRole,' (',fromIf,') | ',toName,' | ',toRole,' (',toIf,') | ',prName,' | ',arName,' |\n');
    end loop conn_loop;
    close connCursor;
    set done = 0;
    set buf = concat(buf,'\n');
    insert into temp_architecture (name,artifact_type,text) values(apName,'architectural_pattern',ifnull(buf,''));
    set buf = '';
  end loop ap_loop;
  close apCursor;

  select name,artifact_type,text from temp_architecture;
end
//

create procedure riskObstacleTree(in riskName text, in envName text, in suppressOutput int)
begin
  declare riskId int;
  declare obsId int;
  declare soId int;
  declare envId int;
  declare done int default 0;
  declare rootCount int;
  declare obsCursor cursor for select goal_id from obstacleobstacle_goalassociation where environment_id = envId and subgoal_id in 
    (select ga.goal_id from obstaclevulnerability_goalassociation ga, risk r, environment_vulnerability ev where r.id = riskId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = envId and ev.vulnerability_id = ga.subgoal_id and ev.environment_id = ga.environment_id
     union
     select ga.goal_id from obstaclethreat_goalassociation ga, risk r, environment_threat et where r.id = riskId and r.threat_id = et.threat_id and et.environment_id = envId and et.threat_id = ga.subgoal_id and et.environment_id = ga.environment_id);

  declare soCursor cursor for select subgoal_id from obstacleobstacle_goalassociation where goal_id = obsId and environment_id = envId;
  declare rootCursor cursor for select obstacle_id from temp_rootobstacle;
  declare continue handler for not found set done = 1;

  drop table if exists temp_rootobstacle;
  create temporary table temp_rootobstacle (obstacle_id int,obstacle_name varchar(200));

  drop table if exists temp_obstacletree;
  create table temp_obstacletree (id int,environment varchar(50),goal_name varchar(200), goal_dim varchar(50), ref_type varchar(50), subgoal_name varchar(200), subgoal_dim varchar(50), alternative_id int, rationale varchar(1000));

  select id into riskId from risk where name = riskName;
  select id into envId from environment where name = envName;

  select count(goal_id) into rootCount from obstacleobstacle_goalassociation where environment_id = envId and subgoal_id in
    (select ga.goal_id from obstaclevulnerability_goalassociation ga, risk r, environment_vulnerability ev where r.id = riskId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = envId and ev.vulnerability_id = ga.subgoal_id and ev.environment_id = ga.environment_id
     union
     select ga.goal_id from obstaclethreat_goalassociation ga, risk r, environment_threat et where r.id = riskId and r.threat_id = et.threat_id and et.environment_id = envId and et.threat_id = ga.subgoal_id and et.environment_id = ga.environment_id);
    
  if rootCount = 0
  then
    insert into temp_rootobstacle(obstacle_id,obstacle_name) select id,name from obstacle where id in 
    (select ga.goal_id from obstaclevulnerability_goalassociation ga, risk r, environment_vulnerability ev where r.id = riskId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = envId and ev.vulnerability_id = ga.subgoal_id and ev.environment_id = ga.environment_id
     union
     select ga.goal_id from obstaclethreat_goalassociation ga, risk r, environment_threat et where r.id = riskId and r.threat_id = et.threat_id and et.environment_id = envId and et.threat_id = ga.subgoal_id and et.environment_id = ga.environment_id);
  end if;

  open obsCursor;
  obs_loop: loop
    fetch obsCursor into obsId;
    if done = 1
    then
      leave obs_loop;
    end if;
    call obstacleParents(obsId,envId);
    set done = 0;
  end loop obs_loop;
  close obsCursor;
  set done = 0;

  open rootCursor;
  root_loop: loop
    fetch rootCursor into obsId;
    if done = 1
    then
      leave root_loop;
    end if;

    insert into temp_obstacletree (id,environment,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale)
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'obstacle' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacleobstacle_goalassociation ga, environment e, obstacle hg, reference_type rt, obstacle tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = envId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'role' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerole_goalassociation ga, environment e, obstacle hg, reference_type rt, role tg where ga.environment_id = envId and ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'goal' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclegoal_goalassociation ga, environment e, obstacle hg, reference_type rt, goal tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = envId
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,tg.name subgoal_name,'domainproperty' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstacledomainproperty_goalassociation ga, environment e, obstacle hg, reference_type rt, domainproperty tg where ga.goal_id = obsId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and ga.environment_id = e.id and ga.environment_id = envId
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclethreat_goalassociation ot, risk ri, response re, response_goal rg, environment_obstacle eo, environment_threat et, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ot.goal_id = obsId and et.environment_id = envId and et.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and et.environment_id = e.id and et.threat_id = ot.subgoal_id and et.environment_id = ot.environment_id and ot.goal_id = hg.id and ot.subgoal_id = ri.threat_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select -1 id,e.name environment,hg.name goal_name,'obstacle' goal_dim,'resolve' ref_type,tg.name subgoal_name, 'goal' subgoal_dim,'0' alternative_id,concat('Mitigates ',ri.name) rationale from obstaclevulnerability_goalassociation ov, risk ri, response re, response_goal rg, environment_obstacle eo, environment_vulnerability ev, environment_response er, environment_goal eg, environment e, obstacle hg, goal tg where ov.goal_id = obsId and ev.environment_id = envId and ev.environment_id = eo.environment_id and eo.environment_id = er.environment_id and er.environment_id = eg.environment_id and eg.goal_id = tg.id and er.response_id = re.id and ev.environment_id = e.id and ev.vulnerability_id = ov.subgoal_id and ev.environment_id = ov.environment_id and ov.goal_id = hg.id and ov.subgoal_id = ri.vulnerability_id and ri.id = re.risk_id and re.id = rg.response_id and rg.goal_id = tg.id and eo.obstacle_id = hg.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, asset_requirement rmr, asset rm where ga.goal_id = obsId and ga.environment_id = envId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and ga.environment_id = e.id and tg.id = rmr.requirement_id and rmr.asset_id = rm.id
    union
    select ga.id id,e.name environment,hg.name goal_name,'obstacle' goal_dim,rt.name ref_type,concat(rm.short_code,'-',tg.label) subgoal_name,'requirement' subgoal_dim,ga.alternative_id alternative_id,ga.rationale from obstaclerequirement_goalassociation ga, environment e, obstacle hg, reference_type rt, requirement tg, environment_requirement rmr, environment rm where ga.goal_id = obsId and ga.environment_id = envId and ga.goal_id = hg.id and ga.ref_type_id = rt.id and ga.subgoal_id = tg.id and tg.version = (select max(i.version) from requirement i where i.id = tg.id) and rmr.environment_id = e.id and tg.id = rmr.requirement_id and rmr.environment_id = rm.id and rmr.environment_id = ga.environment_id; 

    set done = 0;
    open soCursor;
    so_loop: loop
      fetch soCursor into soId;
      if done = 1
      then
        leave so_loop;
      end if;
      call subObstacleTree(soId,envId);
    end loop so_loop;
    close soCursor;
    set done = 0;
  end loop root_loop;
  close rootCursor;
  
  if suppressOutput != 1
  then
    select distinct -1,envName,goal_name,goal_dim,ref_type,subgoal_name,subgoal_dim,alternative_id,rationale from temp_obstacletree;
  end if;

end
//

create procedure obstacleParents(in leafObsId int, in envId int)
begin
  declare obsId int;
  declare done int default 0;
  declare rootCount int;
  declare obsCursor cursor for select goal_id from obstacleobstacle_goalassociation where environment_id = envId and subgoal_id = leafObsId;
  declare continue handler for not found set done = 1;

  select count(goal_id) into rootCount from obstacleobstacle_goalassociation where environment_id = envId and subgoal_id = leafObsId;
  if rootCount = 0
  then
    insert into temp_rootobstacle(obstacle_id,obstacle_name) select id,name from obstacle where id = leafObsId;
  end if;

  open obsCursor;
  obs_loop: loop
    fetch obsCursor into obsId;
    if done = 1
    then
      leave obs_loop;
    end if;
    call obstacleParents(obsId,envId);
    set done = 0;
  end loop obs_loop;
  close obsCursor;
end
//

create procedure redmineAttackPatterns()
begin
  declare riskId int;
  declare riskName varchar(200);
  declare threatId int;
  declare vulId int;
  declare envId int;
  declare envName varchar(50);
  declare intentTxt varchar(4000);
  declare tpName varchar(50);
  declare tpValue varchar(50);
  declare tpRationale varchar(4000);
  declare thrName varchar(200);
  declare thrRef varchar(100);
  declare thrObsName varchar(100);
  declare vulName varchar(200);
  declare vulRef varchar(100);
  declare vulObsName varchar(100);
  declare attackerId int;
  declare attackerName varchar(50);
  declare motiveName varchar(50);
  declare capName varchar(50);
  declare capValue varchar(50);
  declare assetName varchar(50);
  declare implDesc varchar(5000);
  declare rotObsName varchar(200);
  declare isFirst int default 1;
  declare obsName varchar(100);
  declare obsCat varchar(50);
  declare obsDef varchar(1000);
  declare buf varchar(90000000) default '';
  declare done int default 0;
  declare apCursor cursor for select id,name,threat_id,vulnerability_id,intent,environment_id from risk order by 1;
  declare tpCursor cursor for select sp.name,spv.name,tp.property_rationale from threat_property tp, security_property sp, security_property_value spv where tp.threat_id = threatId and tp.environment_id = envId and tp.property_value_id != 0 and tp.property_id = sp.id and tp.property_value_id = spv.id order by 1;
  declare attackerCursor cursor for select a.id,a.name from threat_attacker ta, attacker a where ta.threat_id = threatId and ta.environment_id = envId and ta.attacker_id = a.id order by 1;
  declare motiveCursor cursor for select m.name from attacker_motivation am, motivation m where am.attacker_id = attackerId and am.environment_id = envId and am.motivation_id = m.id order by 1;
  declare capCursor cursor for select c.name,spv.name from attacker_capability ac, capability c, security_property_value spv where ac.attacker_id = attackerId and ac.environment_id = envId and ac.capability_id = c.id and ac.capability_value_id = spv.id order by 1;
  declare targetCursor cursor for select a.name from asset_threat at, asset a where at.threat_id = threatId and at.environment_id = envId and at.asset_id = a.id;
  declare exploitCursor cursor for select a.name from asset_vulnerability av, asset a where av.vulnerability_id = vulId and av.environment_id = envId and av.asset_id = a.id;
  declare rotObsCursor cursor for 
    select goal_name from temp_obstacletree where goal_dim = 'obstacle'
    union
    select subgoal_name from temp_obstacletree where subgoal_dim = 'obstacle' order by 1;
  declare apObsCursor cursor for 
    select o.name,oct.name,od.definition from obstacle o, obstacle_definition od, obstacle_category oc, obstacle_category_type oct, temp_obstacletree tot where od.environment_id = envId and od.obstacle_id = o.id and o.name = tot.goal_name and tot.goal_dim = 'obstacle' and od.obstacle_id = oc.obstacle_id and od.environment_id = oc.environment_id and oc.obstacle_category_type_id = oct.id
    union
    select o.name,oct.name,od.definition from obstacle o, obstacle_definition od, obstacle_category oc, obstacle_category_type oct, temp_obstacletree tot where od.environment_id = envId and od.obstacle_id = o.id and o.name = tot.subgoal_name and tot.subgoal_dim = 'obstacle' and od.obstacle_id = oc.obstacle_id and od.environment_id = oc.environment_id and oc.obstacle_category_type_id = oct.id order by 1;


  declare continue handler for not found set done = 1;

  drop table if exists temp_attackpattern;
  create temporary table temp_attackpattern (name varchar(200),environment_name varchar(50), content_type varchar(50), text varchar(90000000));

  open apCursor;
  ap_loop: loop
    fetch apCursor into riskId,riskName,threatId,vulId,intentTxt,envId;
    if done = 1
    then
      leave ap_loop;
    end if;
    select name into envName from environment where id = envId;
    if envName is not null
    then
      set buf = concat('h2. ',riskName,'\n\nh3. Intent\n\n',intentTxt,'\n\nh3. Motivation\n\n|_.Security Goal |_.Value |_.Description |\n'); 
      open tpCursor;
      tp_loop: loop
        fetch tpCursor into tpName,tpValue,tpRationale;
        if done = 1
        then
          leave tp_loop;
        end if;
        set buf = concat(buf,'| ',tpName,' | ',tpValue,' | ',tpRationale,' |\n'); 
      end loop tp_loop; 
      close tpCursor; 
      set done = 0;
      select name into thrName from threat where id = threatId;
      select reference into thrRef from threat_directory where name = thrName limit 1;
      select name into vulName from vulnerability where id = vulId;
      select reference into vulRef from vulnerability_directory where name = vulName limit 1;

      set thrObsName = null;
      set vulObsName = null;

      select o.name into thrObsName from obstacle o, obstaclethreat_goalassociation ga where ga.environment_id = envId and ga.goal_id = o.id and ga.subgoal_id = threatId;
      if thrObsName is null
      then
        set thrObsName = 'None';
      end if;
      set done = 0;

      select o.name into vulObsName from obstacle o, obstaclevulnerability_goalassociation ga where ga.environment_id = envId and ga.goal_id = o.id and ga.subgoal_id = vulId;
      if vulObsName is null
      then
        set vulObsName = 'None';
      end if;
      set done = 0;

      set buf = concat(buf,'\nh3. Structure\n\n| Attack: ',thrName,' | Origin: ',thrRef,' | Obstacle: ',thrObsName,' |\n| Exploit: ',vulName,' | Origin: ',vulRef,' | Obstacle: ',vulObsName,' |\n\nh3. Participants\n\n');
      set buf = concat(buf,'|_.Attacker |_.Motives |_.Capabilities (Value) |\n');
      open attackerCursor;
      attacker_loop: loop
        fetch attackerCursor into attackerId,attackerName;
        if done = 1
        then
          leave attacker_loop;
        end if;
        set buf = concat(buf,'| ',attackerName,' | ');
        open motiveCursor;
        motive_loop: loop
          fetch motiveCursor into motiveName;
          if done = 1
          then
            leave motive_loop;
          else
            if isFirst = 1
            then  
              set isFirst = 0;
            else
              set buf = concat(buf,', '); 
            end if;
          end if;
          set buf = concat(buf,motiveName);
        end loop motive_loop;
        close motiveCursor;
        set done = 0;
        set isFirst = 1;
        set buf = concat(buf,' | ');
        open capCursor;
        cap_loop: loop
          fetch capCursor into capName,capValue;
          if done = 1
          then
            leave cap_loop;
          else
            if isFirst = 1
            then
              set isFirst = 0;
            else
              set buf = concat(buf,', '); 
            end if;
          end if;
          set buf = concat(buf,capName,'(',capValue,')');
        end loop cap_loop;
        close capCursor;
        set done = 0;
        set isFirst = 1;
        set buf = concat(buf,' |\n');
      end loop attacker_loop;
      close attackerCursor;
      set done = 0;
      set buf = concat(buf,'\nh3. Collaboration\n\n| Target | ');

      open targetCursor;
      target_loop: loop
        fetch targetCursor into assetName;
        if done = 1
        then
          leave target_loop;
        else
          if isFirst = 1
          then
            set isFirst = 0;
          else
            set buf = concat(buf,', ');
          end if;
        end if;
        set buf = concat(buf,assetName);
      end loop target_loop;
      close targetCursor;
      set done = 0;
      set isFirst = 1;
      set buf = concat(buf,' |\n| Exploit | ');

      open exploitCursor;
      exploit_loop: loop
        fetch exploitCursor into assetName;
        if done = 1
        then 
          leave exploit_loop;
        else
          if isFirst = 1
          then
            set isFirst = 0;
          else
            set buf = concat(buf,', ');
          end if;
        end if; 
        set buf = concat(buf,assetName);
      end loop exploit_loop;
      close exploitCursor;
      set done = 0;
      set isFirst = 1;
      set implDesc = '';
      select mn.narrative into implDesc from misusecase_risk mr, misusecase_narrative mn where mr.risk_id = riskId and mr.misusecase_id = mn.misusecase_id and mn.environment_id = envId;
      set buf = concat(buf,' |\n\nh3. Implementation\n\n!{width:1000px}',replace(riskName,' ','_'),'ObstacleModel.jpg!\n\n',implDesc,'\n\n');

      call riskObstacleTree(riskName,envName,1);

      set buf = concat(buf,'h3. Obstacles\n\n|_.Obstacle |_.Category |_.Definition |\n');
      open apObsCursor;
      apObs_loop: loop
        fetch apObsCursor into obsName,obsCat,obsDef;
        if done = 1
        then
          leave apObs_loop;
        end if;
        set buf = concat(buf,'| ',obsName,' | ',obsCat,' | ',obsDef,' |\n');
      end loop apObs_loop;
      close apObsCursor;
      set done = 0;
      insert into temp_attackpattern(name,environment_name,content_type,text) values(riskName,envName,'body',buf);
    end if;
  end loop ap_loop;
  close apCursor;

  select distinct name,environment_name,content_type,text from temp_attackpattern;
end
//

create procedure redmineArchitectureSummary(in envName text)
begin
  declare apId int;
  declare apName varchar(255);
  declare apSynopsis varchar(255);
  declare done int default 0;
  declare assetCount int default 0;
  declare isFirst int default 1;
  declare cName varchar(255);
  declare der_m float default 0;
  declare der_c float default 0;
  declare der_i float default 0;
  declare envId int;
  declare tvName varchar(200);
  declare apSumBuf varchar(90000000);
  declare derBuf varchar(90000000);
  declare waBuf varchar(90000000);
  declare apCursor cursor for select id,name,synopsis from component_view order by 2;
  declare componentCursor cursor for select c.name from component_view_component cvc, component c where cvc.component_view_id = apId and cvc.component_id = c.id order by 1;
  declare apVulCursor cursor for select distinct v.name from component c, component_asset ca, asset a, template_asset ta, asset_vulnerability av, vulnerability v where ca.component_id = c.id and ca.component_id in (select component_id from component_view_component where component_view_id = apId) and ca.asset_id = ta.id and ta.name = a.name and a.id = av.asset_id and av.environment_id = envId and av.vulnerability_id = v.id order by 1;
  declare apThrCursor cursor for select distinct t.name from component c, component_asset ca, asset a, template_asset ta, asset_threat at, threat t where ca.component_id = c.id and ca.component_id in (select component_id from component_view_component where component_view_id = apId) and ca.asset_id = ta.id and ta.name = a.name and a.id = at.asset_id and at.environment_id = envId and at.threat_id = t.id order by 1;
  declare continue handler for not found set done = 1;

  drop table if exists temp_architecturesummary;
  create temporary table temp_architecturesummary (name varchar(200),text varchar(90000000));

  select id into envId from environment where name = envName limit 1;

  set apSumBuf = '|_.Architectural pattern |_.Description |_.Components|_.No. of assets|\n';
  set derBuf = '|_.Architectural pattern |_.DER_m |_.DER_c|_.DER_i|\n';
  set waBuf = '|_.Architectural pattern |_.Threats |_.Vulnerabilities|_.Mitigation Summary|\n';

  open apCursor;
  ap_loop: loop
    fetch apCursor into apId,apName,apSynopsis;
    if done = 1
    then
      leave ap_loop;
    end if; 

    set apSumBuf = concat(apSumBuf,'| ',apName,' | ',apSynopsis,' | ');
    set waBuf = concat(waBuf,'| ',apName,' | ');

    call derRatio_entryExitPoints(apId,der_m);
    call derRatio_channels(apId,der_c);
    call derRatio_untrustedSurface(apId,der_i);
    set derBuf = concat(derBuf,'| ',apName,' | ',der_m,' | ',der_c,' | ',der_i,' |\n');
    set der_m = 0;
    set der_c = 0;
    set der_i = 0;

    open componentCursor;
    component_loop: loop
      fetch componentCursor into cName;
      if done = 1
      then
        leave component_loop;
      else
        if isFirst = 1
        then
          set isFirst = 0;
        else
          set apSumBuf = concat(apSumBuf,', ');
        end if;
      end if;
      set apSumBuf = concat(apSumBuf,cName);
    end loop component_loop;
    set done = 0;
    set isFirst = 1;
    set apSumBuf = concat(apSumBuf,' | ');

    select count(distinct ca.asset_id) into assetCount from component_asset ca, component_view_component cvc where cvc.component_view_id = apId and cvc.component_id = ca.component_id;
    set apSumBuf = concat(apSumBuf,assetCount,' |\n');
    set done = 0;
    close componentCursor;

    open apThrCursor;
    apThr_loop: loop
      fetch apThrCursor into tvName;
      if done = 1
      then
        leave apThr_loop;
      else
        if isFirst = 1
        then
          set isFirst = 0;
        else
          set waBuf = concat(waBuf,', ');
        end if;
      end if;
      set waBuf = concat(waBuf,tvName);
    end loop apThr_loop;
    close apThrCursor;
    set done = 0;
    set isFirst = 1;
    set waBuf = concat(waBuf,' | ');

    open apVulCursor;
    apVul_loop: loop
      fetch apVulCursor into tvName;
      if done = 1
      then
        leave apVul_loop;
      else
        if isFirst = 1
        then
          set isFirst = 0;
        else
          set waBuf = concat(waBuf,', ');
        end if;
      end if;
      set waBuf = concat(waBuf,tvName);
    end loop apVul_loop;
    close apVulCursor;
    set done = 0;
    set isFirst = 1;
    set waBuf = concat(waBuf,' | Summarise mitigations here |\n');

  end loop ap_loop;
  close apCursor;
  insert into temp_architecturesummary(name,text) values('summary',apSumBuf);
  insert into temp_architecturesummary(name,text) values('DER',derBuf);
  insert into temp_architecturesummary(name,text) values('weakness_analysis',waBuf);

  select name,text from temp_architecturesummary;
end
//

create procedure redmineAttackPatternsSummary(in envName text)
begin
  declare envId int;
  declare rootCount int;
  declare branchCount int;
  declare obsId int;
  declare soId int;
  declare boId int;
  declare obsName varchar(200);
  declare isFirst int default 1;
  declare riskId int;
  declare riskName varchar(200);
  declare thrName varchar(200);
  declare vulName varchar(200);
  declare buf varchar(90000000);
  declare done int default 0;
  declare obsCursor cursor for select goal_id from obstacleobstacle_goalassociation where environment_id = envId and subgoal_id in 
     (select ga.goal_id from obstaclethreat_goalassociation ga, risk r, environment_threat et where r.id = riskId and r.threat_id = et.threat_id and et.environment_id = envId and et.threat_id = ga.subgoal_id and et.environment_id = ga.environment_id
      union
      select ga.goal_id from obstaclevulnerability_goalassociation ga, risk r, environment_vulnerability ev where r.id = riskId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = envId and ev.vulnerability_id = ga.subgoal_id and ev.environment_id = ga.environment_id);
  declare atkPCursor cursor for select r.id,r.name,t.name,v.name from risk r, threat t, vulnerability v where r.threat_id = t.id and r.vulnerability_id = v.id order by 2;
  declare soCursor cursor for select subgoal_id from obstacleobstacle_goalassociation where goal_id = obsId and environment_id = envId;
  declare rootCursor cursor for select obstacle_id from temp_rootobstacle;
  declare branchCursor cursor for select subgoal_id from obstacleobstacle_goalassociation where goal_id = soId and environment_id = envId;
  declare loCursor cursor for select distinct obstacle_name from temp_leafobstacle order by 1;
  declare continue handler for not found set done = 1;
 
  drop table if exists temp_rootobstacle;
  create temporary table temp_rootobstacle (obstacle_id int,obstacle_name varchar(200));
  drop table if exists temp_leafobstacle;
  create temporary table temp_leafobstacle (obstacle_name varchar(200));

  select id into envId from environment where name = envName;

  set buf = '|_.Attack Pattern |_.Attack|_.Exploit|_.Leaf obstacles|\n';
  open atkPCursor;
  atkP_loop: loop
    fetch atkPCursor into riskId,riskName,thrName,vulName;
    if done = 1
    then
      leave atkP_loop;
    end if;
    set buf = concat(buf,'| ',riskName,' | ',thrName,' | ',vulName,' | ');

    select count(goal_id) into rootCount from obstacleobstacle_goalassociation where environment_id = envId and subgoal_id in
      (select ga.goal_id from obstaclevulnerability_goalassociation ga, risk r, environment_vulnerability ev where r.id = riskId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = envId and ev.vulnerability_id = ga.subgoal_id and ev.environment_id = ga.environment_id
       union
       select ga.goal_id from obstaclethreat_goalassociation ga, risk r, environment_threat et where r.id = riskId and r.threat_id = et.threat_id and et.environment_id = envId and et.threat_id = ga.subgoal_id and et.environment_id = ga.environment_id);
    
    if rootCount = 0
    then
      insert into temp_rootobstacle(obstacle_id,obstacle_name) select id,name from obstacle where id in 
        (select ga.goal_id from obstaclevulnerability_goalassociation ga, risk r, environment_vulnerability ev where r.id = riskId and r.vulnerability_id = ev.vulnerability_id and ev.environment_id = envId and ev.vulnerability_id = ga.subgoal_id and ev.environment_id = ga.environment_id
         union
         select ga.goal_id from obstaclethreat_goalassociation ga, risk r, environment_threat et where r.id = riskId and r.threat_id = et.threat_id and et.environment_id = envId and et.threat_id = ga.subgoal_id and et.environment_id = ga.environment_id);
    end if;

    open obsCursor;
    obs_loop: loop
      fetch obsCursor into obsId;
      if done = 1
      then
        leave obs_loop;
      end if;
      call obstacleParents(obsId,envId);
      set done = 0;
    end loop obs_loop;
    close obsCursor;
    set done = 0;

    open rootCursor;
    root_loop: loop
      fetch rootCursor into obsId;
      if done = 1
      then
        leave root_loop;
      end if;
      open soCursor;
      so_loop: loop
        fetch soCursor into soId;
        if done = 1
        then
          leave so_loop;
        end if;

        select count(subgoal_id) into branchCount from obstacleobstacle_goalassociation where goal_id = soId and environment_id = envId;
        if branchCount > 0
        then
          open branchCursor;
          branch_loop: loop
            fetch branchCursor into boId;
            if done = 1
            then
              leave branch_loop;
            end if;
            call walkObstacleBranch(boId,envId);
            set done = 0;
          end loop branch_loop;
          close branchCursor;
        else
          select name into obsName from obstacle where id = soId;
          insert into temp_leafobstacle(obstacle_name) values (obsName);
        end if;
        set done = 0;
      end loop so_loop;
      close soCursor;
      set done = 0;
    end loop root_loop;
    close rootCursor;
    set done = 0;
 
    open loCursor;
    lo_loop: loop
      fetch loCursor into obsName;
      if done = 1
      then
        leave lo_loop;
      else
        if isFirst = 1
        then
          set isFirst = 0;
        else
          set buf = concat(buf,', ');
        end if;
      end if;
      set buf = concat(buf,obsName);
    end loop lo_loop;
    close loCursor; 
    delete from temp_leafobstacle;
    delete from temp_rootobstacle;
    set done = 0;
    set buf = concat(buf,' |\n');
    set isFirst = 1;
  end loop atkP_loop;
  close atkPCursor;
  select buf;
end
//

create procedure walkObstacleBranch(in soId int, in envId int)
begin
  declare branchCount int;
  declare boId int;
  declare done int default 0;
  declare obsName varchar(200);
  declare branchCursor cursor for select subgoal_id from obstacleobstacle_goalassociation where goal_id = soId and environment_id = envId;
  declare continue handler for not found set done = 1;

  select count(subgoal_id) into branchCount from obstacleobstacle_goalassociation where goal_id = soId and environment_id = envId;
  if branchCount > 0
  then
    open branchCursor;
    branch_loop: loop
      fetch branchCursor into boId;
      if done = 1
      then
        leave branch_loop;
      end if;
      call walkObstacleBranch(boId,envId);
      set done = 0;
    end loop branch_loop;
    close branchCursor;
  else
    select name into obsName from obstacle where id = soId;
    insert into temp_leafobstacle(obstacle_name) values (obsName);
  end if;
end
// 

create procedure processesToXml(in includeHeader int)
begin
  declare buf varchar(90000000) default '<?xml version="1.0"?>\n<!DOCTYPE processes PUBLIC "-//CAIRIS//DTD PROCESSES 1.0//EN" "http://cairis.org/dtd/processes.dtd">\n\n<processes>\n';
  declare done int default 0;
  declare idName varchar(200);
  declare idDesc varchar(2000);
  declare idContent varchar(9000000);
  declare pcnId int;
  declare codeName varchar(200);
  declare fromCode varchar(200);
  declare fromId int;
  declare toCode varchar(200);
  declare toId int;
  declare rtName varchar(200);
  declare codeType varchar(200);
  declare codeDesc varchar(2000);
  declare codeIncCr varchar(200);
  declare codeEg varchar(200);
  declare idCount int default 0;
  declare codeCount int default 0;
  declare memoCount int default 0;
  declare qCount int default 0;
  declare pcnCount int default 0;
  declare icCount int default 0;
  declare ipnCount int default 0;
  declare artType varchar(50);
  declare artName varchar(50);
  declare envName varchar(50);
  declare sectionName varchar(50);
  declare icId int;
  declare labelName varchar(200);
  declare crtName varchar(50);
  declare ipId int;
  declare ipName varchar(200);
  declare ipDesc varchar(2000);
  declare ipSpec varchar(2000);
  declare startIdx int;
  declare endIdx int;
  declare codeLabel varchar(200);
  declare codeSynopsis varchar(1000);
  declare icSynopsis varchar(2000);
  declare icQualifier varchar(2000);
  declare icBehavVar varchar(50);
  declare idCursor cursor for select name, description, content from internal_document order by 1; 
  declare codeCursor cursor for select c.name, ct.name, c.description, c.inclusion_criteria, c.example from code c, code_type ct where c.code_type_id = ct.id order by 1; 
  declare memoCursor cursor for select m.name, m.description from memo m order by 1; 
  declare quotationCursor cursor for 
    select 'internal_document_memo',a.name,m.name,'None','none',am.start_index,am.end_index,'','' from internal_document_memo am, internal_document a, memo m where am.internal_document_id = a.id and am.memo_id = m.id
    union
    select 'internal_document_code',a.name,c.name,'None','none',ac.start_index,ac.end_index,ac.label,ac.synopsis from internal_document_code ac, internal_document a, code c where ac.internal_document_id = a.id and ac.code_id = c.id
    union
    select 'persona',a.name,c.name,'None',ars.name,ac.start_index,ac.end_index,'','' from persona_code ac, persona a, code c, artifact_section ars where ac.persona_id = a.id and ac.code_id = c.id and ac.section_id = ars.id
    union
    select 'persona',a.name,c.name,e.name,ars.name,aec.start_index,aec.end_index,'','' from persona_environment_code aec, persona a, code c, artifact_section ars, environment e where aec.persona_id = a.id and aec.code_id = c.id and aec.section_id = ars.id and aec.environment_id = e.id
    union
    select 'task',a.name,c.name,'None',ars.name,ac.start_index,ac.end_index,'','' from task_code ac, task a, code c, artifact_section ars where ac.task_id = a.id and ac.code_id = c.id and ac.section_id = ars.id
    union
    select 'task',a.name,c.name,e.name,ars.name,aec.start_index,aec.end_index,'','' from task_environment_code aec, task a, code c, artifact_section ars, environment e where aec.task_id = a.id and aec.code_id = c.id and aec.section_id = ars.id and aec.environment_id = e.id
    order by 1;
  declare pcnCursor cursor for select pcn.id,p.name,pcn.from_code_id,fc.name,pcn.to_code_id,tc.name,rt.name from persona_code_network pcn, persona p, code fc, code tc, relationship_type rt where pcn.persona_id = p.id and pcn.from_code_id = fc.id and pcn.to_code_id = tc.id and pcn.relationship_type_id = rt.id;
  declare icCursor cursor for select ic.id, ic.synopsis,ic.qualifier,bv.name from implied_characteristic ic, behavioural_variable bv where ic.persona_code_network_id = pcnId and ic.variable_id = bv.id order by 1;
  declare fromLabelCursor cursor for select idc.label,crt.name from implied_characteristic ic, implied_characteristic_element ice, internal_document_code idc, characteristic_reference_type crt,persona_code_network pcn where ice.implied_characteristic_id = icId and ice.implied_characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and pcn.from_code_id = ice.code_id and ice.internal_document_id = idc.internal_document_id and ice.code_id = idc.code_id and ice.start_index = idc.start_index and ice.end_index = idc.end_index and ice.characteristic_reference_type_id = crt.id order by 1;
  declare toLabelCursor cursor for select idc.label,crt.name from implied_characteristic ic, implied_characteristic_element ice, internal_document_code idc, characteristic_reference_type crt,persona_code_network pcn where ice.implied_characteristic_id = icId and ice.implied_characteristic_id = ic.id and ic.persona_code_network_id = pcn.id and pcn.to_code_id = ice.code_id and ice.internal_document_id = idc.internal_document_id and ice.code_id = idc.code_id and ice.start_index = idc.start_index and ice.end_index = idc.end_index and ice.characteristic_reference_type_id = crt.id order by 1;
  declare ipCursor cursor for select pip.id,pip.name,p.name,pip.description,pip.specification from persona_implied_process pip, persona p where pip.persona_id = p.id order by 2;
  declare ipnCursor cursor for select fc.name,tc.name,rt.name from persona_implied_process_network pipn, persona_code_network pcn, code fc, code tc, relationship_type rt where pipn.persona_implied_process_id = ipId and pipn.persona_code_network_id = pcn.id and pcn.from_code_id = fc.id and pcn.to_code_id = tc.id and pcn.relationship_type_id = rt.id;

  declare continue handler for not found set done = 1;

  if includeHeader = 0
  then
    set buf = '<processes>\n';
  end if;

  open idCursor;
  id_loop: loop
    fetch idCursor into idName,idDesc,idContent;
    if done = 1
    then 
      leave id_loop;
    end if;
    set buf = concat(buf,'<internal_document name=\"',idName,'\">\n  <description>',idDesc,'</description>\n  <content>',idContent,'</content>\n</internal_document>\n');
    set idCount = idCount + 1;
  end loop id_loop;
  close idCursor;
  set done = 0;

  open codeCursor;
  code_loop: loop
    fetch codeCursor into codeName,codeType,codeDesc,codeIncCr,codeEg;
    if done = 1
    then 
      leave code_loop;
    end if;
    set buf = concat(buf,'<code name=\"',codeName,'\" type=\"',codeType,'\">\n  <description>',codeDesc,'</description>\n  <inclusion_criteria>',codeIncCr,'</inclusion_criteria>\n  <example>',codeEg,'</example>\n</code>\n');
    set codeCount = codeCount + 1;
  end loop code_loop;
  close codeCursor;
  set done = 0;

  open memoCursor;
  memo_loop: loop
    fetch memoCursor into codeName,codeDesc;
    if done = 1
    then 
      leave memo_loop;
    end if;
    set buf = concat(buf,'<memo name=\"',codeName,'\">\n  <description>',codeDesc,'</description>\n</memo>\n');
    set memoCount = memoCount + 1;
  end loop memo_loop;
  close memoCursor;
  set done = 0;


  open quotationCursor;
  q_loop: loop
    fetch quotationCursor into artType,artName,codeName,envName,sectionName,startIdx,endIdx,codeLabel,codeSynopsis;
    if done = 1
    then 
      leave q_loop;
    end if;
    set buf = concat(buf,'<quotation code=\"',codeName,'\" ');
    if artType = 'internal_document_memo'
    then
      set buf = concat(buf,'type=\"memo\" ');
      set artType = 'internal_document';
    elseif artType = 'internal_document_code'
    then
      set buf = concat(buf,'type=\"code\" ');
      set artType = 'internal_document';
    else
      set buf = concat(buf,'type=\"code\" ');
    end if;
 
    set buf = concat(buf,'artifact_type=\"',artType,'\" artifact_name=\"',artName,'\" ');
    if envName != 'None'
    then
      set buf = concat(buf,' environment=\"',envName,'\" ');
    end if; 
    set buf = concat(buf,'section=\"',sectionName,'\" start_index=\"',startIdx,'\" to_index=\"',endIdx,'\">\n  <label>',codeLabel,'</label>\n  <synopsis>',codeSynopsis,'</synopsis>\n</quotation>\n');
    set qCount = qCount + 1;
  end loop q_loop;
  close quotationCursor;
  set done = 0;

  open pcnCursor;
  pcn_loop: loop
    fetch pcnCursor into pcnId,artName,fromId,fromCode,toId,toCode,rtName;
    if done = 1
    then
      leave pcn_loop;
    end if;
    set buf = concat(buf,'<code_network persona=\"',artName,'\" relationship_type=\"',rtName,'\" from_code=\"',fromCode,'\" to_code=\"',toCode,'\">\n');
    set pcnCount = pcnCount + 1;

    open icCursor;
    ic_loop: loop 
      fetch icCursor into icId,icSynopsis,icQualifier,icBehavVar;
      if done = 1
      then
        leave ic_loop;
      end if;
      set buf = concat(buf,'  <implied_characteristic name=\"',icSynopsis,'\" qualifier=\"',icQualifier,'\" type=\"',icBehavVar,'\">\n');
      set icCount = icCount + 1;

      open fromLabelCursor;
      fromLabel_loop: loop
        fetch fromLabelCursor into labelName,crtName;
        if done = 1
        then
          leave fromLabel_loop;
        end if;
        set buf = concat(buf,'    <from_label name=\"',labelName,'\" reference_type=\"',crtName,'\" />\n');
      end loop fromLabel_loop;
      close fromLabelCursor;
      set done = 0;

      open toLabelCursor;
      toLabel_loop: loop
        fetch toLabelCursor into labelName,crtName;
        if done = 1
        then
          leave toLabel_loop;
        end if;
        set buf = concat(buf,'    <to_label name=\"',labelName,'\" reference_type=\"',crtName,'\" />\n');
      end loop toLabel_loop;
      close toLabelCursor;
      set done = 0;

      set buf = concat(buf,'  </implied_characteristic>\n');
    end loop ic_loop;
    close icCursor;
    set done = 0;

  set buf = concat(buf,'</code_network>\n');
  end loop pcn_loop;
  close pcnCursor;
  set done = 0;

  open ipCursor;
  ip_loop: loop
    fetch ipCursor into ipId,ipName,artName,ipDesc,ipSpec;
    if done = 1
    then
      leave ip_loop;
    end if;
    set buf = concat(buf,'<implied_process name=\"',ipName,'\" persona=\"',artName,'\" >\n  <description>',ipDesc,'</description>\n'); 
    set ipnCount = ipnCount + 1; 
    
    open ipnCursor;
    ipn_loop: loop
      fetch ipnCursor into fromCode,toCode,rtName;
      if done = 1
      then
        leave ipn_loop;
      end if;
      set buf = concat(buf,'  <relationship from_code=\"',fromCode,'\" to_code=\"',toCode,'\" relationship_type=\"',rtName,'\" />\n');
    end loop ipn_loop;
    close ipnCursor; 
    set done = 0; 
    set buf = concat(buf,'  <specification>',ipSpec,'</specification>\n</implied_process>\n');
  end loop ip_loop;
  close ipCursor;
  set done = 0;

  set buf = concat(buf,'</processes>');
  select buf,idCount,codeCount,memoCount,qCount,pcnCount,icCount,ipnCount;
end
//

create procedure getMemos(in constraintId int)
begin
  if constraintId = -1
  then
    select id,name,ifnull(description,'') from memo;
  else
    select id,name,ifnull(description,'') from memo where id = constraintId;
  end if;
end
//

create procedure delete_memo(in memoId int)
begin
  if memoId != -1
  then
    delete from memo where id = memoId;
  else
    delete from memo;
  end if;
end
//

create procedure addMemo(in memoId int, in memoName text, in memoDesc text)
begin
  declare mId int;
  
  select id into mId from memo where name = memoName;
  if mId is null
  then 
    insert into memo(id,name,description) values (memoId,memoName,memoDesc);
  end if;
end
//

create procedure updateMemo(in memoId int, in memoName text, in memoDesc text)
begin
  update memo set name = memoName, description = memoDesc where id = memoId;
end
//

create procedure documentMemos(in docName text)
begin
  declare docId int; 

  select id into docId from internal_document where name = docName;
  select m.name,m.description,idm.start_index,idm.end_index from internal_document_memo idm, memo m where idm.internal_document_id = docId and idm.memo_id = m.id order by 1,2,3;
end
//

create procedure addDocumentMemo(in docName text, in memoName text, in memoTxt text, in startIdx int, in endIdx int)
begin
  declare docId int;
  declare memoId int;

  select id into docId from internal_document where name = docName;
  select id into memoId from memo where name = memoName;
  if memoId is null
  then
    call newId2(memoId);
    call addMemo(memoId,memoName,memoTxt);
  end if;
  insert into internal_document_memo(internal_document_id,memo_id,start_index,end_index) values (docId,memoId,startIdx,endIdx);
end
//

create procedure mergeCodes(in fromCode text, in toCode text)
begin
  declare fromId int;
  declare toId int;

  select id into fromId from code where name = fromCode limit 1;
  select id into toId from code where name = toCode limit 1;

/* update channel parameters */
update channel_parameter set code_id = toId where code_id = fromId;

/* Update persona code network */
update persona_code_network set from_code_id = toId where from_code_id = fromId;
update persona_code_network set to_code_id = toId where to_code_id = fromId;

/* update internal_document_code */
update internal_document_code set code_id = toId where code_id = fromId;

/* update persona code, persona environment code, task code, and task environment code */
update persona_code set code_id = toId where code_id = fromId;
update persona_environment_code set code_id = toId where code_id = fromId;
update task_code set code_id = toId where code_id = fromId;
update task_environment_code set code_id = toId where code_id = fromId;

call delete_code(fromId);

end
//

create procedure grepCodes(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Code',c.name from code c where c.name like concat('%',inTxt,'%')
  union
  select '','Code',c.name from code c where c.description like concat('%',inTxt,'%')
  union
  select '','Code',c.name from code c where c.inclusion_criteria like concat('%',inTxt,'%')
  union
  select '','Code',c.name from code c where c.example like concat('%',inTxt,'%');
end
//

create procedure grepMemos(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Memo',m.name from memo m where m.name like concat('%',inTxt,'%')
  union
  select '','Memo',m.name from memo m where m.description like concat('%',inTxt,'%');
end
//

create procedure grepInternalDocuments(in inTxt text)
begin
  insert into temp_searchresults (environment_name,dimension_name,object_name)
  select '','Internal Document',id.name from internal_document id where id.name like concat('%',inTxt,'%')
  union
  select '','Internal Document',id.name from internal_document id where id.description like concat('%',inTxt,'%')
  union
  select '','Internal Document',id.name from internal_document id where id.content like concat('%',inTxt,'%');
end
//

create procedure impliedProcess(in procName text)
begin
  declare buf varchar(90000000) default '';
  declare ipId int;
  declare augProcName varchar(200);
  declare channelName varchar(200);
  declare dtName varchar(200);
  declare ipSpec varchar(2000);
  declare done int default 0;
  declare channelCursor cursor for select channel_name, data_type_name from persona_implied_process_channel where persona_implied_process_id = ipId;  
  declare continue handler for not found set done = 1;

  select id into ipId from persona_implied_process where name = procName limit 1;

  set buf = '--Channel definitions BEGIN\n\n';
  open channelCursor;
  channel_loop: loop
    fetch channelCursor into channelName,dtName;
    if done = 1
    then
      leave channel_loop;
    end if;
    set buf = concat(buf,'channel ',channelName);
    if dtName != ''
    then
      set buf = concat(buf,' : ',dtName,' \n');
    else
      set buf = concat(buf,' \n');
    end if;
  end loop channel_loop;
  close channelCursor;

  set buf = concat(buf,'-- Channel definitions END\n\n');
  
  select specification into ipSpec from persona_implied_process where id = ipId limit 1;

  set augProcName = replace(procName,' ','_');
  set buf = concat(buf,'-- ',augProcName,'\n\n',ipSpec,'\n');

  select buf;
end
//

create procedure persona_implied_processNames(in envName text)
begin
  select name from persona_implied_process order by 1;
end
//

create procedure addImpliedProcessChannel(in ipId int, in channelName text, in dtName text)
begin
  insert into persona_implied_process_channel(persona_implied_process_id,channel_name,data_type_name) values (ipId,channelName,dtName);
end
//

create procedure impliedProcessChannels(in ipName text)
begin
  declare ipId int;
  select id into ipId from persona_implied_process where name = ipName limit 1;
  select channel_name,data_type_name from persona_implied_process_channel where persona_implied_process_id = ipId order by 1,2;
end
//

create procedure getQuotations()
begin
  select code,artifact_type,artifact_name,section,start_index,end_index,quote,synopsis,label from quotation;
end
//

create procedure updateDocumentCode(in docName text, in docCode text, in oldStartIdx int, in oldEndIdx int, in startIdx int, in endIdx int,in synTxt text, in lblTxt text)
begin
  declare docId int;
  declare codeId int;

  select id into docId from internal_document where name = docName;
  select id into codeId from code where name = docCode;
  update internal_document_code set start_index = startIdx, end_index = endIdx,synopsis = synTxt,label=lblTxt where internal_document_id = docId and code_id = codeId and start_index = oldStartIdx and end_index = oldEndIdx;
end
//

create procedure deleteDocumentCode(in docName text, in docCode text, in startIdx int, in endIdx int)
begin
  declare docId int;
  declare codeId int;

  select id into docId from internal_document where name = docName;
  select id into codeId from code where name = docCode;
  delete from internal_document_code where internal_document_id = docId and code_id = codeId and start_index = startIdx and end_index = endIdx;
end
//

create procedure artifactText(in artType text, in artName text)
begin

  if artType = 'internal_document'
  then
    select content from internal_document where name = artName;
  end if;

end
//

create function personaCodeNetworkId(pName text, fromCode text, toCode text, rType text)
returns int
deterministic
begin
  declare pId int;
  declare fromId int;
  declare toId int;
  declare rtId int;
  declare pcnId int;

  select id into pId from persona where name = pName limit 1;
  select id into fromId from code where name = fromCode limit 1;
  select id into toId from code where name = toCode limit 1;
  select id into rtId from relationship_type where name = rType limit 1;
  select id into pcnId from persona_code_network where persona_id = pId and from_code_id = fromId and to_code_id = toId and relationship_type_id = rtId limit 1;
  return pcnId;
end
//

create procedure impliedCharacteristic(in pName text, in fromCode text, in toCode text, in rType text)
begin
  declare pcnId int;

  select personaCodeNetworkId(pName,fromCode,toCode,rType) into pcnId;
  select ic.synopsis,ic.qualifier,bv.name from implied_characteristic ic, behavioural_variable bv where ic.persona_code_network_id = pcnId and ic.variable_id = bv.id limit 1;
end
//

create procedure impliedCharacteristicElements(in pName text, in fromCode text, in toCode text, in rType text, in isLhs int)
begin
  declare fromId int;
  declare toId int;
  declare icId int;
  declare pcnId int;

  select personaCodeNetworkId(pName,fromCode,toCode,rType) into pcnId;
  select id into icId from implied_characteristic where persona_code_network_id = pcnId limit 1;
  
  if isLhs = 1
  then
    select id into fromId from code where name = fromCode limit 1;
    select idc.label,crt.name from implied_characteristic_element ice, internal_document_code idc, characteristic_reference_type crt where ice.implied_characteristic_id = icId and ice.code_id = fromId and ice.code_id = idc.code_id and ice.internal_document_id = idc.internal_document_id and ice.start_index = idc.start_index and ice.end_index = idc.end_index and ice.characteristic_reference_type_id = crt.id;
  else
    select id into toId from code where name = toCode limit 1;
    select idc.label,crt.name from implied_characteristic_element ice, internal_document_code idc, characteristic_reference_type crt where ice.implied_characteristic_id = icId and ice.code_id = toId and ice.code_id = idc.code_id and ice.internal_document_id = idc.internal_document_id and ice.start_index = idc.start_index and ice.end_index = idc.end_index and ice.characteristic_reference_type_id = crt.id;
  end if;
end
//

create procedure initialiseImpliedCharacteristic(in pName text, in fromCode text, in toCode text, in rType text)
begin
  declare pId int;
  declare fromId int;
  declare toId int;
  declare rtId int;
  declare pcnId int;
  declare icId int;
  declare idId int;
  declare startIdx int;
  declare endIdx int;
  declare done int default 0;
  declare lhsCursor cursor for select internal_document_id,start_index,end_index from internal_document_code where code_id = fromId;
  declare rhsCursor cursor for select internal_document_id,start_index,end_index from internal_document_code where code_id = toId;
  declare continue handler for not found set done = 1;

  select id into pId from persona where name = pName limit 1;
  select id into fromId from code where name = fromCode limit 1;
  select id into toId from code where name = toCode limit 1;
  select id into rtId from relationship_type where name = rType limit 1;
  select id into pcnId from persona_code_network where persona_id = pId and from_code_id = fromId and to_code_id = toId and relationship_type_id = rtId limit 1;

  call newId2(icId);

  insert into implied_characteristic(id,persona_code_network_id,synopsis,qualifier,variable_id) values(icId,pcnId,'','Unknown',6) ;

  open lhsCursor;
  lhs_loop: loop
    fetch lhsCursor into idId, startIdx,endIdx;
    if done = 1
    then
      leave lhs_loop;
    end if;
    insert into implied_characteristic_element(implied_characteristic_id,internal_document_id,code_id,start_index,end_index,characteristic_reference_type_id) values(icId,idId,fromId,startIdx,endIdx,0);
  end loop lhs_loop;
  close lhsCursor;

  set done = 0;

  open rhsCursor;
  rhs_loop: loop
    fetch rhsCursor into idId, startIdx,endIdx;
    if done = 1
    then
      leave rhs_loop;
    end if;
    insert into implied_characteristic_element(implied_characteristic_id,internal_document_id,code_id,start_index,end_index,characteristic_reference_type_id) values(icId,idId,toId,startIdx,endIdx,0);
  end loop rhs_loop;
  close rhsCursor;

end
//

create procedure addImpliedCharacteristic(in pName text, in fromCode text, in toCode text, in rType text, in charName text, in qualName text, in charType text)
begin
  declare icId int;
  declare pcnId int;
  declare bvId int;

  call newId2(icId);
  select personaCodeNetworkId(pName,fromCode,toCode,rType) into pcnId;
  select id into bvId from behavioural_variable where name = charType limit 1;

  insert into implied_characteristic(id,persona_code_network_id,synopsis,qualifier,variable_id) values(icId,pcnId,charName,qualName,bvId);
end
//

create procedure updateImpliedCharacteristic(in pName text, in fromCode text, in toCode text, in rType text, in charName text, in qualName text, in charType text)
begin
  declare icId int;
  declare bvId int;
  declare pcnId int;

  select personaCodeNetworkId(pName,fromCode,toCode,rType) into pcnId;
  select id into icId from implied_characteristic where persona_code_network_id = pcnId limit 1;
  select id into bvId from behavioural_variable where name = charType limit 1;

  update implied_characteristic set synopsis = charName, qualifier = qualName, variable_id = bvId where id = icId and persona_code_network_id = pcnId;
end
//

create procedure updateImpliedCharacteristicElement(in icName text, in labelName text, in rtName text)
begin
  declare icId int;
  declare idId int;
  declare codeId int;
  declare startIdx int;
  declare endIdx int;
  declare rtId int;

  select id into icId from implied_characteristic where synopsis = icName limit 1;
  select id into rtId from characteristic_reference_type where name = rtName limit 1;

  select internal_document_id into idId from internal_document_code where label = labelName limit 1;
  select code_id into codeId from internal_document_code where label = labelName limit 1;
  select start_index into startIdx from internal_document_code where label = labelName limit 1;
  select end_index into endIdx from internal_document_code where label = labelName limit 1;

  update implied_characteristic_element set characteristic_reference_type_id = rtId where implied_characteristic_id = icId and internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx;
end
//

create procedure addImpliedCharacteristicElement(in icName text, in labelName text, in rtName text)
begin
  declare icId int;
  declare idId int;
  declare codeId int;
  declare startIdx int;
  declare endIdx int;
  declare rtId int;

  select id into icId from implied_characteristic where synopsis = icName limit 1;
  select id into rtId from characteristic_reference_type where name = rtName limit 1;

  select internal_document_id into idId from internal_document_code where label = labelName limit 1;
  select code_id into codeId from internal_document_code where label = labelName limit 1;
  select start_index into startIdx from internal_document_code where label = labelName limit 1;
  select end_index into endIdx from internal_document_code where label = labelName limit 1;

  insert into implied_characteristic_element(implied_characteristic_id,internal_document_id,code_id,start_index,end_index,characteristic_reference_type_id) values (icId,idId,codeId,startIdx,endIdx,rtId);
end
//

create function internalDocumentCount(codeId int)
returns int
deterministic
begin
  declare codeCount int;
  select count(code_id) into codeCount from internal_document_code where code_id = codeId;
  return codeCount;
end
//

create function codeCount(codeName text)
returns int
deterministic 
begin
  declare codeId int;
  declare idCount int default 0;
  declare totalCount int default 0;

  select id into codeId from code where name = codeName limit 1;

  select internalDocumentCount(codeId) into idCount;
  set totalCount = totalCount + idCount;

  return totalCount;
end
//

create procedure addUseCaseStepTag(in ucId int, in envName text, in stepNo int, in tagName text)
begin
  declare envId int;
  declare tagId int;

  select id into envId from environment where name = envName limit 1;
  select id into tagId from tag where name = tagName limit 1;
  if tagId is null
  then
    call newId2(tagId);
    insert into tag (id,name) values (tagId,tagName);
  end if;

  insert into usecase_step_tag(usecase_id,environment_id,step_no,tag_id) values (ucId,envId,stepNo,tagId);

end
//

create procedure useCaseStepTags(in ucId int, in envId int, in stepNo int)
begin
  select t.name from usecase_step_tag ust, tag t where ust.usecase_id = ucId and ust.environment_id = envId and ust.step_no = stepNo and ust.tag_id = t.id;
end
//

create procedure useCaseTags(in ucName text, in envName text)
begin
  declare ucId int;
  declare envId int;

  select id into ucId from usecase where name = ucName limit 1;
  select id into envId from environment where name = envName limit 1;

  select t.name from usecase_step_tag ust, tag t where ust.usecase_id = ucId and ust.environment_id = envId and ust.tag_id = t.id order by ust.step_no;

end
//

create procedure addIntention(in refName text, in refType text, in intentionName text, in intentionType text)
begin
  declare dimId int;
  declare atId int;
  declare refId int;
  declare icId int;
  declare idId int;
  declare codeId int;
  declare personaId int;
  declare startIdx int;
  declare endIdx int;

  select id into dimId from trace_dimension where name = intentionType;
  select id into atId from trace_dimension where name = 'persona';

  if refType = 'implied_characteristic'
  then
    select id into refId from implied_characteristic where synopsis = refName limit 1;
    insert into implied_characteristic_intention(characteristic_id,synopsis,dimension_id) values(refId,intentionName,dimId);
  else
    call newId2(refId);
    select internal_document_id into idId from internal_document_code where label = refName;
    select code_id into codeId from internal_document_code where label = refName;
    select start_index into startIdx from internal_document_code where label = refName;
    select end_index into endIdx from internal_document_code where label = refName;
    select implied_characteristic_id into icId from implied_characteristic_element where internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx limit 1;
    select pcn.persona_id into personaId from implied_characteristic ic, persona_code_network pcn where ic.id = icId and ic.persona_code_network_id = pcn.id limit 1;
    insert into implied_characteristic_element_intention(id,implied_characteristic_id,internal_document_id,code_id,start_index,end_index,synopsis,dimension_id,actor_id,actor_type_id) values(refId,icId,idId,codeId,startIdx,endIdx,intentionName,dimId,personaId,atId);
  end if;
end
//

create procedure addContribution(in srcName text, in destName text, in meansEnd text, in valName text)
begin
  declare icId int;
  declare iceId int;
  declare endId int;
  declare contId int;

  select icei.id into iceId from implied_characteristic_element_intention icei, internal_document_code idc where icei.internal_document_id = idc.internal_document_id and icei.code_id = idc.code_id and icei.start_index = idc.start_index and icei.end_index = idc.end_index and idc.label = srcName limit 1;
  select id into icId from implied_characteristic where synopsis = destName limit 1;
  select id into endId from contribution_end where name = meansEnd limit 1;
  select id into contId from link_contribution where name = valName limit 1;

  insert into ice_ic_contribution(implied_characteristic_element_intention_id,implied_characteristic_id,end_id,contribution_id) values(iceId,icId,endId,contId);

end
//

create function impliedCharacteristicIntention(icSyn text, personaName text,fromCode text, toCode text, rType text) 
returns varchar(1051)
deterministic 
begin
  declare intValue varchar(1000) default '';
  declare intType varchar(50) default 'goal';
  declare personaId int;
  declare fromId int;
  declare toId int;
  declare rTypeId int;
  declare pcnId int;
  declare icId int;

  select id into personaId from persona where name = personaName limit 1;
  select id into fromId from code where name = fromCode limit 1;
  select id into toId from code where name = toCode limit 1;
  select id into rTypeId from relationship_type where name = rType limit 1;
  select id into pcnId from persona_code_network where persona_id = personaId and from_code_id = fromId and to_code_id = toId and relationship_type_id = rTypeId limit 1;
  select id into icId from implied_characteristic where persona_code_network_id = pcnId and synopsis = icSyn limit 1;

  select ifnull(synopsis,'') into intValue from implied_characteristic_intention where characteristic_id = icId limit 1;
  select ifnull(td.name,'goal') into intType from implied_characteristic_intention ici, trace_dimension td where ici.characteristic_id = icId and ici.dimension_id = td.id limit 1;
  return concat(intValue,'#',intType);
end
//

create procedure updateImpliedCharacteristicIntention(in charName text, in intName text, in intType text)
begin
  declare icId int;
  declare rtId int;
  declare iciCount int;

  select id into icId from implied_characteristic where synopsis = charName limit 1;
  select id into rtId from trace_dimension where name = intType limit 1;

  select count(characteristic_id) into iciCount from implied_characteristic_intention where characteristic_id = icId;
 
  if iciCount = 0
  then
    insert into implied_characteristic_intention(characteristic_id,synopsis,dimension_id) values (icId,intName,rtId);
  else
    update implied_characteristic_intention set synopsis = intName, dimension_id = rtId where characteristic_id = icId;
  end if;

end
//

create function impliedCharacteristicElementIntention(ciName text, elName text) 
returns varchar(1253)
deterministic 
begin
  declare intName varchar(1000) default '';
  declare intDim varchar(50) default 'goal';
  declare meName varchar(100) default '';
  declare contName varchar(100) default '';
  declare intId int;
  declare icId int;
  declare iceiId int;
  declare idId int;
  declare codeId int;
  declare startIdx int;
  declare endIdx int;

  select characteristic_id into intId from implied_characteristic_intention where synopsis = ciName limit 1;
  select internal_document_id into idId from internal_document_code where label = elName limit 1;
  select code_id into codeId from internal_document_code where label = elName limit 1;
  select start_index into startIdx from internal_document_code where label = elName limit 1;
  select end_index into endIdx from internal_document_code where label = elName limit 1;
  select implied_characteristic_id into icId from implied_characteristic_element_intention where internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx;
  select id into iceiId from implied_characteristic_element_intention where implied_characteristic_id = icId and internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx;
  if iceiId is not null
  then
    select synopsis into intName from implied_characteristic_element_intention where id = iceiId limit 1;
    select td.name into intDim from implied_characteristic_element_intention icei, trace_dimension td where icei.id = iceiId and icei.dimension_id = td.id limit 1;
    select ce.name into meName from ice_ic_contribution iic, contribution_end ce where iic.implied_characteristic_element_intention_id = iceiId and implied_characteristic_id = intId and iic.end_id = ce.id limit 1;
    select lc.name into contName from ice_ic_contribution iic, link_contribution lc where iic.implied_characteristic_element_intention_id = iceiId and implied_characteristic_id = intId and iic.contribution_id = lc.id limit 1;
  end if;
  
  return concat(intName,'#',intDim,'#',meName,'#',contName);
end
//

create procedure updateImpliedCharacteristicElementIntention(in ciName text, in elName text, in intName text, in intDim text, in meName text, in contName text) 
begin
  declare iceiId int;
  declare icId int;
  declare dimId int;
  declare idId int;
  declare codeId int;
  declare startIdx int;
  declare endIdx int;
  declare actorId int;
  declare actorTypeId int;
  declare meId int;
  declare contId int;
  declare iceiCount int;

  select characteristic_id into icId from implied_characteristic_intention where synopsis = ciName limit 1;
  select id into dimId from trace_dimension where name = intDim limit 1;
  select id into actorTypeId from trace_dimension where name = 'persona' limit 1;
  select id into meId from contribution_end where name = meName limit 1;
  select id into contId from link_contribution where name = contName limit 1;
  select pcn.persona_id into actorId from implied_characteristic ic, persona_code_network pcn where ic.id = icId and ic.persona_code_network_id = pcn.id limit 1;

  select internal_document_id into idId from internal_document_code where label = elName limit 1;
  select code_id into codeId from internal_document_code where label = elName limit 1;
  select start_index into startIdx from internal_document_code where label = elName limit 1;
  select end_index into endIdx from internal_document_code where label = elName limit 1;

  select count(id) into iceiCount from implied_characteristic_element_intention where implied_characteristic_id = icId and internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx and actor_id = actorId and actor_type_id = actorTypeId;

  if iceiCount = 0
  then
    call newId2(iceiId);
    insert into implied_characteristic_element_intention(id,implied_characteristic_id,internal_document_id,code_id,start_index,end_index,synopsis,dimension_id,actor_id,actor_type_id) values (iceiId,icId,idId,codeId,startIdx,endIdx,intName,dimId,actorId,actorTypeId);
    insert into ice_ic_contribution(implied_characteristic_element_intention_id,implied_characteristic_id,end_id,contribution_id) values (iceiId,icId,meId,contId);
  else
    select id into iceiId from implied_characteristic_element_intention where implied_characteristic_id = icId and internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx and actor_id = actorId and actor_type_id = actorTypeId;
    update implied_characteristic_element_intention set synopsis = intName,dimension_id = dimId where implied_characteristic_id = icId and internal_document_id = idId and code_id = codeId and start_index = startIdx and end_index = endIdx and actor_id = actorId and actor_type_id = actorTypeId;
    update ice_ic_contribution set end_id = meId, contribution_id = contId where implied_characteristic_element_intention_id = iceiId and implied_characteristic_id = icId;
  end if;
  
end
//

create procedure deniedGoals(in codeName text)
begin
  declare codeId int;
  
  select id into codeId from code where name = codeName limit 1;
  select synopsis from implied_characteristic_element_intention where code_id = codeId;
end
//

create function requirementId(reqCode text) 
returns int
deterministic 
begin
    declare reqLabel int;
    declare shortCode varchar(50);
    declare reqId int;

    call requirementLabelComponents(reqCode,shortCode,reqLabel);
    select o.id into reqId from requirement o, asset_requirement ar, asset a where o.label = reqLabel and o.id = ar.requirement_id and ar.asset_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);
    if reqId is null
    then
      select o.id into reqId from requirement o, environment_requirement ar, environment a where o.label = reqLabel and o.id = ar.requirement_id and ar.environment_id = a.id and a.short_code = shortCode and o.version = (select max(i.version) from requirement i where i.id = o.id);

      if reqId is null
      then
        select o.id into reqId from requirement o where o.name = reqCode and o.version = (select max(i.version) from requirement i where i.id = o.id); 
      end if;
    end if;
    return reqId;
end
//

delimiter ;
