#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.


import logging
from urllib import quote
import jsonpickle
from cairis.core.Vulnerability import Vulnerability
from cairis.core.VulnerabilityEnvironmentProperties import VulnerabilityEnvironmentProperties
from cairis.web_tests.CairisTests import CairisTests

__author__ = 'Robin Quetin'


class VulnerabilityTests(CairisTests):
    # region Class fields
    logger = logging.getLogger(__name__)
    existing_vulnerability_id = 145
    existing_vulnerability_name = 'Replay vulnerability'
    existing_environment_name = 'Stroke'
    existing_asset_names = ['Clinical data', 'Data node']
    vulnerability_class = Vulnerability.__module__+'.'+Vulnerability.__name__
    # endregion
    
    def test_get_all(self):
        method = 'test_get_all'
        rv = self.app.get('/api/vulnerabilities?session_id=test')
        vulnerabilities = jsonpickle.decode(rv.data)
        self.assertIsNotNone(vulnerabilities, 'No results after deserialization')
        self.assertIsInstance(vulnerabilities, dict, 'The result is not a dictionary as expected')
        self.assertGreater(len(vulnerabilities), 0, 'No vulnerabilities in the dictionary')
        self.logger.info('[%s] Vulnerabilities found: %d', method, len(vulnerabilities))
        vulnerability = vulnerabilities.values()[0]
        self.logger.info('[%s] First vulnerability: %s [%d]\n', method, vulnerability['theVulnerabilityName'], vulnerability['theVulnerabilityId'])

    def test_get_by_name(self):
        method = 'test_get_by_name'
        url = '/api/vulnerabilities/name/%s?session_id=test' % quote(self.existing_vulnerability_name)
        rv = self.app.get(url)
        self.assertIsNotNone(rv.data, 'No response')
        self.logger.debug('[%s] Response data: %s', method, rv.data)
        vulnerability = jsonpickle.decode(rv.data)
        self.assertIsNotNone(vulnerability, 'No results after deserialization')
        self.logger.info('[%s] Vulnerability: %s [%d]\n', method, vulnerability['theVulnerabilityName'], vulnerability['theVulnerabilityId'])

    def test_delete(self):
        method = 'test_delete'
        url = '/api/vulnerabilities/name/%s?session_id=test' % quote(self.prepare_new_vulnerability().theVulnerabilityName)
        new_vulnerability_body = self.prepare_json()

        self.app.delete(url)
        self.logger.info('[%s] Object to delete: %s', method, new_vulnerability_body)
        self.app.post('/api/vulnerabilities', content_type='application/json', data=new_vulnerability_body)
        self.logger.info('[%s] URL: %s', method, url)
        rv = self.app.delete(url)
        self.logger.info('[%s] Response data: %s', method, rv.data)
        self.assertIsNotNone(rv.data, 'No response')
        json_resp = jsonpickle.decode(rv.data)
        self.assertIsInstance(json_resp, dict, 'The response cannot be converted to a dictionary')
        message = json_resp.get('message', None)
        self.assertIsNotNone(message, 'No message in response')
        self.logger.info('[%s] Message: %s\n', method, message)

    def test_post(self):
        method = 'test_post'
        url = '/api/vulnerabilities'
        self.logger.info('[%s] URL: %s', method, url)
        new_vulnerability_body = self.prepare_json()

        self.app.delete('/api/vulnerabilities/name/%s?session_id=test' % quote(self.prepare_new_vulnerability().theVulnerabilityName))
        rv = self.app.post(url, content_type='application/json', data=new_vulnerability_body)
        self.logger.debug('[%s] Response data: %s', method, rv.data)
        json_resp = jsonpickle.decode(rv.data)
        self.assertIsNotNone(json_resp, 'No results after deserialization')
        env_id = json_resp.get('vulnerability_id', None)
        self.assertIsNotNone(env_id, 'No vulnerability ID returned')
        self.assertGreater(env_id, 0, 'Invalid vulnerability ID returned [%d]' % env_id)
        self.logger.info('[%s] Vulnerability ID: %d\n', method, env_id)

        rv = self.app.delete('/api/vulnerabilities/name/%s?session_id=test' % quote(self.prepare_new_vulnerability().theVulnerabilityName))

    def test_put(self):
        method = 'test_put'
        url = '/api/vulnerabilities'
        self.logger.info('[%s] URL: %s', method, url)
        new_vulnerability_body = self.prepare_json()

        rv = self.app.delete('/api/vulnerabilities/name/%s?session_id=test' % quote(self.prepare_new_vulnerability().theVulnerabilityName))
        rv = self.app.post(url, content_type='application/json', data=new_vulnerability_body)
        self.logger.debug('[%s] Response data: %s', method, rv.data)
        json_resp = jsonpickle.decode(rv.data)
        self.assertIsNotNone(json_resp, 'No results after deserialization')
        env_id = json_resp.get('vulnerability_id', None)
        self.assertIsNotNone(env_id, 'No vulnerability ID returned')
        self.assertGreater(env_id, 0, 'Invalid vulnerability ID returned [%d]' % env_id)
        self.logger.info('[%s] Vulnerability ID: %d', method, env_id)

        vulnerability_to_update = self.prepare_new_vulnerability()
        vulnerability_to_update.theName = 'Edited test vulnerability'
        vulnerability_to_update.theId = env_id
        upd_env_body = self.prepare_json(vulnerability=vulnerability_to_update)
        rv = self.app.put('/api/vulnerabilities/name/%s?session_id=test' % quote(self.prepare_new_vulnerability().theVulnerabilityName), data=upd_env_body, content_type='application/json')
        self.assertIsNotNone(rv.data, 'No response')
        json_resp = jsonpickle.decode(rv.data)
        self.assertIsNotNone(json_resp)
        self.assertIsInstance(json_resp, dict)
        message = json_resp.get('message', None)
        self.assertIsNotNone(message, 'No message in response')
        self.logger.info('[%s] Message: %s', method, message)
        self.assertGreater(message.find('successfully updated'), -1, 'The vulnerability was not successfully updated')

        rv = self.app.get('/api/vulnerabilities/name/%s?session_id=test' % quote(vulnerability_to_update.theVulnerabilityName))
        upd_vulnerability = jsonpickle.decode(rv.data)
        self.assertIsNotNone(upd_vulnerability, 'Unable to decode JSON data')
        self.logger.debug('[%s] Response data: %s', method, rv.data)
        self.logger.info('[%s] Vulnerability: %s [%d]\n', method, upd_vulnerability['theVulnerabilityName'], upd_vulnerability['theVulnerabilityId'])

        rv = self.app.delete('/api/vulnerabilities/name/%s?session_id=test' % quote(vulnerability_to_update.theName))

    def prepare_new_vulnerability(self):
        new_vulnerability_prop = VulnerabilityEnvironmentProperties(
            environmentName=self.existing_environment_name,
            severity='Critical',
            assets=self.existing_asset_names
        )

        new_vulnerability = Vulnerability(
            vulId=-1,
            vulName='Test Vulnerability',
            vulDesc='This is a test vulnerability',
            vulType='Design',
            tags=[],
            cProps=[new_vulnerability_prop]
        )

        new_vulnerability.theEnvironmentDictionary = {}

        return new_vulnerability

    def prepare_dict(self, vulnerability=None):
        if vulnerability is None:
            vulnerability = self.prepare_new_vulnerability()
        else:
            assert isinstance(vulnerability, Vulnerability)

        return {
            'session_id': 'test',
            'object': vulnerability,
        }

    def prepare_json(self, data_dict=None, vulnerability=None):
        if data_dict is None:
            data_dict = self.prepare_dict(vulnerability=vulnerability)
        else:
            assert isinstance(data_dict, dict)
        new_vulnerability_body = jsonpickle.encode(data_dict)
        self.logger.info('JSON data: %s', new_vulnerability_body)
        return new_vulnerability_body
